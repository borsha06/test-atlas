{"remainingRequest":"/media/itsd/ITSD/Projects/test/node_modules/vue-loader/lib/index.js??vue-loader-options!/media/itsd/ITSD/Projects/test/node_modules/vue-atlas/src/Radio/VaRadioGroup.vue?vue&type=script&lang=js&","dependencies":[{"path":"/media/itsd/ITSD/Projects/test/node_modules/vue-atlas/src/Radio/VaRadioGroup.vue","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/test/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/test/node_modules/babel-loader/lib/index.js","mtime":1526583314000},{"path":"/media/itsd/ITSD/Projects/test/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/test/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport events from '../utils/events'\nimport type from '../utils/type'\nimport validate from '../validate'\nimport validationMixin from '../Mixin/validationMixin'\n\nexport default {\n  name: 'VaRadioGroup',\n  mixins: [validationMixin, events],\n  props: {\n    value: {\n      type: [String, Array]\n    },\n    vertical: {\n      type: Boolean,\n      default: false\n    },\n    prefixCls: {\n      type: String,\n      default: 'va'\n    }\n  },\n  data () {\n    return {\n      currentValue: ''\n    }\n  },\n  methods: {\n    init (val) {\n      if (!type.isUndefined(val)) {\n        this.currentValue = val\n      } else {\n        // first load\n        let children = this.$children\n        let ret\n\n        children.forEach((item) => {\n          item.currentChecked ? ret = item.label : ''\n        })\n        this.currentValue = ret\n      }\n    }\n  },\n  watch: {\n    value (val) {\n      this.currentValue = val\n    },\n    currentValue (val) {\n      this.broadcast('VaRadio', 'Va@radiogroupChange', val)\n      this.broadcast('VaRadioBtn', 'Va@radiogroupChange', val)\n      this.$emit('input', val)\n      this.$emit('change', val)\n    }\n  },\n  created () {\n    this.$on('Va@radioChange', (val) => {\n      this.init(val)\n    })\n  },\n  mounted () {\n    this.currentValue = this.value\n    this.$nextTick(() => {\n      this.init()\n    })\n  },\n  components: {\n    validate\n  },\n  computed: {\n    classObj () {\n      let {prefixCls, vertical} = this\n      let klass = {}\n\n      // The -btn-group class is only necessary to give the proper border radius to buttons\n      // in a radio group if radio buttons are used instead of regular radio elements.\n      klass[prefixCls + '-btn-group'] = !vertical\n      klass[prefixCls + '-btn-group-vertical'] = vertical\n      klass[prefixCls + '-radio-group'] = true\n      klass[prefixCls + '-radio-group-vertical'] = vertical\n\n      return klass\n    }\n  }\n}\n",{"version":3,"sources":["VaRadioGroup.vue"],"names":[],"mappings":";;;;;;;;;;;;;AAaA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"VaRadioGroup.vue","sourceRoot":"node_modules/vue-atlas/src/Radio","sourcesContent":["<template>\n  <div :class=\"classObj\">\n    <slot />\n    <validate\n      :name=\"name\"\n      :rules=\"rules\"\n      :custom-validate=\"customValidate\"\n      :current=\"value\">\n    </validate>\n  </div>\n</template>\n\n<script>\nimport events from '../utils/events'\nimport type from '../utils/type'\nimport validate from '../validate'\nimport validationMixin from '../Mixin/validationMixin'\n\nexport default {\n  name: 'VaRadioGroup',\n  mixins: [validationMixin, events],\n  props: {\n    value: {\n      type: [String, Array]\n    },\n    vertical: {\n      type: Boolean,\n      default: false\n    },\n    prefixCls: {\n      type: String,\n      default: 'va'\n    }\n  },\n  data () {\n    return {\n      currentValue: ''\n    }\n  },\n  methods: {\n    init (val) {\n      if (!type.isUndefined(val)) {\n        this.currentValue = val\n      } else {\n        // first load\n        let children = this.$children\n        let ret\n\n        children.forEach((item) => {\n          item.currentChecked ? ret = item.label : ''\n        })\n        this.currentValue = ret\n      }\n    }\n  },\n  watch: {\n    value (val) {\n      this.currentValue = val\n    },\n    currentValue (val) {\n      this.broadcast('VaRadio', 'Va@radiogroupChange', val)\n      this.broadcast('VaRadioBtn', 'Va@radiogroupChange', val)\n      this.$emit('input', val)\n      this.$emit('change', val)\n    }\n  },\n  created () {\n    this.$on('Va@radioChange', (val) => {\n      this.init(val)\n    })\n  },\n  mounted () {\n    this.currentValue = this.value\n    this.$nextTick(() => {\n      this.init()\n    })\n  },\n  components: {\n    validate\n  },\n  computed: {\n    classObj () {\n      let {prefixCls, vertical} = this\n      let klass = {}\n\n      // The -btn-group class is only necessary to give the proper border radius to buttons\n      // in a radio group if radio buttons are used instead of regular radio elements.\n      klass[prefixCls + '-btn-group'] = !vertical\n      klass[prefixCls + '-btn-group-vertical'] = vertical\n      klass[prefixCls + '-radio-group'] = true\n      klass[prefixCls + '-radio-group-vertical'] = vertical\n\n      return klass\n    }\n  }\n}\n</script>\n"]}]}