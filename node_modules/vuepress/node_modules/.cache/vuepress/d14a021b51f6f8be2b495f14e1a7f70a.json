{"remainingRequest":"/media/itsd/ITSD/Projects/test/node_modules/vue-loader/lib/index.js??vue-loader-options!/media/itsd/ITSD/Projects/test/node_modules/vue-atlas/src/Tabs/VaTabs.vue?vue&type=script&lang=js&","dependencies":[{"path":"/media/itsd/ITSD/Projects/test/node_modules/vue-atlas/src/Tabs/VaTabs.vue","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/test/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/test/node_modules/babel-loader/lib/index.js","mtime":1526583314000},{"path":"/media/itsd/ITSD/Projects/test/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/test/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport ExpiringStorage from '../utils/ExpiringStorage'\n\nexport default {\n  name: 'VaTabs',\n  props: {\n    cacheLifetime: {\n      type: Number,\n      default: 5,\n      required: false\n    },\n    options: {\n      type: Object,\n      required: false,\n      default: () => ({\n        useUrlFragment: false\n      })\n    },\n    prefixCls: {\n      type: String,\n      default: 'va'\n    }\n  },\n  data () {\n    return {\n      tabs: [],\n      activeTabHash: ''\n    }\n  },\n  computed: {\n    classObj () {\n      let {prefixCls} = this\n      let klass = {}\n\n      klass['clearfix'] = true\n      klass[prefixCls + '-nav-tabs'] = true\n\n      return klass\n    },\n    storageKey () {\n      return `va-tabs.cache.${window.location.host}${window.location.pathname}`\n    }\n  },\n  created () {\n    this.tabs = this.$children\n  },\n  mounted () {\n    window.addEventListener('hashchange', () => this.selectTab(window.location.hash))\n\n    if (this.findTab(window.location.hash)) {\n      this.selectTab(window.location.hash)\n      return\n    }\n\n    const previousSelectedTabHash = ExpiringStorage.get(this.storageKey)\n\n    if (this.findTab(previousSelectedTabHash)) {\n      this.selectTab(previousSelectedTabHash)\n      return\n    }\n\n    if (this.tabs.length) {\n      this.selectTab(this.tabs[0].hash)\n    }\n  },\n  methods: {\n    findTab (hash) {\n      return this.tabs.find(tab => tab.hash === hash)\n    },\n    selectTab (selectedTabHash, event) {\n      if (event && !this.options.useUrlFragment) {\n        event.preventDefault()\n      }\n\n      const selectedTab = this.findTab(selectedTabHash)\n\n      if (!selectedTab) {\n        return\n      }\n\n      if (selectedTab.isDisabled) {\n        return\n      }\n\n      this.tabs.forEach(tab => {\n        tab.isActive = (tab.hash === selectedTab.hash)\n      })\n\n      this.$emit('changed', { tab: selectedTab })\n\n      this.activeTabHash = selectedTab.hash\n\n      ExpiringStorage.set(this.storageKey, selectedTab.hash, this.cacheLifetime)\n    },\n    setTabVisible (hash, visible) {\n      const tab = this.findTab(hash)\n\n      if (!tab) {\n        return\n      }\n\n      tab.isVisible = visible\n\n      if (tab.isActive) {\n        tab.isActive = visible\n\n        this.tabs.every((tab, index, array) => {\n          if (tab.isVisible) {\n            tab.isActive = true\n            return false\n          }\n          return true\n        })\n      }\n    },\n    liclassObj (tab) {\n      let {prefixCls} = this\n      let klass = {}\n\n      klass[prefixCls + '-nav-tab'] = true\n      klass[prefixCls + '-nav-tab-active'] = tab.isActive\n\n      return klass\n    },\n    disabledTabClass (tab) {\n      if (tab.isDisabled) {\n        return this.prefixCls + '-nav-tab-disabled'\n      } else {\n        return ''\n      }\n    }\n  }\n}\n",{"version":3,"sources":["VaTabs.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAsBA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"VaTabs.vue","sourceRoot":"node_modules/vue-atlas/src/Tabs","sourcesContent":["<template>\n  <div>\n    <ul :class=\"classObj\">\n      <li\n        v-for=\"(tab, i) in tabs\"\n        :key=\"i\"\n        :class=\"[liclassObj(tab), disabledTabClass(tab)]\"\n        v-show=\"tab.isVisible\">\n        <a\n          v-html=\"tab.header\"\n          @click=\"selectTab(tab.hash, $event)\"\n          :href=\"tab.hash\">\n        </a>\n      </li>\n    </ul>\n    <div :class=\"`${prefixCls}-tab-content`\">\n      <slot />\n    </div>\n  </div>\n</template>\n\n<script>\nimport ExpiringStorage from '../utils/ExpiringStorage'\n\nexport default {\n  name: 'VaTabs',\n  props: {\n    cacheLifetime: {\n      type: Number,\n      default: 5,\n      required: false\n    },\n    options: {\n      type: Object,\n      required: false,\n      default: () => ({\n        useUrlFragment: false\n      })\n    },\n    prefixCls: {\n      type: String,\n      default: 'va'\n    }\n  },\n  data () {\n    return {\n      tabs: [],\n      activeTabHash: ''\n    }\n  },\n  computed: {\n    classObj () {\n      let {prefixCls} = this\n      let klass = {}\n\n      klass['clearfix'] = true\n      klass[prefixCls + '-nav-tabs'] = true\n\n      return klass\n    },\n    storageKey () {\n      return `va-tabs.cache.${window.location.host}${window.location.pathname}`\n    }\n  },\n  created () {\n    this.tabs = this.$children\n  },\n  mounted () {\n    window.addEventListener('hashchange', () => this.selectTab(window.location.hash))\n\n    if (this.findTab(window.location.hash)) {\n      this.selectTab(window.location.hash)\n      return\n    }\n\n    const previousSelectedTabHash = ExpiringStorage.get(this.storageKey)\n\n    if (this.findTab(previousSelectedTabHash)) {\n      this.selectTab(previousSelectedTabHash)\n      return\n    }\n\n    if (this.tabs.length) {\n      this.selectTab(this.tabs[0].hash)\n    }\n  },\n  methods: {\n    findTab (hash) {\n      return this.tabs.find(tab => tab.hash === hash)\n    },\n    selectTab (selectedTabHash, event) {\n      if (event && !this.options.useUrlFragment) {\n        event.preventDefault()\n      }\n\n      const selectedTab = this.findTab(selectedTabHash)\n\n      if (!selectedTab) {\n        return\n      }\n\n      if (selectedTab.isDisabled) {\n        return\n      }\n\n      this.tabs.forEach(tab => {\n        tab.isActive = (tab.hash === selectedTab.hash)\n      })\n\n      this.$emit('changed', { tab: selectedTab })\n\n      this.activeTabHash = selectedTab.hash\n\n      ExpiringStorage.set(this.storageKey, selectedTab.hash, this.cacheLifetime)\n    },\n    setTabVisible (hash, visible) {\n      const tab = this.findTab(hash)\n\n      if (!tab) {\n        return\n      }\n\n      tab.isVisible = visible\n\n      if (tab.isActive) {\n        tab.isActive = visible\n\n        this.tabs.every((tab, index, array) => {\n          if (tab.isVisible) {\n            tab.isActive = true\n            return false\n          }\n          return true\n        })\n      }\n    },\n    liclassObj (tab) {\n      let {prefixCls} = this\n      let klass = {}\n\n      klass[prefixCls + '-nav-tab'] = true\n      klass[prefixCls + '-nav-tab-active'] = tab.isActive\n\n      return klass\n    },\n    disabledTabClass (tab) {\n      if (tab.isDisabled) {\n        return this.prefixCls + '-nav-tab-disabled'\n      } else {\n        return ''\n      }\n    }\n  }\n}\n</script>\n"]}]}