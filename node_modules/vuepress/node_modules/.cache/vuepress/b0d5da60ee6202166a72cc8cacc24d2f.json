{"remainingRequest":"/media/itsd/ITSD/Projects/wilfried/node_modules/vue-loader/lib/index.js??vue-loader-options!/media/itsd/ITSD/Projects/wilfried/node_modules/vue-atlas/src/Timepicker/VaTimepicker.vue?vue&type=script&lang=js&","dependencies":[{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/vue-atlas/src/Timepicker/VaTimepicker.vue","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/babel-loader/lib/index.js","mtime":1526583314000},{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport EventListener from '../utils/EventListener'\nimport inputMixin from '../Mixin/inputMixin'\nimport localeMixin from '../Mixin/localeMixin'\n\nexport default {\n  name: 'VaTimepicker',\n  mixins: [inputMixin, localeMixin('VaTimepicker')],\n  props: {\n    value: {\n      type: String\n    },\n    format: {\n      type: String,\n      default: 'hh:mm:ss',\n      required: false\n    },\n    hourRange: {\n      type: Array,\n      default () {\n        return [0, 23]\n      }\n    },\n    minuteRange: {\n      type: Array,\n      default () {\n        return [0, 59]\n      }\n    },\n    secondRange: {\n      type: Array,\n      default () {\n        return [0, 59]\n      }\n    },\n    readonly: {\n      type: Boolean,\n      default: false,\n      required: false\n    },\n    disabled: {\n      type: Boolean,\n      default: false,\n      required: false\n    },\n    prefixCls: {\n      type: String,\n      default: 'va'\n    }\n  },\n  data () {\n    return {\n      show: false,\n      time: {\n        hour: 0,\n        minute: 0,\n        second: 0\n      },\n      currentValue: this.value\n    }\n  },\n  watch: {\n    show (val) {\n      if (!val) this.$emit('hide', this.currentValue)\n    },\n    value (val) {\n      if (this.inner) {\n        this.inner = false\n        return\n      }\n      this.inner = true\n      this.currentValue = val\n    },\n    currentValue (val) {\n      if (this.inner) {\n        this.inner = false\n        return\n      }\n      this.inner = true\n      this.$emit('input', val)\n      this.$emit('change', val)\n    },\n    time: {\n      deep: true,\n      handler (val) {\n        var ret = ''\n        this.time.hour > this.hourRange[1] ? this.time.hour = this.hourRange[1] : 0\n        this.time.minute > this.minuteRange[1] ? this.time.minute = this.minuteRange[1] : 0\n        this.time.second > this.secondRange[1] ? this.time.second = this.secondRange[1] : 0\n        this.time.hour < this.hourRange[0] ? this.time.hour = this.hourRange[0] : 0\n        this.time.minute < this.minuteRange[0] ? this.time.minute = this.minuteRange[0] : 0\n        this.time.second < this.secondRange[0] ? this.time.second = this.secondRange[0] : 0\n        if (this.hour) {\n          ret += this.fix(this.time.hour, 2) + ':'\n        }\n        if (this.minute) {\n          ret += this.fix(this.time.minute, 2) + ':'\n        }\n        if (this.second) {\n          ret += this.fix(this.time.second, 2) + ':'\n        }\n        ret = ret.substr(0, ret.length - 1)\n        this.currentValue = ret\n      }\n    }\n  },\n  methods: {\n    clean () {\n      this.time = {\n        hour: 0,\n        minute: 0,\n        second: 0\n      }\n      this.$nextTick(() => {\n        this.currentValue = ''\n      })\n    },\n    close () {\n      this.show = false\n    },\n    inputClick () {\n      if (this.disabled) return\n      this.show = !this.show\n    },\n    fix (num, length) {\n      num = parseInt(num)\n      num = isNaN(num) ? 0 : num\n      return ('' + num).length < length ? ((new Array(length + 1)).join('0') + num).slice(-length) : '' + num\n    },\n    _format (str) {\n      if (str) {\n        var a = str.split(':')\n        if (this.hour) {\n          this.time.hour = parseInt(a[0] ? a[0] : 0)\n        }\n        if (this.minute) {\n          this.time.minute = parseInt(a[1] ? a[1] : 0)\n        }\n        if (this.second) {\n          this.time.second = parseInt(a[2] ? a[2] : 0)\n        }\n      }\n    }\n  },\n  computed: {\n    hour () {\n      return this.format.indexOf('hh') > -1\n    },\n    minute () {\n      return this.format.indexOf('mm') > -1\n    },\n    second () {\n      return this.format.indexOf('ss') > -1\n    }\n  },\n  created () {\n    this._format(this.currentValue)\n  },\n  mounted () {\n    this._closeEvent = EventListener.listen(window, 'click', (e) => {\n      if (!this.$el.contains(e.target)) this.close()\n    })\n  },\n  beforeDestroy () {\n    if (this._closeEvent) this._closeEvent.remove()\n  }\n}\n",{"version":3,"sources":["VaTimepicker.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqfile":"VaTimepicker.vue","sourceRoot":"node_modules/vue-atlas/src/Timepicker","sourcesContent":["<template>\n  <div :class=\"`${prefixCls}-timepicker`\">\n    <va-input\n      :width=\"width\"\n      :name=\"name\"\n      :rules=\"rules\"\n      :placeholder=\"placeholder\"\n      :custom-validate=\"customValidate\"\n      :disabled=\"disabled\"\n      :readonly=\"readonly\"\n      @clean=\"clean\"\n      @click.native=\"inputClick\"\n      :show-clean=\"true\"\n      icon=\"clock\"\n      icon-style=\"regular\"\n      v-model=\"currentValue\">\n    </va-input>\n    <transition name=\"fadeDown\">\n      <div v-show=\"show\" v-va-position=\"show\" :class=\"`${prefixCls}-timepicker-popup`\">\n        <div v-if=\"hour\" data-role=\"hour\" :class=\"`${prefixCls}-timepicker-range-wrap`\">\n          <span>{{getL('hour')}}</span>\n          <va-range :width=\"190\" v-model=\"time.hour\" :min=\"hourRange[0]\" :max=\"hourRange[1]\" :class=\"`${prefixCls}-timepicker-range`\"></va-range>\n        </div>\n        <div v-if=\"minute\" data-role=\"minute\" :class=\"`${prefixCls}-timepicker-range-wrap`\">\n          <span>{{getL('minute')}}</span>\n          <va-range :width=\"190\" v-model=\"time.minute\" :min=\"minuteRange[0]\" :max=\"minuteRange[1]\" :class=\"`${prefixCls}-timepicker-range`\"></va-range>\n        </div>\n        <div v-if=\"second\" data-role=\"second\" :class=\"`${prefixCls}-timepicker-range-wrap`\">\n          <span>{{getL('second')}}</span>\n          <va-range :width=\"190\" v-model=\"time.second\" :min=\"secondRange[0]\" :max=\"secondRange[1]\" :class=\"`${prefixCls}-timepicker-range`\"></va-range>\n        </div>\n      </div>\n    </transition>\n  </div>\n</template>\n\n<script>\nimport EventListener from '../utils/EventListener'\nimport inputMixin from '../Mixin/inputMixin'\nimport localeMixin from '../Mixin/localeMixin'\n\nexport default {\n  name: 'VaTimepicker',\n  mixins: [inputMixin, localeMixin('VaTimepicker')],\n  props: {\n    value: {\n      type: String\n    },\n    format: {\n      type: String,\n      default: 'hh:mm:ss',\n      required: false\n    },\n    hourRange: {\n      type: Array,\n      default () {\n        return [0, 23]\n      }\n    },\n    minuteRange: {\n      type: Array,\n      default () {\n        return [0, 59]\n      }\n    },\n    secondRange: {\n      type: Array,\n      default () {\n        return [0, 59]\n      }\n    },\n    readonly: {\n      type: Boolean,\n      default: false,\n      required: false\n    },\n    disabled: {\n      type: Boolean,\n      default: false,\n      required: false\n    },\n    prefixCls: {\n      type: String,\n      default: 'va'\n    }\n  },\n  data () {\n    return {\n      show: false,\n      time: {\n        hour: 0,\n        minute: 0,\n        second: 0\n      },\n      currentValue: this.value\n    }\n  },\n  watch: {\n    show (val) {\n      if (!val) this.$emit('hide', this.currentValue)\n    },\n    value (val) {\n      if (this.inner) {\n        this.inner = false\n        return\n      }\n      this.inner = true\n      this.currentValue = val\n    },\n    currentValue (val) {\n      if (this.inner) {\n        this.inner = false\n        return\n      }\n      this.inner = true\n      this.$emit('input', val)\n      this.$emit('change', val)\n    },\n    time: {\n      deep: true,\n      handler (val) {\n        var ret = ''\n        this.time.hour > this.hourRange[1] ? this.time.hour = this.hourRange[1] : 0\n        this.time.minute > this.minuteRange[1] ? this.time.minute = this.minuteRange[1] : 0\n        this.time.second > this.secondRange[1] ? this.time.second = this.secondRange[1] : 0\n        this.time.hour < this.hourRange[0] ? this.time.hour = this.hourRange[0] : 0\n        this.time.minute < this.minuteRange[0] ? this.time.minute = this.minuteRange[0] : 0\n        this.time.second < this.secondRange[0] ? this.time.second = this.secondRange[0] : 0\n        if (this.hour) {\n          ret += this.fix(this.time.hour, 2) + ':'\n        }\n        if (this.minute) {\n          ret += this.fix(this.time.minute, 2) + ':'\n        }\n        if (this.second) {\n          ret += this.fix(this.time.second, 2) + ':'\n        }\n        ret = ret.substr(0, ret.length - 1)\n        this.currentValue = ret\n      }\n    }\n  },\n  methods: {\n    clean () {\n      this.time = {\n        hour: 0,\n        minute: 0,\n        second: 0\n      }\n      this.$nextTick(() => {\n        this.currentValue = ''\n      })\n    },\n    close () {\n      this.show = false\n    },\n    inputClick () {\n      if (this.disabled) return\n      this.show = !this.show\n    },\n    fix (num, length) {\n      num = parseInt(num)\n      num = isNaN(num) ? 0 : num\n      return ('' + num).length < length ? ((new Array(length + 1)).join('0') + num).slice(-length) : '' + num\n    },\n    _format (str) {\n      if (str) {\n        var a = str.split(':')\n        if (this.hour) {\n          this.time.hour = parseInt(a[0] ? a[0] : 0)\n        }\n        if (this.minute) {\n          this.time.minute = parseInt(a[1] ? a[1] : 0)\n        }\n        if (this.second) {\n          this.time.second = parseInt(a[2] ? a[2] : 0)\n        }\n      }\n    }\n  },\n  computed: {\n    hour () {\n      return this.format.indexOf('hh') > -1\n    },\n    minute () {\n      return this.format.indexOf('mm') > -1\n    },\n    second () {\n      return this.format.indexOf('ss') > -1\n    }\n  },\n  created () {\n    this._format(this.currentValue)\n  },\n  mounted () {\n    this._closeEvent = EventListener.listen(window, 'click', (e) => {\n      if (!this.$el.contains(e.target)) this.close()\n    })\n  },\n  beforeDestroy () {\n    if (this._closeEvent) this._closeEvent.remove()\n  }\n}\n</script>\n"]}]}