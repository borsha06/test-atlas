{"remainingRequest":"/media/itsd/ITSD/Projects/test/node_modules/babel-loader/lib/index.js??ref--3-1!/media/itsd/ITSD/Projects/test/node_modules/cache-loader/dist/cjs.js??ref--0-0!/media/itsd/ITSD/Projects/test/node_modules/vue-loader/lib/index.js??vue-loader-options!/media/itsd/ITSD/Projects/test/node_modules/vue-atlas/src/Sidebar/VaSidebarGroupItem.vue?vue&type=script&lang=js&","dependencies":[{"path":"/media/itsd/ITSD/Projects/test/node_modules/vue-atlas/src/Sidebar/VaSidebarGroupItem.vue","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/test/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/test/node_modules/babel-loader/lib/index.js","mtime":1526583314000},{"path":"/media/itsd/ITSD/Projects/test/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/test/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: 'VaSidebarGroupItem',\n  props: {\n    item: {\n      type: Object\n    },\n    isOpen: {\n      type: Boolean,\n      default: false\n    },\n    showToggle: {\n      type: Boolean,\n      default: false\n    },\n    toggleType: {\n      type: String,\n      required: false\n    },\n    prefixCls: {\n      type: String,\n      default: 'va'\n    }\n  },\n  data: function data() {\n    var s = this.showToggle;\n    return {\n      st: s,\n      minified: false\n    };\n  },\n  created: function created() {\n    var _this = this;\n\n    this.$on('Va@showToggleChange', function (val) {\n      _this.st = val;\n    });\n  },\n  computed: {\n    itemHasMethod: function itemHasMethod() {\n      return this.item.method !== undefined;\n    },\n    itemMethod: function itemMethod() {\n      if (this.itemHasMethod) {\n        return {\n          click: this.item.method\n        };\n      }\n    },\n    showIcon: function showIcon() {\n      return this.item.icon !== undefined;\n    },\n    showLabel: function showLabel() {\n      return this.item.route === undefined && this.item.element === undefined && this.item.external === undefined;\n    },\n    showLink: function showLink() {\n      return this.item.route !== undefined || this.item.element !== undefined;\n    },\n    showHyperLink: function showHyperLink() {\n      return this.showLink && this.$router === undefined;\n    },\n    showExternalHyperLink: function showExternalHyperLink() {\n      return this.item.external !== undefined;\n    },\n    showRouterLink: function showRouterLink() {\n      return this.showLink && this.$router !== undefined;\n    },\n    classObj: function classObj() {\n      var prefixCls = this.prefixCls,\n          minified = this.minified;\n      var klass = {};\n      klass[prefixCls + '-sidebar-group-item-text'] = true;\n      klass[prefixCls + '-sidebar-group-item-minified'] = minified;\n      return klass;\n    }\n  },\n  methods: {\n    setAsActiveIfActive: function setAsActiveIfActive() {\n      var parentElement = this.$refs.itemText.parentElement;\n\n      if (parentElement.classList) {\n        if (parentElement.classList.contains('active')) {\n          parentElement.classList.remove('active');\n        }\n      }\n\n      if (this.item.route !== undefined) {\n        if (this.$route.path !== undefined) {\n          if (this.item.route === this.$route.path) {\n            if (parentElement.classList) {\n              parentElement.classList.add('active');\n            }\n          }\n        }\n      }\n    }\n  },\n  watch: {\n    item: function item() {},\n    $route: function $route() {\n      this.setAsActiveIfActive();\n    }\n  },\n  mounted: function mounted() {\n    if (!this.$router) {\n      window.addEventListener('hashchange', function () {// todo\n      });\n    }\n\n    this.setAsActiveIfActive();\n  }\n};",{"version":3,"sources":["VaSidebarGroupItem.vue"],"names":[],"mappings":"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","sourcesContent":["<!--\n * Original implementation by MisRob and released under the MIT license.\n * https://github.com/MisRob/vue-tree-navigation\n * Modified for use with vue-atlas\n */\n-->\n<template>\n  <span :class=\"classObj\" ref=\"itemText\" v-on=\"itemMethod\">\n\n    <!-- The toggle icon -->\n    <span v-if=\"st && toggleType === 'circle'\" :class=\"`${prefixCls}-sidebar-group-item-text-icon`\">\n      <va-icon type=\"circle\"></va-icon>\n    </span>\n\n    <!-- The item's FontAwesome icon, if any -->\n    <span v-if=\"showIcon\" :class=\"`${prefixCls}-sidebar-group-item-icon`\">\n      <va-icon v-if=\"item.iconColor\" :type=\"item.icon\" :color=\"item.iconColor\" :size=\"item.iconSize\" :icon-style=\"item.iconStyle\"></va-icon>\n      <va-icon v-else :type=\"item.icon\" :size=\"item.iconSize\" :icon-style=\"item.iconStyle\"></va-icon>\n    </span>\n\n    <!-- If this is just a label -->\n    <span v-if=\"showLabel\" :class=\"`${prefixCls}-sidebar-group-item-label`\">\n      {{item.name}}\n      <span v-if=\"item.sub\" :class=\"`${prefixCls}-sidebar-group-item-substring`\">{{item.sub}}</span>\n    </span>\n\n    <!-- If this is a router link -->\n    <router-link v-if=\"showRouterLink\" :to=\"item.meta.target\" :class=\"`${prefixCls}-sidebar-group-item-router-link`\">\n      {{item.name}}\n      <span v-if=\"item.sub\" :class=\"`${prefixCls}-sidebar-group-item-substring`\">{{item.sub}}</span>\n    </router-link>\n\n    <!-- If this is a hyperlink -->\n    <a v-if=\"showHyperLink\" :href=\"item.meta.target\" :class=\"`${prefixCls}-sidebar-group-item-link`\">\n      {{item.name}}\n      <span v-if=\"item.sub\" :class=\"`${prefixCls}-sidebar-group-item-substring`\">{{item.sub}}</span>\n    </a>\n\n    <!-- If this is an external hyperlink -->\n    <a v-if=\"showExternalHyperLink\" :href=\"item.meta.target\" target=\"_blank\" :class=\"`${prefixCls}-sidebar-group-item-external-link`\">\n      {{item.name}}\n      <span v-if=\"item.sub\" :class=\"`${prefixCls}-sidebar-group-item-substring`\">{{item.sub}}</span>\n    </a>\n\n    <!-- If there's a lozenge -->\n    <span v-if=\"item.lozenge\" style=\"display: flex;\">\n      <va-lozenge uppercase :type=\"item.lozenge.type\">{{item.lozenge.text}}</va-lozenge>\n    </span>\n\n  </span>\n</template>\n\n<script>\nexport default {\n  name: 'VaSidebarGroupItem',\n  props: {\n    item: {\n      type: Object\n    },\n    isOpen: {\n      type: Boolean,\n      default: false\n    },\n    showToggle: {\n      type: Boolean,\n      default: false\n    },\n    toggleType: {\n      type: String,\n      required: false\n    },\n    prefixCls: {\n      type: String,\n      default: 'va'\n    }\n  },\n  data () {\n    let s = this.showToggle\n    return {\n      st: s,\n      minified: false\n    }\n  },\n  created () {\n    this.$on('Va@showToggleChange', (val) => {\n      this.st = val\n    })\n  },\n  computed: {\n    itemHasMethod () {\n      return this.item.method !== undefined\n    },\n    itemMethod () {\n      if (this.itemHasMethod) {\n        return {\n          click: this.item.method\n        }\n      }\n    },\n    showIcon () {\n      return this.item.icon !== undefined\n    },\n    showLabel () {\n      return (\n        this.item.route === undefined &&\n        this.item.element === undefined &&\n        this.item.external === undefined\n      )\n    },\n    showLink () {\n      return this.item.route !== undefined || this.item.element !== undefined\n    },\n    showHyperLink () {\n      return this.showLink && this.$router === undefined\n    },\n    showExternalHyperLink () {\n      return this.item.external !== undefined\n    },\n    showRouterLink () {\n      return this.showLink && this.$router !== undefined\n    },\n    classObj () {\n      let {prefixCls, minified} = this\n      let klass = {}\n\n      klass[prefixCls + '-sidebar-group-item-text'] = true\n      klass[prefixCls + '-sidebar-group-item-minified'] = minified\n\n      return klass\n    }\n  },\n  methods: {\n    setAsActiveIfActive () {\n      let parentElement = this.$refs.itemText.parentElement\n      if (parentElement.classList) {\n        if (parentElement.classList.contains('active')) {\n          parentElement.classList.remove('active')\n        }\n      }\n      if (this.item.route !== undefined) {\n        if (this.$route.path !== undefined) {\n          if (this.item.route === this.$route.path) {\n            if (parentElement.classList) {\n              parentElement.classList.add('active')\n            }\n          }\n        }\n      }\n    }\n  },\n  watch: {\n    item () {\n    },\n    $route () {\n      this.setAsActiveIfActive()\n    }\n  },\n  mounted () {\n    if (!this.$router) {\n      window.addEventListener('hashchange', () => {\n        // todo\n      })\n    }\n\n    this.setAsActiveIfActive()\n  }\n}\n</script>\n"],"sourceRoot":"node_modules/vue-atlas/src/Sidebar"}]}