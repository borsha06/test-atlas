{"remainingRequest":"/media/itsd/ITSD/Projects/test/node_modules/vue-loader/lib/index.js??vue-loader-options!/media/itsd/ITSD/Projects/test/node_modules/vue-atlas/src/validate.vue?vue&type=script&lang=js&","dependencies":[{"path":"/media/itsd/ITSD/Projects/test/node_modules/vue-atlas/src/validate.vue","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/test/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/test/node_modules/babel-loader/lib/index.js","mtime":1526583314000},{"path":"/media/itsd/ITSD/Projects/test/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/test/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n\nimport type from './utils/type'\nimport events from './utils/events'\nimport localeMixin from './Mixin/localeMixin'\n\nexport default {\n  name: 'VaValidate',\n  mixins: [events, localeMixin('VaValidate')],\n  props: {\n    value: {\n      type: String\n    },\n    customValidate: {\n      type: Function\n    },\n    rules: {\n      type: Array\n    },\n    name: {\n      type: String\n    },\n    current: {\n    },\n    prefixCls: {\n      type: String,\n      default: 'va'\n    }\n  },\n  data () {\n    return {\n      tips: '',\n      validate: false,\n      status: '',\n      vStatus: this.value,\n      results: {}\n    }\n  },\n  created () {\n    this.$on('Va@openValidate', (val) => {\n      this.validate = val\n      val ? this.vStatus = this.status : this.vStatus = ''\n    })\n  },\n  computed: {\n    _results: {\n      get () {\n        return this.resuts\n      },\n      set (val, oldVal) {\n        let self = this\n        let tips = ''\n        let status = ''\n\n        for (let key in val) {\n          let obj = val[key]\n          if (type.isObject(obj)) {\n            obj.tips ? tips += obj.tips + '  ' : ''\n            if (obj.validStatus !== 'success') {\n              status = 'error'\n            }\n          }\n        }\n\n        status !== 'error' ? status = 'success' : 0\n\n        self.status = status\n\n        if (self.validate) {\n          self.vStatus = self.status\n        }\n\n        let isvalid = true\n        self.tips = tips\n\n        for (let i in val) {\n          let validStatus = val[i]['validStatus']\n          if (validStatus === 'error') {\n            isvalid = false\n            break\n          }\n        }\n\n        let newVal = Object.assign({}, val)\n        newVal.isvalid = isvalid\n\n        if (this.isEqual(newVal, this.results)) {\n          return\n        }\n\n        this.results = newVal\n\n        self.dispatch('VaForm', 'Va@validateChange', {\n          name: self.name,\n          result: self.results\n        })\n      }\n    }\n  },\n  watch: {\n    current: {\n      handler (newVal, oldVal) {\n        this.valid(newVal)\n      },\n      immediate: true\n    },\n    vStatus (val) {\n      this.$emit('input', val)\n    }\n  },\n  methods: {\n    isEqual (a, b) {\n      let e = true\n      let propsA = Object.keys(a)\n      let propsB = Object.keys(b)\n\n      if (propsA.length !== propsB.length) {\n        return false\n      }\n\n      propsA.forEach(i => {\n        if (a[i]['validStatus'] !== b[i]['validStatus']) {\n          e = false\n          return false\n        }\n      })\n\n      return e\n    },\n    setResult (key, value) {\n      let o = Object.assign({}, this.results)\n      o[key] = value\n      this._results = o\n    },\n    valid (val) {\n      if (this.rules || type.isFunction(this.customValidate)) {\n        this.rulesValid(val)\n      }\n    },\n    rulesItemValid (rule, value) {\n      let self = this\n      let tip = rule.tip\n      let type = rule.type\n\n      switch (type) {\n        case 'required':\n          self.requiredValid(value, tip)\n          break\n        case 'phone':\n          self.phoneValid(value, tip)\n          break\n        case 'number':\n          self.numberValid(value, tip)\n          break\n        case 'telephone':\n          self.telValid(value, tip)\n          break\n        case 'email':\n          self.emailValid(value, tip)\n          break\n      }\n\n      if (type.indexOf('maxlength') > -1) {\n        self.maxlengthValid(type, value, tip)\n        // eslint-disable-next-line\n        return\n      }\n\n      if (type.indexOf('minlength') > -1) {\n        self.minlengthValid(type, value, tip)\n        // eslint-disable-next-line\n        return\n      }\n    },\n    customValid (val) {\n      this.setResult('customValidate', this.customValidate(val))\n    },\n    requiredValid (val, tip) {\n      let self = this\n\n      self._results = self._results || {}\n\n      if (type.isNullOrUndefined(val) || val.length === 0) {\n        self.setResult('requiredValid', {\n          validStatus: 'error',\n          tips: tip || self.getL('required')\n        })\n      } else {\n        self.setResult('requiredValid', {\n          validStatus: 'success',\n          tips: ''\n        })\n      }\n    },\n    maxlengthValid (type, val, tip) {\n      let self = this\n      let maxlength = type.split('=')[1] - 0\n\n      self._results = self._results || {}\n\n      if (val) {\n        if (val.length > maxlength) {\n          self.setResult('maxlengthValid', {\n            validStatus: 'error',\n            tips: tip || self.getL('maxLength') + maxlength\n          })\n        } else {\n          self.setResult('maxlengthValid', {\n            validStatus: 'success',\n            tips: ''\n          })\n        }\n      }\n    },\n    minlengthValid (type, val, tip) {\n      let self = this\n      let minlength = type.split('=')[1] - 0\n\n      self._results = self._results || {}\n\n      if (val) {\n        if (val.length < minlength) {\n          self.setResult('minlengthValid', {\n            validStatus: 'error',\n            tips: tip || self.getL('minLength') + minlength\n          })\n        } else {\n          self.setResult('minlengthValid', {\n            validStatus: 'success',\n            tips: ''\n          })\n        }\n      }\n    },\n    rulesValid (value) {\n      let self = this\n\n      self.rules.forEach((val, index) => {\n        self.rulesItemValid(val, value)\n      })\n\n      if (type.isFunction(self.customValidate)) {\n        self.customValid(value)\n      }\n    },\n    phoneValid (value, tip) {\n      let rule = /^1\\d{10}$/\n\n      if (rule.test(value) || value === '') {\n        this.setResult('isPhoneValid', {\n          validStatus: 'success',\n          tips: ''\n        })\n      } else {\n        this.setResult('isPhoneValid', {\n          validStatus: 'error',\n          tips: tip || this.getL('phone')\n        })\n      }\n    },\n    numberValid (value, tip) {\n      let rule = /^\\d*$/\n\n      if (rule.test(value) || value === '') {\n        this.setResult('isNumberValid', {\n          validStatus: 'success',\n          tips: ''\n        })\n      } else {\n        this.setResult('isNumberValid', {\n          validStatus: 'error',\n          tips: tip || this.getL('number')\n        })\n      }\n    },\n    telValid (value, tip) {\n      // eslint-disable-next-line\n      let rule = /^(([0\\+]\\d{2,3}-)?(0\\d{2,3})-)(\\d{7,8})(-(\\d{3,}))?$/\n\n      if (rule.test(value) || value === '') {\n        this.setResult('isTelValid', {\n          validStatus: 'success',\n          tips: ''\n        })\n      } else {\n        this.setResult('isTelValid', {\n          validStatus: 'error',\n          tips: tip || this.getL('telephone')\n        })\n      }\n    },\n    emailValid (value, tip) {\n      let rule = /^[a-zA-Z0-9_-]+@[a-zA-Z0-9_-]+(\\.[a-zA-Z0-9_-]+)+$/\n\n      if (rule.test(value) || value === '') {\n        this.setResult('isEmailValid', {\n          validStatus: 'success',\n          tips: ''\n        })\n      } else {\n        this.setResult('isEmailValid', {\n          validStatus: 'error',\n          tips: tip || this.getL('email')\n        })\n      }\n    }\n  }\n}\n",{"version":3,"sources":["validate.vue"],"names":[],"mappings":";;;;;;;;AAQA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"validate.vue","sourceRoot":"node_modules/vue-atlas/src","sourcesContent":["<template>\n  <div :class=\"`${prefixCls}-err-tip`\" v-if=\"validate && tips\">\n    <va-icon type=\"exclamation-triangle\" color=\"#DE350B\"></va-icon>\n    {{tips}}\n  </div>\n</template>\n\n<script>\nimport type from './utils/type'\nimport events from './utils/events'\nimport localeMixin from './Mixin/localeMixin'\n\nexport default {\n  name: 'VaValidate',\n  mixins: [events, localeMixin('VaValidate')],\n  props: {\n    value: {\n      type: String\n    },\n    customValidate: {\n      type: Function\n    },\n    rules: {\n      type: Array\n    },\n    name: {\n      type: String\n    },\n    current: {\n    },\n    prefixCls: {\n      type: String,\n      default: 'va'\n    }\n  },\n  data () {\n    return {\n      tips: '',\n      validate: false,\n      status: '',\n      vStatus: this.value,\n      results: {}\n    }\n  },\n  created () {\n    this.$on('Va@openValidate', (val) => {\n      this.validate = val\n      val ? this.vStatus = this.status : this.vStatus = ''\n    })\n  },\n  computed: {\n    _results: {\n      get () {\n        return this.resuts\n      },\n      set (val, oldVal) {\n        let self = this\n        let tips = ''\n        let status = ''\n\n        for (let key in val) {\n          let obj = val[key]\n          if (type.isObject(obj)) {\n            obj.tips ? tips += obj.tips + '  ' : ''\n            if (obj.validStatus !== 'success') {\n              status = 'error'\n            }\n          }\n        }\n\n        status !== 'error' ? status = 'success' : 0\n\n        self.status = status\n\n        if (self.validate) {\n          self.vStatus = self.status\n        }\n\n        let isvalid = true\n        self.tips = tips\n\n        for (let i in val) {\n          let validStatus = val[i]['validStatus']\n          if (validStatus === 'error') {\n            isvalid = false\n            break\n          }\n        }\n\n        let newVal = Object.assign({}, val)\n        newVal.isvalid = isvalid\n\n        if (this.isEqual(newVal, this.results)) {\n          return\n        }\n\n        this.results = newVal\n\n        self.dispatch('VaForm', 'Va@validateChange', {\n          name: self.name,\n          result: self.results\n        })\n      }\n    }\n  },\n  watch: {\n    current: {\n      handler (newVal, oldVal) {\n        this.valid(newVal)\n      },\n      immediate: true\n    },\n    vStatus (val) {\n      this.$emit('input', val)\n    }\n  },\n  methods: {\n    isEqual (a, b) {\n      let e = true\n      let propsA = Object.keys(a)\n      let propsB = Object.keys(b)\n\n      if (propsA.length !== propsB.length) {\n        return false\n      }\n\n      propsA.forEach(i => {\n        if (a[i]['validStatus'] !== b[i]['validStatus']) {\n          e = false\n          return false\n        }\n      })\n\n      return e\n    },\n    setResult (key, value) {\n      let o = Object.assign({}, this.results)\n      o[key] = value\n      this._results = o\n    },\n    valid (val) {\n      if (this.rules || type.isFunction(this.customValidate)) {\n        this.rulesValid(val)\n      }\n    },\n    rulesItemValid (rule, value) {\n      let self = this\n      let tip = rule.tip\n      let type = rule.type\n\n      switch (type) {\n        case 'required':\n          self.requiredValid(value, tip)\n          break\n        case 'phone':\n          self.phoneValid(value, tip)\n          break\n        case 'number':\n          self.numberValid(value, tip)\n          break\n        case 'telephone':\n          self.telValid(value, tip)\n          break\n        case 'email':\n          self.emailValid(value, tip)\n          break\n      }\n\n      if (type.indexOf('maxlength') > -1) {\n        self.maxlengthValid(type, value, tip)\n        // eslint-disable-next-line\n        return\n      }\n\n      if (type.indexOf('minlength') > -1) {\n        self.minlengthValid(type, value, tip)\n        // eslint-disable-next-line\n        return\n      }\n    },\n    customValid (val) {\n      this.setResult('customValidate', this.customValidate(val))\n    },\n    requiredValid (val, tip) {\n      let self = this\n\n      self._results = self._results || {}\n\n      if (type.isNullOrUndefined(val) || val.length === 0) {\n        self.setResult('requiredValid', {\n          validStatus: 'error',\n          tips: tip || self.getL('required')\n        })\n      } else {\n        self.setResult('requiredValid', {\n          validStatus: 'success',\n          tips: ''\n        })\n      }\n    },\n    maxlengthValid (type, val, tip) {\n      let self = this\n      let maxlength = type.split('=')[1] - 0\n\n      self._results = self._results || {}\n\n      if (val) {\n        if (val.length > maxlength) {\n          self.setResult('maxlengthValid', {\n            validStatus: 'error',\n            tips: tip || self.getL('maxLength') + maxlength\n          })\n        } else {\n          self.setResult('maxlengthValid', {\n            validStatus: 'success',\n            tips: ''\n          })\n        }\n      }\n    },\n    minlengthValid (type, val, tip) {\n      let self = this\n      let minlength = type.split('=')[1] - 0\n\n      self._results = self._results || {}\n\n      if (val) {\n        if (val.length < minlength) {\n          self.setResult('minlengthValid', {\n            validStatus: 'error',\n            tips: tip || self.getL('minLength') + minlength\n          })\n        } else {\n          self.setResult('minlengthValid', {\n            validStatus: 'success',\n            tips: ''\n          })\n        }\n      }\n    },\n    rulesValid (value) {\n      let self = this\n\n      self.rules.forEach((val, index) => {\n        self.rulesItemValid(val, value)\n      })\n\n      if (type.isFunction(self.customValidate)) {\n        self.customValid(value)\n      }\n    },\n    phoneValid (value, tip) {\n      let rule = /^1\\d{10}$/\n\n      if (rule.test(value) || value === '') {\n        this.setResult('isPhoneValid', {\n          validStatus: 'success',\n          tips: ''\n        })\n      } else {\n        this.setResult('isPhoneValid', {\n          validStatus: 'error',\n          tips: tip || this.getL('phone')\n        })\n      }\n    },\n    numberValid (value, tip) {\n      let rule = /^\\d*$/\n\n      if (rule.test(value) || value === '') {\n        this.setResult('isNumberValid', {\n          validStatus: 'success',\n          tips: ''\n        })\n      } else {\n        this.setResult('isNumberValid', {\n          validStatus: 'error',\n          tips: tip || this.getL('number')\n        })\n      }\n    },\n    telValid (value, tip) {\n      // eslint-disable-next-line\n      let rule = /^(([0\\+]\\d{2,3}-)?(0\\d{2,3})-)(\\d{7,8})(-(\\d{3,}))?$/\n\n      if (rule.test(value) || value === '') {\n        this.setResult('isTelValid', {\n          validStatus: 'success',\n          tips: ''\n        })\n      } else {\n        this.setResult('isTelValid', {\n          validStatus: 'error',\n          tips: tip || this.getL('telephone')\n        })\n      }\n    },\n    emailValid (value, tip) {\n      let rule = /^[a-zA-Z0-9_-]+@[a-zA-Z0-9_-]+(\\.[a-zA-Z0-9_-]+)+$/\n\n      if (rule.test(value) || value === '') {\n        this.setResult('isEmailValid', {\n          validStatus: 'success',\n          tips: ''\n        })\n      } else {\n        this.setResult('isEmailValid', {\n          validStatus: 'error',\n          tips: tip || this.getL('email')\n        })\n      }\n    }\n  }\n}\n</script>\n"]}]}