{"remainingRequest":"/media/itsd/ITSD/Projects/test/node_modules/vue-loader/lib/index.js??vue-loader-options!/media/itsd/ITSD/Projects/test/node_modules/vue-atlas/src/Lozenge/VaLozenge.vue?vue&type=script&lang=js&","dependencies":[{"path":"/media/itsd/ITSD/Projects/test/node_modules/vue-atlas/src/Lozenge/VaLozenge.vue","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/test/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/test/node_modules/babel-loader/lib/index.js","mtime":1526583314000},{"path":"/media/itsd/ITSD/Projects/test/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/test/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n\nexport default {\n  name: 'VaLozenge',\n  props: {\n    type: {\n      type: String,\n      required: false,\n      default: 'default',\n      note: 'The style of lozenge to render.',\n      validator (v) {\n        return [\n          'default',\n          'primary',\n          'success',\n          'warning',\n          'danger',\n          'subtle',\n          'purple'\n        ].includes(v)\n      }\n    },\n    bold: {\n      type: Boolean,\n      required: false,\n      default: false,\n      note: 'Whether or not to render the bold version of the lozenge.'\n    },\n    uppercase: {\n      type: Boolean,\n      required: false,\n      default: false,\n      note: 'Whether or not to render the uppercase version of the lozenge.'\n    },\n    truncate: {\n      type: Boolean,\n      required: false,\n      default: false,\n      note: 'Whether or not to truncate text after 200px'\n    },\n    size: {\n      type: String,\n      required: false,\n      note: 'Which size of lozenge to render.',\n      validator (v) {\n        return [\n          'lg',\n          'sm'\n        ].includes(v)\n      }\n    },\n    prefixCls: {\n      type: String,\n      required: false,\n      default: 'va'\n    }\n  },\n  computed: {\n    classObj () {\n      let {prefixCls, bold, type, size, uppercase, truncate} = this\n      let klass = {}\n\n      klass[prefixCls + '-lozenge'] = true\n      klass[prefixCls + '-lozenge-bold'] = bold\n      type ? klass[prefixCls + '-lozenge-' + type] = true : ''\n      size ? klass[prefixCls + '-lozenge-' + size] = true : ''\n      uppercase ? klass[prefixCls + '-lozenge-uppercase'] = true : ''\n      truncate ? klass[prefixCls + '-lozenge-truncate'] = true : ''\n\n      return klass\n    }\n  }\n}\n",{"version":3,"sources":["VaLozenge.vue"],"names":[],"mappings":";;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"VaLozenge.vue","sourceRoot":"node_modules/vue-atlas/src/Lozenge","sourcesContent":["<template>\n  <span :class=\"classObj\">\n    <slot />\n  </span>\n</template>\n\n<script>\nexport default {\n  name: 'VaLozenge',\n  props: {\n    type: {\n      type: String,\n      required: false,\n      default: 'default',\n      note: 'The style of lozenge to render.',\n      validator (v) {\n        return [\n          'default',\n          'primary',\n          'success',\n          'warning',\n          'danger',\n          'subtle',\n          'purple'\n        ].includes(v)\n      }\n    },\n    bold: {\n      type: Boolean,\n      required: false,\n      default: false,\n      note: 'Whether or not to render the bold version of the lozenge.'\n    },\n    uppercase: {\n      type: Boolean,\n      required: false,\n      default: false,\n      note: 'Whether or not to render the uppercase version of the lozenge.'\n    },\n    truncate: {\n      type: Boolean,\n      required: false,\n      default: false,\n      note: 'Whether or not to truncate text after 200px'\n    },\n    size: {\n      type: String,\n      required: false,\n      note: 'Which size of lozenge to render.',\n      validator (v) {\n        return [\n          'lg',\n          'sm'\n        ].includes(v)\n      }\n    },\n    prefixCls: {\n      type: String,\n      required: false,\n      default: 'va'\n    }\n  },\n  computed: {\n    classObj () {\n      let {prefixCls, bold, type, size, uppercase, truncate} = this\n      let klass = {}\n\n      klass[prefixCls + '-lozenge'] = true\n      klass[prefixCls + '-lozenge-bold'] = bold\n      type ? klass[prefixCls + '-lozenge-' + type] = true : ''\n      size ? klass[prefixCls + '-lozenge-' + size] = true : ''\n      uppercase ? klass[prefixCls + '-lozenge-uppercase'] = true : ''\n      truncate ? klass[prefixCls + '-lozenge-truncate'] = true : ''\n\n      return klass\n    }\n  }\n}\n</script>\n"]}]}