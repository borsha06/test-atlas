{"remainingRequest":"/media/itsd/ITSD/Projects/wilfried/node_modules/vue-loader/lib/index.js??vue-loader-options!/media/itsd/ITSD/Projects/wilfried/node_modules/vue-atlas/src/LayoutManager/VaLayoutManager.vue?vue&type=script&lang=js&","dependencies":[{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/vue-atlas/src/LayoutManager/VaLayoutManager.vue","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/babel-loader/lib/index.js","mtime":1526583314000},{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n\nimport events from '../utils/events'\n\nexport default {\n  name: 'VaLayoutManager',\n  mixins: [events],\n  props: {\n    desktopSidebarWidth: {\n      type: [Number, String],\n      default: 0,\n      required: false\n    },\n    desktopMinibarWidth: {\n      type: [Number, String],\n      default: 0,\n      required: false\n    },\n    desktopTopbarHeight: {\n      type: [Number, String],\n      default: 0,\n      required: false\n    },\n    mobileFriendly: {\n      type: Boolean,\n      default: true\n    },\n    mobileBreakpoint: {\n      type: Number,\n      default: 768,\n      required: false\n    },\n    mobileSidebarWidth: {\n      type: [Number, String],\n      default: 0,\n      required: false\n    },\n    mobileMinibarWidth: {\n      type: [Number, String],\n      default: 0,\n      required: false\n    },\n    mobileTopbarHeight: {\n      type: [Number, String],\n      default: 0,\n      required: false\n    },\n    rtl: {\n      type: Boolean,\n      default: false\n    },\n    sidebarPriority: {\n      type: Boolean,\n      default: false,\n      required: false\n    },\n    minibarPriority: {\n      type: Boolean,\n      default: false,\n      required: false\n    },\n    topbarPriority: {\n      type: Boolean,\n      default: false,\n      required: false\n    },\n    topbarPadded: {\n      type: Boolean,\n      default: false,\n      required: false\n    },\n    split: {\n      type: Boolean,\n      default: false,\n      required: false\n    },\n    reverse: {\n      type: Boolean,\n      default: false,\n      required: false\n    },\n    desktopMargin: {\n      type: [Number, String],\n      default: 0,\n      required: false\n    },\n    desktopMinimumWidth: {\n      type: [Number, String],\n      default: 0,\n      required: false\n    },\n    bgColor: {\n      type: String,\n      default: '#F4F5F7',\n      required: false\n    },\n    pageBgColor: {\n      type: String,\n      default: '#FFFFFF',\n      required: false\n    },\n    prefixCls: {\n      type: String,\n      default: 'va'\n    }\n  },\n  data () {\n    let dDesktopMinimumWidth = this.desktopMinimumWidth\n    let dDesktopTopbarHeight = this.desktopTopbarHeight\n    let dDesktopMinibarWidth = this.desktopMinibarWidth\n    let dDesktopSidebarWidth = this.desktopSidebarWidth\n    let dMobileSidebarWidth = this.mobileSidebarWidth\n    let dMobileMinibarWidth = this.mobileMinibarWidth\n    let dMobileTopbarHeight = this.mobileTopbarHeight\n    let dSidebarPriority = this.sidebarPriority\n    let dMinibarPriority = this.minibarPriority\n    let currDesktopMargin = this.desktopMargin\n    let dTopbarPriority = this.topbarPriority\n    let dDesktopMargin = this.desktopMargin\n    let dTopbarPadded = this.topbarPadded\n    let dPageBgColor = this.pageBgColor\n    let dReverse = this.reverse\n    let dBgColor = this.bgColor\n    let dSplit = this.split\n    let dRtl = this.rtl\n    return {\n      mDesktopTopbarHeight: dDesktopTopbarHeight,\n      mDesktopMinimumWidth: dDesktopMinimumWidth,\n      mDesktopSidebarWidth: dDesktopSidebarWidth,\n      mDesktopMinibarWidth: dDesktopMinibarWidth,\n      mMobileSidebarWidth: dMobileSidebarWidth,\n      mMobileMinibarWidth: dMobileMinibarWidth,\n      mMobileTopbarHeight: dMobileTopbarHeight,\n      currentDesktopMargin: currDesktopMargin,\n      mMinibarPriority: dMinibarPriority,\n      mSidebarPriority: dSidebarPriority,\n      mTopbarPriority: dTopbarPriority,\n      mDesktopMargin: dDesktopMargin,\n      mTopbarPadded: dTopbarPadded,\n      pastMobileBreakpoint: false,\n      mPageBgColor: dPageBgColor,\n      allowMarginUpdates: true,\n      currentMinibarWidth: 0,\n      currentSidebarWidth: 0,\n      currentTopbarHeight: 0,\n      mMinibarTheme: 'blue',\n      mSidebarTheme: 'blue',\n      mTopbarTheme: 'blue',\n      mReverse: dReverse,\n      haveMinibar: false,\n      mShowToggle: false,\n      mBgColor: dBgColor,\n      haveSidebar: false,\n      haveTopbar: false,\n      mCompact: false,\n      havePage: false,\n      isMobile: false,\n      contentWidth: 0,\n      mPageSize: 'md',\n      mSplit: dSplit,\n      windowWidth: 0,\n      mRtl: dRtl\n    }\n  },\n  watch: {\n    pastMobileBreakpoint (val) {\n      this.broadcastIsMobile(val)\n      this.setAndBroadcastDimensions()\n    },\n    mDesktopSidebarWidth (val) {\n      this.setAndBroadcastDimensions()\n    },\n    mDesktopMinibarWidth (val) {\n      this.setAndBroadcastDimensions()\n    },\n    mDesktopTopbarHeight (val) {\n      this.setAndBroadcastDimensions()\n    },\n    mMobileSidebarWidth (val) {\n      this.setAndBroadcastDimensions()\n    },\n    mMobileMinibarWidth (val) {\n      this.setAndBroadcastDimensions()\n    },\n    mMobileTopbarHeight (val) {\n      this.setAndBroadcastDimensions()\n    },\n    mRtl (val) {\n      this.broadcastIsRTL(val)\n    },\n    mSidebarPriority (val) {\n      this.broadcastSidebarPriority(val)\n    },\n    mMinibarPriority (val) {\n      this.broadcastMinibarPriority(val)\n    },\n    mTopbarPriority (val) {\n      this.broadcastTopbarPriority(val)\n    },\n    mTopbarPadded (val) {\n      this.broadcastTopbarPadded(val)\n    },\n    mBgColor (val) {\n      this.broadcastBgColor(val)\n    },\n    mPageBgColor (val) {\n      this.broadcastPageBgColor(val)\n    },\n    mSplit (val) {\n      this.broadcastIsSplit(val)\n    },\n    mReverse (val) {\n      this.broadcastIsReverse(val)\n    },\n    mCompact (val) {\n      this.broadcastCompact(val)\n    },\n    mShowToggle (val) {\n      this.broadcastShowToggle(val)\n    },\n    mDesktopMargin (val) {\n      /**\n       * Calling _handleResize here. Why? So a new contentWidth\n       * is calculated and broadcasted.\n       */\n      this._handleResize()\n      this.broadcastDesktopMargin(val)\n    },\n    mDesktopMinimumWidth (val) {\n      this.broadcastDesktopMinimumWidth(val)\n    },\n    windowWidth (val) {\n      this.broadcastWindowWidth(val)\n    },\n    contentWidth (val) {\n      this.broadcastContentWidth(val)\n    },\n    allowMarginUpdates (val) {\n      this.broadcastAllowMarginUpdates(val)\n    },\n    mPageSize (val) {\n      this.broadcastPageSize(val)\n    },\n    mTopbarTheme (val) {\n      this.broadcastTopbarTheme(val)\n    },\n    mMinibarTheme (val) {\n      this.broadcastMinibarTheme(val)\n    },\n    mSidebarTheme (val) {\n      this.broadcastSidebarTheme(val)\n    }\n  },\n  methods: {\n    _handleResize () {\n      let ww = window.innerWidth || document.body.clientWidth\n\n      if (parseInt(ww) < this.mobileBreakpoint) {\n        this.pastMobileBreakpoint = true\n      } else {\n        this.pastMobileBreakpoint ? this.pastMobileBreakpoint = false : true\n      }\n\n      this.windowWidth = parseInt(ww)\n      this.contentWidth = this.windowWidth - (this.mDesktopMargin * 2)\n    },\n    broadcastSidebarWidth (val) {\n      this.broadcast('VaSidebar', 'Va@sidebarWidthChange', val)\n      this.broadcast('VaMinibar', 'Va@sidebarWidthChange', val)\n      this.broadcast('VaTopbar', 'Va@sidebarWidthChange', val)\n      this.broadcast('VaPage', 'Va@sidebarWidthChange', val)\n    },\n    broadcastMinibarWidth (val) {\n      this.broadcast('VaSidebar', 'Va@minibarWidthChange', val)\n      this.broadcast('VaMinibar', 'Va@minibarWidthChange', val)\n      this.broadcast('VaTopbar', 'Va@minibarWidthChange', val)\n      this.broadcast('VaPage', 'Va@minibarWidthChange', val)\n    },\n    broadcastTopbarHeight (val) {\n      this.broadcast('VaSidebar', 'Va@topbarHeightChange', val)\n      this.broadcast('VaMinibar', 'Va@topbarHeightChange', val)\n      this.broadcast('VaTopbar', 'Va@topbarHeightChange', val)\n      this.broadcast('VaPage', 'Va@topbarHeightChange', val)\n    },\n    broadcastIsMobile (val) {\n      this.broadcast('VaSidebar', 'Va@sidebarIsMobile', val)\n      this.broadcast('VaMinibar', 'Va@minibarIsMobile', val)\n      this.broadcast('VaTopbar', 'Va@topbarIsMobile', val)\n      this.broadcast('VaPage', 'Va@pageIsMobile', val)\n      this.broadcast('VaRange', 'Va@rangeIsMobile', val)\n      this.broadcast('VaMobile', 'Va@mobileIsMobile', val)\n      this.broadcast('VaDesktop', 'Va@desktopIsMobile', val)\n    },\n    broadcastIsRTL (val) {\n      this.broadcast('VaSidebar', 'Va@rtlChange', val)\n      this.broadcast('VaMinibar', 'Va@rtlChange', val)\n      this.broadcast('VaTopbar', 'Va@rtlChange', val)\n      this.broadcast('VaPage', 'Va@rtlChange', val)\n    },\n    broadcastIsSplit (val) {\n      this.broadcast('VaSidebar', 'Va@splitChange', val)\n      this.broadcast('VaMinibar', 'Va@splitChange', val)\n      this.broadcast('VaTopbar', 'Va@splitChange', val)\n      this.broadcast('VaPage', 'Va@splitChange', val)\n    },\n    broadcastCompact (val) {\n      this.broadcast('VaSidebar', 'Va@compactChange', val)\n    },\n    broadcastShowToggle (val) {\n      this.broadcast('VaSidebar', 'Va@showToggleChange', val)\n      this.broadcast('VaSidebarGroupItem', 'Va@showToggleChange', val)\n      this.broadcast('VaSidebarGroupLevel', 'Va@showToggleChange', val)\n    },\n    broadcastBgColor (val) {\n      /**\n       * Nobody needs to know about BgColor.\n       * Only relevant to this component.\n       */\n    },\n    broadcastPageBgColor (val) {\n      this.broadcast('VaPage', 'Va@pageBgColorChange', val)\n    },\n    broadcastIsReverse (val) {\n      this.broadcast('VaSidebar', 'Va@reverseChange', val)\n      this.broadcast('VaMinibar', 'Va@reverseChange', val)\n      this.broadcast('VaTopbar', 'Va@reverseChange', val)\n      this.broadcast('VaPage', 'Va@reverseChange', val)\n    },\n    broadcastSidebarPriority (val) {\n      this.broadcast('VaSidebar', 'Va@sidebarPriorityChange', val)\n      this.broadcast('VaMinibar', 'Va@sidebarPriorityChange', val)\n      this.broadcast('VaTopbar', 'Va@sidebarPriorityChange', val)\n    },\n    broadcastMinibarPriority (val) {\n      this.broadcast('VaSidebar', 'Va@minibarPriorityChange', val)\n      this.broadcast('VaMinibar', 'Va@minibarPriorityChange', val)\n      this.broadcast('VaTopbar', 'Va@minibarPriorityChange', val)\n    },\n    broadcastTopbarPriority (val) {\n      this.broadcast('VaSidebar', 'Va@topbarPriorityChange', val)\n      this.broadcast('VaMinibar', 'Va@topbarPriorityChange', val)\n      this.broadcast('VaTopbar', 'Va@topbarPriorityChange', val)\n    },\n    broadcastTopbarPadded (val) {\n      this.broadcast('VaTopbar', 'Va@topbarPaddedChange', val)\n    },\n    broadcastDesktopMargin (val) {\n      this.broadcast('VaSidebar', 'Va@desktopMarginChange', val)\n      this.broadcast('VaMinibar', 'Va@desktopMarginChange', val)\n      this.broadcast('VaTopbar', 'Va@desktopMarginChange', val)\n      this.broadcast('VaPage', 'Va@desktopMarginChange', val)\n    },\n    broadcastDesktopMinimumWidth (val) {\n      this.broadcast('VaSidebar', 'Va@desktopMinimumWidthChange', val)\n      this.broadcast('VaMinibar', 'Va@desktopMinimumWidthChange', val)\n      this.broadcast('VaTopbar', 'Va@desktopMinimumWidthChange', val)\n      this.broadcast('VaPage', 'Va@desktopMinimumWidthChange', val)\n    },\n    broadcastAllowMarginUpdates (val) {\n    },\n    broadcastWindowWidth (val) {\n      this.broadcast('VaSidebar', 'Va@windowWidthChange', val)\n      this.broadcast('VaMinibar', 'Va@windowWidthChange', val)\n      this.broadcast('VaTopbar', 'Va@windowWidthChange', val)\n      this.broadcast('VaPage', 'Va@windowWidthChange', val)\n    },\n    broadcastContentWidth (val) {\n      this.broadcast('VaSidebar', 'Va@contentWidthChange', val)\n      this.broadcast('VaMinibar', 'Va@contentWidthChange', val)\n      this.broadcast('VaTopbar', 'Va@contentWidthChange', val)\n      this.broadcast('VaPage', 'Va@contentWidthChange', val)\n    },\n    broadcastPageSize (val) {\n      this.broadcast('VaPage', 'Va@pageSizeChange', val)\n    },\n    broadcastTopbarTheme (val) {\n      this.broadcast('VaTopbar', 'Va@topbarThemeChange', val)\n    },\n    broadcastSidebarTheme (val) {\n      this.broadcast('VaSidebar', 'Va@sidebarThemeChange', val)\n    },\n    broadcastMinibarTheme (val) {\n      this.broadcast('VaMinibar', 'Va@minibarThemeChange', val)\n    },\n    checkForPresenceOfTopbar () {\n      this.broadcast('VaTopbar', 'Va@topbarPresenceCheck', true)\n    },\n    checkForPresenceOfSidebar () {\n      this.broadcast('VaSidebar', 'Va@sidebarPresenceCheck', true)\n    },\n    checkForPresenceOfMinibar () {\n      this.broadcast('VaMinibar', 'Va@minibarPresenceCheck', true)\n    },\n    checkForPresenceOfPage () {\n      this.broadcast('VaPage', 'Va@pagePresenceCheck', true)\n    },\n    setAndBroadcastDimensions () {\n      if (this.pastMobileBreakpoint) {\n        this.currentTopbarHeight = this.mMobileTopbarHeight\n        this.currentMinibarWidth = this.mMobileMinibarWidth\n        this.currentSidebarWidth = this.mMobileSidebarWidth\n      } else {\n        this.currentTopbarHeight = this.mDesktopTopbarHeight\n        this.currentMinibarWidth = this.mDesktopMinibarWidth\n        this.currentSidebarWidth = this.mDesktopSidebarWidth\n      }\n      this.broadcastSidebarWidth(this.currentSidebarWidth)\n      this.broadcastMinibarWidth(this.currentMinibarWidth)\n      this.broadcastTopbarHeight(this.currentTopbarHeight)\n    },\n    enableReceivers () {\n      /**\n       * These exist for VaLayoutManagerConfig.\n       *\n       * Setting these values should trigger the 'watch' on each of them,\n       * which in turn calls the value's respective broadcast function,\n       * broadcasting the new value to whatever has implemented a\n       * LayoutManager.\n       */\n      this.$on('Va@configDesktopTopbarHeightChange', (val) => { this.mDesktopTopbarHeight = val })\n      this.$on('Va@configDesktopMinibarWidthChange', (val) => { this.mDesktopMinibarWidth = val })\n      this.$on('Va@configDesktopMinimumWidthChange', (val) => { this.mDesktopMinimumWidth = val })\n      this.$on('Va@configDesktopSidebarWidthChange', (val) => { this.mDesktopSidebarWidth = val })\n      this.$on('Va@configMobileTopbarHeightChange', (val) => { this.mMobileTopbarHeight = val })\n      this.$on('Va@configMobileSidebarWidth', (val) => { this.mMobileSidebarWidth = val })\n      this.$on('Va@configMobileMinibarWidth', (val) => { this.mMobileMinibarWidth = val })\n      this.$on('Va@configSidebarPriorityChange', (val) => { this.mSidebarPriority = val })\n      this.$on('Va@configMinibarPriorityChange', (val) => { this.mMinibarPriority = val })\n      this.$on('Va@configTopbarPriorityChange', (val) => { this.mTopbarPriority = val })\n      this.$on('Va@configDesktopMarginChange', (val) => { this.mDesktopMargin = val })\n      this.$on('Va@configTopbarPaddedChange', (val) => { this.mTopbarPadded = val })\n      this.$on('Va@configMinibarThemeChange', (val) => { this.mMinibarTheme = val })\n      this.$on('Va@configSidebarThemeChange', (val) => { this.mSidebarTheme = val })\n      this.$on('Va@configTopbarThemeChange', (val) => { this.mTopbarTheme = val })\n      this.$on('Va@configPageBgColorChange', (val) => { this.mPageBgColor = val })\n      this.$on('Va@configShowToggleChange', (val) => { this.mShowToggle = val })\n      this.$on('Va@configPageSizeChange', (val) => { this.mPageSize = val })\n      this.$on('Va@configCompactChange', (val) => { this.mCompact = val })\n      this.$on('Va@configReverseChange', (val) => { this.mReverse = val })\n      this.$on('Va@configBgColorChange', (val) => { this.mBgColor = val })\n      this.$on('Va@configSplitChange', (val) => { this.mSplit = val })\n      this.$on('Va@configRtlChange', (val) => { this.mRtl = val })\n    },\n    broadcastDefaultsToConfig () {\n      setTimeout(() => {\n        this.broadcast('VaLayoutManagerConfig', 'Va@configReceiveDesktopTopbarHeight', this.mDesktopTopbarHeight)\n        this.broadcast('VaLayoutManagerConfig', 'Va@configReceiveDesktopMinibarWidth', this.mDesktopMinibarWidth)\n        this.broadcast('VaLayoutManagerConfig', 'Va@configReceiveDesktopMinimumWidth', this.mDesktopMinimumWidth)\n        this.broadcast('VaLayoutManagerConfig', 'Va@configReceiveDesktopSidebarWidth', this.mDesktopSidebarWidth)\n        this.broadcast('VaLayoutManagerConfig', 'Va@configReceiveMobileSidebarWidth', this.mMobileSidebarWidth)\n        this.broadcast('VaLayoutManagerConfig', 'Va@configReceiveMobileMinibarWidth', this.mMobileMinibarWidth)\n        this.broadcast('VaLayoutManagerConfig', 'Va@configReceiveMobileTopbarHeight', this.mMobileTopbarHeight)\n        this.broadcast('VaLayoutManagerConfig', 'Va@configReceiveSidebarPriority', this.mSidebarPriority)\n        this.broadcast('VaLayoutManagerConfig', 'Va@configReceiveMinibarPriority', this.mMinibarPriority)\n        this.broadcast('VaLayoutManagerConfig', 'Va@configReceiveTopbarPriority', this.mTopbarPriority)\n        this.broadcast('VaLayoutManagerConfig', 'Va@configReceiveDesktopMargin', this.mDesktopMargin)\n        this.broadcast('VaLayoutManagerConfig', 'Va@configReceiveTopbarPadded', this.mTopbarPadded)\n        this.broadcast('VaLayoutManagerConfig', 'Va@configReceiveMinibarTheme', this.mMinibarTheme)\n        this.broadcast('VaLayoutManagerConfig', 'Va@configReceiveSidebarTheme', this.mSidebarTheme)\n        this.broadcast('VaLayoutManagerConfig', 'Va@configReceiveTopbarTheme', this.mTopbarTheme)\n        this.broadcast('VaLayoutManagerConfig', 'Va@configReceivePageBgColor', this.mPageBgColor)\n        this.broadcast('VaLayoutManagerConfig', 'Va@configReceiveShowToggle', this.mShowToggle)\n        this.broadcast('VaLayoutManagerConfig', 'Va@configReceivePageSize', this.mPageSize)\n        this.broadcast('VaLayoutManagerConfig', 'Va@configReceiveCompact', this.mCompact)\n        this.broadcast('VaLayoutManagerConfig', 'Va@configReceiveReverse', this.mReverse)\n        this.broadcast('VaLayoutManagerConfig', 'Va@configReceiveBgColor', this.mBgColor)\n        this.broadcast('VaLayoutManagerConfig', 'Va@configReceiveSplit', this.mSplit)\n        this.broadcast('VaLayoutManagerConfig', 'Va@configReceiveRtl', this.mRtl)\n      }, 100)\n    }\n  },\n  mounted () {\n    window.addEventListener('resize', this._handleResize, false)\n    /**\n     * Call the handler function directly instead of instantiating a resize\n     * event like so: window.dispatchEvent(new Event('resize'))\n     *\n     * Benefit is.. ? Browser compatibility? I dunno.\n     */\n    this._handleResize()\n\n    /**\n     * Mobility check.\n     */\n    this.setAndBroadcastDimensions()\n\n    /**\n     * Presence checks. As of now, this is not really used for\n     * anything. Maybe in the future?\n     */\n    this.checkForPresenceOfSidebar()\n    this.checkForPresenceOfTopbar()\n    this.checkForPresenceOfPage()\n\n    /**\n     * Broadcast props that were passed to the components\n     * that need to do stuff based on their values.\n     */\n    this.broadcastDesktopMinimumWidth(this.mDesktopMinimumWidth)\n    this.broadcastMinibarPriority(this.mMinibarPriority)\n    this.broadcastSidebarPriority(this.mSidebarPriority)\n    this.broadcastTopbarPriority(this.mTopbarPriority)\n    this.broadcastDesktopMargin(this.mDesktopMargin)\n    this.broadcastTopbarPadded(this.mTopbarPadded)\n    this.broadcastContentWidth(this.contentWidth)\n    this.broadcastPageBgColor(this.mPageBgColor)\n    this.broadcastWindowWidth(this.windowWidth)\n    this.broadcastIsReverse(this.mReverse)\n    this.broadcastIsSplit(this.mSplit)\n    this.broadcastIsRTL(this.mRtl)\n\n    /**\n     * --------------------------------------------------\n     * Methods related to VaLayoutManagerConfig\n     *\n     * enableReceivers() exists so that VaLayoutManagerConfig\n     * can talk to VaLayoutManager.\n     */\n    this.enableReceivers()\n\n    /**\n     * broadcastDefaultsToConfig() sends default values to\n     * VaLayoutManagerConfig, in case some values weren't specified.\n     */\n    this.broadcastDefaultsToConfig()\n  },\n  beforeDestroy () {\n    window.removeEventListener('resize', this._handleResize, false)\n  },\n  created () {\n    // Presence replies\n    this.$on('Va@minibarPresenceReply', (val) => { if (val === true) { this.haveMinibar = true } })\n    this.$on('Va@sidebarPresenceReply', (val) => { if (val === true) { this.haveSidebar = true } })\n    this.$on('Va@topbarPresenceReply', (val) => { if (val === true) { this.haveTopbar = true } })\n    this.$on('Va@pagePresenceReply', (val) => { if (val === true) { this.havePage = true } })\n\n    // Listen for Sidebar width change - implemented when Sidebar's resizer was implemented\n    // this.$on('Va@sidebarWidthChange', (val) => {\n    //   this.broadcastSidebarWidth(val)\n    // })\n\n    // Some components might want to request the isMobile status, for example,\n    // if they have been created a while after isMobile was broadcast.\n    // See VaRange.\n    this.$on('Va@requestIsMobile', (val) => { if (val === true) { this.broadcastIsMobile(this.pastMobileBreakpoint) } })\n\n    // Disconnections\n    this.$on('Va@sidebarDisconnect', (val) => { if (val === true) { this.haveSidebar = false } })\n    this.$on('Va@minibarDisconnect', (val) => { if (val === true) { this.haveMinibar = false } })\n    this.$on('Va@topbarDisconnect', (val) => { if (val === true) { this.haveTopbar = false } })\n    this.$on('Va@pageDisconnect', (val) => { if (val === true) { this.havePage = false } })\n  },\n  computed: {\n    styleObj () {\n      let bg = this.mBgColor\n      let style = {}\n\n      style['background'] = bg\n      style['position'] = 'fixed'\n      style['top'] = '0px'\n      style['right'] = '0px'\n      style['bottom'] = '0px'\n      style['left'] = '0px'\n      style['overflow'] = 'scroll'\n\n      return style\n    }\n  }\n}\n",{"version":3,"sources":["VaLayoutManager.vue"],"names":[],"mappingsfile":"VaLayoutManager.vue","sourceRoot":"node_modules/vue-atlas/src/LayoutManager","sourcesContent":["<template>\n  <div :style=\"styleObj\">\n    <slot/>\n  </div>\n</template>\n\n<script>\nimport events from '../utils/events'\n\nexport default {\n  name: 'VaLayoutManager',\n  mixins: [events],\n  props: {\n    desktopSidebarWidth: {\n      type: [Number, String],\n      default: 0,\n      required: false\n    },\n    desktopMinibarWidth: {\n      type: [Number, String],\n      default: 0,\n      required: false\n    },\n    desktopTopbarHeight: {\n      type: [Number, String],\n      default: 0,\n      required: false\n    },\n    mobileFriendly: {\n      type: Boolean,\n      default: true\n    },\n    mobileBreakpoint: {\n      type: Number,\n      default: 768,\n      required: false\n    },\n    mobileSidebarWidth: {\n      type: [Number, String],\n      default: 0,\n      required: false\n    },\n    mobileMinibarWidth: {\n      type: [Number, String],\n      default: 0,\n      required: false\n    },\n    mobileTopbarHeight: {\n      type: [Number, String],\n      default: 0,\n      required: false\n    },\n    rtl: {\n      type: Boolean,\n      default: false\n    },\n    sidebarPriority: {\n      type: Boolean,\n      default: false,\n      required: false\n    },\n    minibarPriority: {\n      type: Boolean,\n      default: false,\n      required: false\n    },\n    topbarPriority: {\n      type: Boolean,\n      default: false,\n      required: false\n    },\n    topbarPadded: {\n      type: Boolean,\n      default: false,\n      required: false\n    },\n    split: {\n      type: Boolean,\n      default: false,\n      required: false\n    },\n    reverse: {\n      type: Boolean,\n      default: false,\n      required: false\n    },\n    desktopMargin: {\n      type: [Number, String],\n      default: 0,\n      required: false\n    },\n    desktopMinimumWidth: {\n      type: [Number, String],\n      default: 0,\n      required: false\n    },\n    bgColor: {\n      type: String,\n      default: '#F4F5F7',\n      required: false\n    },\n    pageBgColor: {\n      type: String,\n      default: '#FFFFFF',\n      required: false\n    },\n    prefixCls: {\n      type: String,\n      default: 'va'\n    }\n  },\n  data () {\n    let dDesktopMinimumWidth = this.desktopMinimumWidth\n    let dDesktopTopbarHeight = this.desktopTopbarHeight\n    let dDesktopMinibarWidth = this.desktopMinibarWidth\n    let dDesktopSidebarWidth = this.desktopSidebarWidth\n    let dMobileSidebarWidth = this.mobileSidebarWidth\n    let dMobileMinibarWidth = this.mobileMinibarWidth\n    let dMobileTopbarHeight = this.mobileTopbarHeight\n    let dSidebarPriority = this.sidebarPriority\n    let dMinibarPriority = this.minibarPriority\n    let currDesktopMargin = this.desktopMargin\n    let dTopbarPriority = this.topbarPriority\n    let dDesktopMargin = this.desktopMargin\n    let dTopbarPadded = this.topbarPadded\n    let dPageBgColor = this.pageBgColor\n    let dReverse = this.reverse\n    let dBgColor = this.bgColor\n    let dSplit = this.split\n    let dRtl = this.rtl\n    return {\n      mDesktopTopbarHeight: dDesktopTopbarHeight,\n      mDesktopMinimumWidth: dDesktopMinimumWidth,\n      mDesktopSidebarWidth: dDesktopSidebarWidth,\n      mDesktopMinibarWidth: dDesktopMinibarWidth,\n      mMobileSidebarWidth: dMobileSidebarWidth,\n      mMobileMinibarWidth: dMobileMinibarWidth,\n      mMobileTopbarHeight: dMobileTopbarHeight,\n      currentDesktopMargin: currDesktopMargin,\n      mMinibarPriority: dMinibarPriority,\n      mSidebarPriority: dSidebarPriority,\n      mTopbarPriority: dTopbarPriority,\n      mDesktopMargin: dDesktopMargin,\n      mTopbarPadded: dTopbarPadded,\n      pastMobileBreakpoint: false,\n      mPageBgColor: dPageBgColor,\n      allowMarginUpdates: true,\n      currentMinibarWidth: 0,\n      currentSidebarWidth: 0,\n      currentTopbarHeight: 0,\n      mMinibarTheme: 'blue',\n      mSidebarTheme: 'blue',\n      mTopbarTheme: 'blue',\n      mReverse: dReverse,\n      haveMinibar: false,\n      mShowToggle: false,\n      mBgColor: dBgColor,\n      haveSidebar: false,\n      haveTopbar: false,\n      mCompact: false,\n      havePage: false,\n      isMobile: false,\n      contentWidth: 0,\n      mPageSize: 'md',\n      mSplit: dSplit,\n      windowWidth: 0,\n      mRtl: dRtl\n    }\n  },\n  watch: {\n    pastMobileBreakpoint (val) {\n      this.broadcastIsMobile(val)\n      this.setAndBroadcastDimensions()\n    },\n    mDesktopSidebarWidth (val) {\n      this.setAndBroadcastDimensions()\n    },\n    mDesktopMinibarWidth (val) {\n      this.setAndBroadcastDimensions()\n    },\n    mDesktopTopbarHeight (val) {\n      this.setAndBroadcastDimensions()\n    },\n    mMobileSidebarWidth (val) {\n      this.setAndBroadcastDimensions()\n    },\n    mMobileMinibarWidth (val) {\n      this.setAndBroadcastDimensions()\n    },\n    mMobileTopbarHeight (val) {\n      this.setAndBroadcastDimensions()\n    },\n    mRtl (val) {\n      this.broadcastIsRTL(val)\n    },\n    mSidebarPriority (val) {\n      this.broadcastSidebarPriority(val)\n    },\n    mMinibarPriority (val) {\n      this.broadcastMinibarPriority(val)\n    },\n    mTopbarPriority (val) {\n      this.broadcastTopbarPriority(val)\n    },\n    mTopbarPadded (val) {\n      this.broadcastTopbarPadded(val)\n    },\n    mBgColor (val) {\n      this.broadcastBgColor(val)\n    },\n    mPageBgColor (val) {\n      this.broadcastPageBgColor(val)\n    },\n    mSplit (val) {\n      this.broadcastIsSplit(val)\n    },\n    mReverse (val) {\n      this.broadcastIsReverse(val)\n    },\n    mCompact (val) {\n      this.broadcastCompact(val)\n    },\n    mShowToggle (val) {\n      this.broadcastShowToggle(val)\n    },\n    mDesktopMargin (val) {\n      /**\n       * Calling _handleResize here. Why? So a new contentWidth\n       * is calculated and broadcasted.\n       */\n      this._handleResize()\n      this.broadcastDesktopMargin(val)\n    },\n    mDesktopMinimumWidth (val) {\n      this.broadcastDesktopMinimumWidth(val)\n    },\n    windowWidth (val) {\n      this.broadcastWindowWidth(val)\n    },\n    contentWidth (val) {\n      this.broadcastContentWidth(val)\n    },\n    allowMarginUpdates (val) {\n      this.broadcastAllowMarginUpdates(val)\n    },\n    mPageSize (val) {\n      this.broadcastPageSize(val)\n    },\n    mTopbarTheme (val) {\n      this.broadcastTopbarTheme(val)\n    },\n    mMinibarTheme (val) {\n      this.broadcastMinibarTheme(val)\n    },\n    mSidebarTheme (val) {\n      this.broadcastSidebarTheme(val)\n    }\n  },\n  methods: {\n    _handleResize () {\n      let ww = window.innerWidth || document.body.clientWidth\n\n      if (parseInt(ww) < this.mobileBreakpoint) {\n        this.pastMobileBreakpoint = true\n      } else {\n        this.pastMobileBreakpoint ? this.pastMobileBreakpoint = false : true\n      }\n\n      this.windowWidth = parseInt(ww)\n      this.contentWidth = this.windowWidth - (this.mDesktopMargin * 2)\n    },\n    broadcastSidebarWidth (val) {\n      this.broadcast('VaSidebar', 'Va@sidebarWidthChange', val)\n      this.broadcast('VaMinibar', 'Va@sidebarWidthChange', val)\n      this.broadcast('VaTopbar', 'Va@sidebarWidthChange', val)\n      this.broadcast('VaPage', 'Va@sidebarWidthChange', val)\n    },\n    broadcastMinibarWidth (val) {\n      this.broadcast('VaSidebar', 'Va@minibarWidthChange', val)\n      this.broadcast('VaMinibar', 'Va@minibarWidthChange', val)\n      this.broadcast('VaTopbar', 'Va@minibarWidthChange', val)\n      this.broadcast('VaPage', 'Va@minibarWidthChange', val)\n    },\n    broadcastTopbarHeight (val) {\n      this.broadcast('VaSidebar', 'Va@topbarHeightChange', val)\n      this.broadcast('VaMinibar', 'Va@topbarHeightChange', val)\n      this.broadcast('VaTopbar', 'Va@topbarHeightChange', val)\n      this.broadcast('VaPage', 'Va@topbarHeightChange', val)\n    },\n    broadcastIsMobile (val) {\n      this.broadcast('VaSidebar', 'Va@sidebarIsMobile', val)\n      this.broadcast('VaMinibar', 'Va@minibarIsMobile', val)\n      this.broadcast('VaTopbar', 'Va@topbarIsMobile', val)\n      this.broadcast('VaPage', 'Va@pageIsMobile', val)\n      this.broadcast('VaRange', 'Va@rangeIsMobile', val)\n      this.broadcast('VaMobile', 'Va@mobileIsMobile', val)\n      this.broadcast('VaDesktop', 'Va@desktopIsMobile', val)\n    },\n    broadcastIsRTL (val) {\n      this.broadcast('VaSidebar', 'Va@rtlChange', val)\n      this.broadcast('VaMinibar', 'Va@rtlChange', val)\n      this.broadcast('VaTopbar', 'Va@rtlChange', val)\n      this.broadcast('VaPage', 'Va@rtlChange', val)\n    },\n    broadcastIsSplit (val) {\n      this.broadcast('VaSidebar', 'Va@splitChange', val)\n      this.broadcast('VaMinibar', 'Va@splitChange', val)\n      this.broadcast('VaTopbar', 'Va@splitChange', val)\n      this.broadcast('VaPage', 'Va@splitChange', val)\n    },\n    broadcastCompact (val) {\n      this.broadcast('VaSidebar', 'Va@compactChange', val)\n    },\n    broadcastShowToggle (val) {\n      this.broadcast('VaSidebar', 'Va@showToggleChange', val)\n      this.broadcast('VaSidebarGroupItem', 'Va@showToggleChange', val)\n      this.broadcast('VaSidebarGroupLevel', 'Va@showToggleChange', val)\n    },\n    broadcastBgColor (val) {\n      /**\n       * Nobody needs to know about BgColor.\n       * Only relevant to this component.\n       */\n    },\n    broadcastPageBgColor (val) {\n      this.broadcast('VaPage', 'Va@pageBgColorChange', val)\n    },\n    broadcastIsReverse (val) {\n      this.broadcast('VaSidebar', 'Va@reverseChange', val)\n      this.broadcast('VaMinibar', 'Va@reverseChange', val)\n      this.broadcast('VaTopbar', 'Va@reverseChange', val)\n      this.broadcast('VaPage', 'Va@reverseChange', val)\n    },\n    broadcastSidebarPriority (val) {\n      this.broadcast('VaSidebar', 'Va@sidebarPriorityChange', val)\n      this.broadcast('VaMinibar', 'Va@sidebarPriorityChange', val)\n      this.broadcast('VaTopbar', 'Va@sidebarPriorityChange', val)\n    },\n    broadcastMinibarPriority (val) {\n      this.broadcast('VaSidebar', 'Va@minibarPriorityChange', val)\n      this.broadcast('VaMinibar', 'Va@minibarPriorityChange', val)\n      this.broadcast('VaTopbar', 'Va@minibarPriorityChange', val)\n    },\n    broadcastTopbarPriority (val) {\n      this.broadcast('VaSidebar', 'Va@topbarPriorityChange', val)\n      this.broadcast('VaMinibar', 'Va@topbarPriorityChange', val)\n      this.broadcast('VaTopbar', 'Va@topbarPriorityChange', val)\n    },\n    broadcastTopbarPadded (val) {\n      this.broadcast('VaTopbar', 'Va@topbarPaddedChange', val)\n    },\n    broadcastDesktopMargin (val) {\n      this.broadcast('VaSidebar', 'Va@desktopMarginChange', val)\n      this.broadcast('VaMinibar', 'Va@desktopMarginChange', val)\n      this.broadcast('VaTopbar', 'Va@desktopMarginChange', val)\n      this.broadcast('VaPage', 'Va@desktopMarginChange', val)\n    },\n    broadcastDesktopMinimumWidth (val) {\n      this.broadcast('VaSidebar', 'Va@desktopMinimumWidthChange', val)\n      this.broadcast('VaMinibar', 'Va@desktopMinimumWidthChange', val)\n      this.broadcast('VaTopbar', 'Va@desktopMinimumWidthChange', val)\n      this.broadcast('VaPage', 'Va@desktopMinimumWidthChange', val)\n    },\n    broadcastAllowMarginUpdates (val) {\n    },\n    broadcastWindowWidth (val) {\n      this.broadcast('VaSidebar', 'Va@windowWidthChange', val)\n      this.broadcast('VaMinibar', 'Va@windowWidthChange', val)\n      this.broadcast('VaTopbar', 'Va@windowWidthChange', val)\n      this.broadcast('VaPage', 'Va@windowWidthChange', val)\n    },\n    broadcastContentWidth (val) {\n      this.broadcast('VaSidebar', 'Va@contentWidthChange', val)\n      this.broadcast('VaMinibar', 'Va@contentWidthChange', val)\n      this.broadcast('VaTopbar', 'Va@contentWidthChange', val)\n      this.broadcast('VaPage', 'Va@contentWidthChange', val)\n    },\n    broadcastPageSize (val) {\n      this.broadcast('VaPage', 'Va@pageSizeChange', val)\n    },\n    broadcastTopbarTheme (val) {\n      this.broadcast('VaTopbar', 'Va@topbarThemeChange', val)\n    },\n    broadcastSidebarTheme (val) {\n      this.broadcast('VaSidebar', 'Va@sidebarThemeChange', val)\n    },\n    broadcastMinibarTheme (val) {\n      this.broadcast('VaMinibar', 'Va@minibarThemeChange', val)\n    },\n    checkForPresenceOfTopbar () {\n      this.broadcast('VaTopbar', 'Va@topbarPresenceCheck', true)\n    },\n    checkForPresenceOfSidebar () {\n      this.broadcast('VaSidebar', 'Va@sidebarPresenceCheck', true)\n    },\n    checkForPresenceOfMinibar () {\n      this.broadcast('VaMinibar', 'Va@minibarPresenceCheck', true)\n    },\n    checkForPresenceOfPage () {\n      this.broadcast('VaPage', 'Va@pagePresenceCheck', true)\n    },\n    setAndBroadcastDimensions () {\n      if (this.pastMobileBreakpoint) {\n        this.currentTopbarHeight = this.mMobileTopbarHeight\n        this.currentMinibarWidth = this.mMobileMinibarWidth\n        this.currentSidebarWidth = this.mMobileSidebarWidth\n      } else {\n        this.currentTopbarHeight = this.mDesktopTopbarHeight\n        this.currentMinibarWidth = this.mDesktopMinibarWidth\n        this.currentSidebarWidth = this.mDesktopSidebarWidth\n      }\n      this.broadcastSidebarWidth(this.currentSidebarWidth)\n      this.broadcastMinibarWidth(this.currentMinibarWidth)\n      this.broadcastTopbarHeight(this.currentTopbarHeight)\n    },\n    enableReceivers () {\n      /**\n       * These exist for VaLayoutManagerConfig.\n       *\n       * Setting these values should trigger the 'watch' on each of them,\n       * which in turn calls the value's respective broadcast function,\n       * broadcasting the new value to whatever has implemented a\n       * LayoutManager.\n       */\n      this.$on('Va@configDesktopTopbarHeightChange', (val) => { this.mDesktopTopbarHeight = val })\n      this.$on('Va@configDesktopMinibarWidthChange', (val) => { this.mDesktopMinibarWidth = val })\n      this.$on('Va@configDesktopMinimumWidthChange', (val) => { this.mDesktopMinimumWidth = val })\n      this.$on('Va@configDesktopSidebarWidthChange', (val) => { this.mDesktopSidebarWidth = val })\n      this.$on('Va@configMobileTopbarHeightChange', (val) => { this.mMobileTopbarHeight = val })\n      this.$on('Va@configMobileSidebarWidth', (val) => { this.mMobileSidebarWidth = val })\n      this.$on('Va@configMobileMinibarWidth', (val) => { this.mMobileMinibarWidth = val })\n      this.$on('Va@configSidebarPriorityChange', (val) => { this.mSidebarPriority = val })\n      this.$on('Va@configMinibarPriorityChange', (val) => { this.mMinibarPriority = val })\n      this.$on('Va@configTopbarPriorityChange', (val) => { this.mTopbarPriority = val })\n      this.$on('Va@configDesktopMarginChange', (val) => { this.mDesktopMargin = val })\n      this.$on('Va@configTopbarPaddedChange', (val) => { this.mTopbarPadded = val })\n      this.$on('Va@configMinibarThemeChange', (val) => { this.mMinibarTheme = val })\n      this.$on('Va@configSidebarThemeChange', (val) => { this.mSidebarTheme = val })\n      this.$on('Va@configTopbarThemeChange', (val) => { this.mTopbarTheme = val })\n      this.$on('Va@configPageBgColorChange', (val) => { this.mPageBgColor = val })\n      this.$on('Va@configShowToggleChange', (val) => { this.mShowToggle = val })\n      this.$on('Va@configPageSizeChange', (val) => { this.mPageSize = val })\n      this.$on('Va@configCompactChange', (val) => { this.mCompact = val })\n      this.$on('Va@configReverseChange', (val) => { this.mReverse = val })\n      this.$on('Va@configBgColorChange', (val) => { this.mBgColor = val })\n      this.$on('Va@configSplitChange', (val) => { this.mSplit = val })\n      this.$on('Va@configRtlChange', (val) => { this.mRtl = val })\n    },\n    broadcastDefaultsToConfig () {\n      setTimeout(() => {\n        this.broadcast('VaLayoutManagerConfig', 'Va@configReceiveDesktopTopbarHeight', this.mDesktopTopbarHeight)\n        this.broadcast('VaLayoutManagerConfig', 'Va@configReceiveDesktopMinibarWidth', this.mDesktopMinibarWidth)\n        this.broadcast('VaLayoutManagerConfig', 'Va@configReceiveDesktopMinimumWidth', this.mDesktopMinimumWidth)\n        this.broadcast('VaLayoutManagerConfig', 'Va@configReceiveDesktopSidebarWidth', this.mDesktopSidebarWidth)\n        this.broadcast('VaLayoutManagerConfig', 'Va@configReceiveMobileSidebarWidth', this.mMobileSidebarWidth)\n        this.broadcast('VaLayoutManagerConfig', 'Va@configReceiveMobileMinibarWidth', this.mMobileMinibarWidth)\n        this.broadcast('VaLayoutManagerConfig', 'Va@configReceiveMobileTopbarHeight', this.mMobileTopbarHeight)\n        this.broadcast('VaLayoutManagerConfig', 'Va@configReceiveSidebarPriority', this.mSidebarPriority)\n        this.broadcast('VaLayoutManagerConfig', 'Va@configReceiveMinibarPriority', this.mMinibarPriority)\n        this.broadcast('VaLayoutManagerConfig', 'Va@configReceiveTopbarPriority', this.mTopbarPriority)\n        this.broadcast('VaLayoutManagerConfig', 'Va@configReceiveDesktopMargin', this.mDesktopMargin)\n        this.broadcast('VaLayoutManagerConfig', 'Va@configReceiveTopbarPadded', this.mTopbarPadded)\n        this.broadcast('VaLayoutManagerConfig', 'Va@configReceiveMinibarTheme', this.mMinibarTheme)\n        this.broadcast('VaLayoutManagerConfig', 'Va@configReceiveSidebarTheme', this.mSidebarTheme)\n        this.broadcast('VaLayoutManagerConfig', 'Va@configReceiveTopbarTheme', this.mTopbarTheme)\n        this.broadcast('VaLayoutManagerConfig', 'Va@configReceivePageBgColor', this.mPageBgColor)\n        this.broadcast('VaLayoutManagerConfig', 'Va@configReceiveShowToggle', this.mShowToggle)\n        this.broadcast('VaLayoutManagerConfig', 'Va@configReceivePageSize', this.mPageSize)\n        this.broadcast('VaLayoutManagerConfig', 'Va@configReceiveCompact', this.mCompact)\n        this.broadcast('VaLayoutManagerConfig', 'Va@configReceiveReverse', this.mReverse)\n        this.broadcast('VaLayoutManagerConfig', 'Va@configReceiveBgColor', this.mBgColor)\n        this.broadcast('VaLayoutManagerConfig', 'Va@configReceiveSplit', this.mSplit)\n        this.broadcast('VaLayoutManagerConfig', 'Va@configReceiveRtl', this.mRtl)\n      }, 100)\n    }\n  },\n  mounted () {\n    window.addEventListener('resize', this._handleResize, false)\n    /**\n     * Call the handler function directly instead of instantiating a resize\n     * event like so: window.dispatchEvent(new Event('resize'))\n     *\n     * Benefit is.. ? Browser compatibility? I dunno.\n     */\n    this._handleResize()\n\n    /**\n     * Mobility check.\n     */\n    this.setAndBroadcastDimensions()\n\n    /**\n     * Presence checks. As of now, this is not really used for\n     * anything. Maybe in the future?\n     */\n    this.checkForPresenceOfSidebar()\n    this.checkForPresenceOfTopbar()\n    this.checkForPresenceOfPage()\n\n    /**\n     * Broadcast props that were passed to the components\n     * that need to do stuff based on their values.\n     */\n    this.broadcastDesktopMinimumWidth(this.mDesktopMinimumWidth)\n    this.broadcastMinibarPriority(this.mMinibarPriority)\n    this.broadcastSidebarPriority(this.mSidebarPriority)\n    this.broadcastTopbarPriority(this.mTopbarPriority)\n    this.broadcastDesktopMargin(this.mDesktopMargin)\n    this.broadcastTopbarPadded(this.mTopbarPadded)\n    this.broadcastContentWidth(this.contentWidth)\n    this.broadcastPageBgColor(this.mPageBgColor)\n    this.broadcastWindowWidth(this.windowWidth)\n    this.broadcastIsReverse(this.mReverse)\n    this.broadcastIsSplit(this.mSplit)\n    this.broadcastIsRTL(this.mRtl)\n\n    /**\n     * --------------------------------------------------\n     * Methods related to VaLayoutManagerConfig\n     *\n     * enableReceivers() exists so that VaLayoutManagerConfig\n     * can talk to VaLayoutManager.\n     */\n    this.enableReceivers()\n\n    /**\n     * broadcastDefaultsToConfig() sends default values to\n     * VaLayoutManagerConfig, in case some values weren't specified.\n     */\n    this.broadcastDefaultsToConfig()\n  },\n  beforeDestroy () {\n    window.removeEventListener('resize', this._handleResize, false)\n  },\n  created () {\n    // Presence replies\n    this.$on('Va@minibarPresenceReply', (val) => { if (val === true) { this.haveMinibar = true } })\n    this.$on('Va@sidebarPresenceReply', (val) => { if (val === true) { this.haveSidebar = true } })\n    this.$on('Va@topbarPresenceReply', (val) => { if (val === true) { this.haveTopbar = true } })\n    this.$on('Va@pagePresenceReply', (val) => { if (val === true) { this.havePage = true } })\n\n    // Listen for Sidebar width change - implemented when Sidebar's resizer was implemented\n    // this.$on('Va@sidebarWidthChange', (val) => {\n    //   this.broadcastSidebarWidth(val)\n    // })\n\n    // Some components might want to request the isMobile status, for example,\n    // if they have been created a while after isMobile was broadcast.\n    // See VaRange.\n    this.$on('Va@requestIsMobile', (val) => { if (val === true) { this.broadcastIsMobile(this.pastMobileBreakpoint) } })\n\n    // Disconnections\n    this.$on('Va@sidebarDisconnect', (val) => { if (val === true) { this.haveSidebar = false } })\n    this.$on('Va@minibarDisconnect', (val) => { if (val === true) { this.haveMinibar = false } })\n    this.$on('Va@topbarDisconnect', (val) => { if (val === true) { this.haveTopbar = false } })\n    this.$on('Va@pageDisconnect', (val) => { if (val === true) { this.havePage = false } })\n  },\n  computed: {\n    styleObj () {\n      let bg = this.mBgColor\n      let style = {}\n\n      style['background'] = bg\n      style['position'] = 'fixed'\n      style['top'] = '0px'\n      style['right'] = '0px'\n      style['bottom'] = '0px'\n      style['left'] = '0px'\n      style['overflow'] = 'scroll'\n\n      return style\n    }\n  }\n}\n</script>\n"]}]}