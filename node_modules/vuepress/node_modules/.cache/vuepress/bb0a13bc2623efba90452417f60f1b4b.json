{"remainingRequest":"/media/itsd/ITSD/Projects/wilfried/node_modules/vue-loader/lib/index.js??vue-loader-options!/media/itsd/ITSD/Projects/wilfried/node_modules/vue-atlas/src/Datepicker/VaDatepicker.vue?vue&type=script&lang=js&","dependencies":[{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/vue-atlas/src/Datepicker/VaDatepicker.vue","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/babel-loader/lib/index.js","mtime":1526583314000},{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport EventListener from '../utils/EventListener'\nimport inputMixin from '../Mixin/inputMixin'\nimport localeMixin from '../Mixin/localeMixin'\nimport format from '../utils/format'\n\nexport default {\n  name: 'VaDatepicker',\n  mixins: [inputMixin, localeMixin('VaDatepicker')],\n  props: {\n    value: {\n      type: String\n    },\n    format: {\n      type: String,\n      default: 'yyyy-MM-dd',\n      required: false,\n      note: 'The RFC2822/ISO date format in which to display the date in the input field. Ex: \\'MM/dd/yyyy\\''\n    },\n    readonly: {\n      type: Boolean,\n      default: false,\n      required: false,\n      note: 'When true, the input cannot be changed with keyboard input'\n    },\n    disabled: {\n      type: Boolean,\n      default: false,\n      required: false,\n      note: 'When true, input is disabled'\n    },\n    prefixCls: {\n      type: String,\n      default: 'va'\n    }\n  },\n  data () {\n    let currentValue = this.value\n    if (typeof currentValue === 'undefined') {\n      this.$emit('input', null)\n      currentValue = null\n    }\n    return {\n      currentValue,\n      currMonth: 0,\n      currYear: 0,\n      today: '',\n      weekRange: [\n        this.getL('sunday'),\n        this.getL('monday'),\n        this.getL('tuesday'),\n        this.getL('wednesday'),\n        this.getL('thursday'),\n        this.getL('friday'),\n        this.getL('saturday')\n      ],\n      dateRange: [],\n      decadeRange: [],\n      currDate: new Date(),\n      displayDayView: false,\n      displayMonthView: false,\n      displayYearView: false,\n      monthNames: [\n        this.getL('january'),\n        this.getL('february'),\n        this.getL('march'),\n        this.getL('april'),\n        this.getL('may'),\n        this.getL('june'),\n        this.getL('july'),\n        this.getL('august'),\n        this.getL('september'),\n        this.getL('october'),\n        this.getL('november'),\n        this.getL('december')\n      ]\n    }\n  },\n  watch: {\n    currDate () {\n      this.getDateRange()\n    },\n    value (val) {\n      if (this.inner) {\n        this.inner = false\n        return\n      }\n      this.inner = true\n      this.currentValue = val || null\n    },\n    currentValue (val) {\n      if (this.inner) {\n        this.inner = false\n        return\n      }\n      this.inner = true\n      this.$emit('input', val)\n      this.$emit('change', this.currentValue)\n    }\n  },\n  methods: {\n    clean () {\n      this.currDate = new Date()\n      this.currYear = this.currDate.getFullYear()\n      this.currMonth = this.currDate.getMonth()\n      // this.currentValue = this.stringify(new Date())\n    },\n    monthClassObj (m) {\n      let {prefixCls, currentValue, monthNames, parse, currDate} = this\n      let klass = {}\n\n      klass[prefixCls + '-datepicker-dateRange-item-active'] =\n        currentValue && parse(currentValue) && monthNames[parse(currentValue).getMonth()] === m && currDate.getFullYear() === parse(currentValue).getFullYear()\n\n      return klass\n    },\n    yearClassObj (decade) {\n      let {prefixCls, currentValue, parse} = this\n      let klass = {}\n\n      klass[prefixCls + '-datepicker-dateRange-item-active'] =\n        currentValue && parse(currentValue) && parse(currentValue).getFullYear() === decade.text\n\n      return klass\n    },\n    close () {\n      this.displayDayView = this.displayMonthView = this.displayYearView = false\n    },\n    inputClick () {\n      if (this.disabled) return\n      if (this.displayMonthView || this.displayYearView) {\n        this.displayDayView = false\n      } else {\n        this.displayDayView = !this.displayDayView\n      }\n    },\n    preNextDecadeClick (flag) {\n      const year = this.currDate.getFullYear()\n      const months = this.currDate.getMonth()\n      const date = this.currDate.getDate()\n\n      if (flag === 0) {\n        this.currDate = new Date(year - 10, months, date)\n      } else {\n        this.currDate = new Date(year + 10, months, date)\n      }\n    },\n    preNextMonthClick (flag) {\n      const year = this.currDate.getFullYear()\n      const month = this.currDate.getMonth()\n      const date = this.currDate.getDate()\n\n      if (flag === 0) {\n        const preMonth = this.getYearMonth(year, month - 1)\n        this.currDate = new Date(preMonth.year, preMonth.month, date)\n        this.currMonth = preMonth.month\n      } else {\n        const nextMonth = this.getYearMonth(year, month + 1)\n        this.currDate = new Date(nextMonth.year, nextMonth.month, date)\n        this.currMonth = nextMonth.month\n      }\n    },\n    preNextYearClick (flag) {\n      const year = this.currDate.getFullYear()\n      const months = this.currDate.getMonth()\n      const date = this.currDate.getDate()\n\n      if (flag === 0) {\n        this.currDate = new Date(year - 1, months, date)\n        this.currYear = year - 1\n        // console.log('currYear', this.currYear)\n      } else {\n        this.currDate = new Date(year + 1, months, date)\n        this.currYear = year + 1\n        // console.log('currYear', this.currYear)\n      }\n    },\n    yearSelect (year) {\n      this.currYear = year\n      this.displayYearView = false\n      this.displayMonthView = true\n      this.currDate = new Date(year, this.currDate.getMonth(), this.currDate.getDate())\n    },\n    daySelect (date, dayNumber, klass) {\n      // let {parse} = this\n      if (klass.indexOf(this.prefixCls + '-datepicker-item-disabled') > -1) {\n        return false\n      } else {\n        if (this.currYear === 0) {\n          this.currYear = this.currDate.getFullYear()\n        }\n\n        if (this.currMonth === 0) {\n          this.currMonth = this.currDate.getMonth()\n        }\n\n        // this.currDate = date\n        this.currDate = new Date(this.currYear, this.currMonth, dayNumber)\n        this.currentValue = this.stringify(this.currDate)\n        // this.displayDayView = false\n      }\n    },\n    switchMonthView () {\n      this.displayDayView = false\n      this.displayMonthView = true\n    },\n    switchDecadeView () {\n      this.displayMonthView = false\n      this.displayYearView = true\n    },\n    monthSelect (index) {\n      this.currMonth = index\n      this.displayMonthView = false\n      this.displayDayView = true\n      this.currDate = new Date(this.currDate.getFullYear(), index, this.currDate.getDate())\n    },\n    getYearMonth (year, month) {\n      if (month > 11) {\n        year++\n        month = 0\n      } else if (month < 0) {\n        year--\n        month = 11\n      }\n\n      return {year: year, month: month}\n    },\n    stringifyDecadeHeader (date) {\n      const yearStr = date.getFullYear().toString()\n      const firstYearOfDecade = yearStr.substring(0, yearStr.length - 1) + 0\n      const lastYearOfDecade = parseInt(firstYearOfDecade, 10) + 10\n\n      return firstYearOfDecade + '-' + lastYearOfDecade\n    },\n    stringifyDayHeader (date) {\n      return this.monthNames[date.getMonth()] + ' ' + date.getFullYear()\n    },\n    stringifyYearHeader (date) {\n      return date.getFullYear()\n    },\n    parseMonth (date) {\n      return this.monthNames[date.getMonth()]\n    },\n    stringify (date, format = this.format) {\n      if (isNaN(date.getFullYear())) return ''\n\n      const year = date.getFullYear()\n      const month = date.getMonth() + 1\n      const day = date.getDate()\n\n      return format\n        .replace(/yyyy/g, year)\n        .replace(/MMMM/g, month)\n        .replace(/MMM/g, month)\n        .replace(/MM/g, ('0' + month).slice(-2))\n        .replace(/dd/g, ('0' + day).slice(-2))\n        // .replace(/yy/g, year)\n        .replace(/M(?!a)/g, month)\n        .replace(/d/g, day)\n    },\n    parse (str) {\n      // const date = new Date(format.dateParse(str, 'YYYY-MM-DD'))\n      const date = new Date(format.dateParse(str, this.format))\n      return isNaN(date.getFullYear()) ? null : date\n    },\n    getDayCount (year, month) {\n      const dict = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n\n      if (month === 1) {\n        if ((year % 400 === 0) || (year % 4 === 0 && year % 100 !== 0)) {\n          return 29\n        }\n        return 28\n      }\n\n      return dict[month]\n    },\n    getDateRange () {\n      this.dateRange = []\n      this.decadeRange = []\n      const time = {\n        year: this.currDate.getFullYear(),\n        month: this.currDate.getMonth(),\n        day: this.currDate.getDate()\n      }\n      const yearStr = time.year.toString()\n      const firstYearOfDecade = (yearStr.substring(0, yearStr.length - 1) + 0) - 1\n      for (let i = 0; i < 12; i++) {\n        this.decadeRange.push({\n          text: firstYearOfDecade + i\n        })\n      }\n\n      const currMonthFirstDay = new Date(time.year, time.month, 1)\n      let firstDayWeek = currMonthFirstDay.getDay() + 1\n      if (firstDayWeek === 0) {\n        firstDayWeek = 7\n      }\n      const dayCount = this.getDayCount(time.year, time.month)\n      if (firstDayWeek > 1) {\n        const preMonth = this.getYearMonth(time.year, time.month - 1)\n        const prevMonthDayCount = this.getDayCount(preMonth.year, preMonth.month)\n        for (let i = 1; i < firstDayWeek; i++) {\n          const dayText = prevMonthDayCount - firstDayWeek + i + 1\n          this.dateRange.push({\n            text: dayText,\n            date: new Date(preMonth.year, preMonth.month, dayText),\n            sclass: this.prefixCls + '-datepicker-item-gray'\n          })\n        }\n      }\n\n      time.day = time.day\n      for (let i = 1; i <= dayCount; i++) {\n        const date = new Date(time.year, time.month, i)\n        // const week = date.getDay()\n        let sclass = ''\n\n        if (i === time.day) {\n          if (this.currentValue) {\n            const valueDate = this.parse(this.currentValue)\n\n            if (valueDate) {\n              if (valueDate.getFullYear() === time.year && valueDate.getMonth() === time.month) {\n                sclass = this.prefixCls + '-datepicker-dateRange-item-active'\n              }\n            }\n          }\n        }\n        this.dateRange.push({\n          text: i,\n          date: date,\n          sclass: sclass\n        })\n      }\n\n      if (this.dateRange.length < 42) {\n        const nextMonthNeed = 42 - this.dateRange.length\n        const nextMonth = this.getYearMonth(time.year, time.month + 1)\n\n        for (let i = 1; i <= nextMonthNeed; i++) {\n          this.dateRange.push({\n            text: i,\n            date: new Date(nextMonth.year, nextMonth.month, i),\n            sclass: this.prefixCls + '-datepicker-item-gray'\n          })\n        }\n      }\n    }\n  },\n  created () {\n    this.today = this.stringify(new Date())\n  },\n  mounted () {\n    this.currDate = this.parse(this.currentValue) || this.parse(new Date())\n    this._closeEvent = EventListener.listen(window, 'click', (e) => {\n      if (!this.$el.contains(e.target)) this.close()\n    })\n  },\n  beforeDestroy () {\n    if (this._closeEvent) this._closeEvent.remove()\n  }\n}\n",{"version":3,"sources":["VaDatepicker.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0IA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"VaDatepicker.vue","sourceRoot":"node_modules/vue-atlas/src/Datepicker","sourcesContent":["<template>\n  <div :class=\"`${prefixCls}-datepicker`\">\n\n    <va-input\n      :width=\"width\"\n      :name=\"name\"\n      :rules=\"rules\"\n      :placeholder=\"placeholder\"\n      :custom-validate=\"customValidate\"\n      :disabled=\"disabled\"\n      :readonly=\"readonly\"\n      :show-clean=\"true\"\n      icon=\"calendar-alt\"\n      @clean=\"clean\"\n      @click.native=\"inputClick\"\n      v-model=\"currentValue\">\n    </va-input>\n\n    <transition name=\"fadeDown\">\n      <div :class=\"`${prefixCls}-datepicker-popup`\" v-show =\"displayDayView\" v-va-position=\"displayDayView\">\n        <div :class=\"`${prefixCls}-datepicker-inner`\">\n          <div :class=\"`${prefixCls}-datepicker-body`\">\n            <div :class=\"`${prefixCls}-datepicker-ctrl`\">\n              <span\n                tabindex=\"0\"\n                :class=\"`${prefixCls}-month-btn ${prefixCls}-datepicker-preBtn`\"\n                @click=\"preNextMonthClick(0)\"\n                v-on:keyup.enter=\"preNextMonthClick(0)\">\n                <va-icon type=\"arrow-left\"></va-icon>\n              </span>\n              <p\n                @click=\"switchMonthView\"\n                tabindex=\"0\"\n                v-on:keyup.enter=\"switchMonthView\">{{stringifyDayHeader(currDate)}}</p>\n              <span\n                tabindex=\"0\"\n                :class=\"`${prefixCls}-month-btn ${prefixCls}-datepicker-nextBtn`\"\n                @click=\"preNextMonthClick(1)\"\n                v-on:keyup.enter=\"preNextMonthClick(1)\">\n                <va-icon type=\"arrow-right\"></va-icon>\n              </span>\n            </div>\n            <div :class=\"`${prefixCls}-datepicker-weekRange`\">\n              <span v-for=\"(w, index) in weekRange\" :key=\"index\">{{w}}</span>\n            </div>\n            <div :class=\"`${prefixCls}-datepicker-dateRange`\">\n              <span\n                v-for=\"(d, index) in dateRange\" :class=\"d.sclass\"\n                @click=\"daySelect(d.date, d.text, d.sclass)\"\n                :key=\"index\"\n                tabindex=\"0\"\n                v-on:keyup.enter=\"daySelect(d.date, d.text, d.sclass)\">{{d.text}}</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </transition>\n    <transition name=\"fadeDown\">\n      <div :class=\"`${prefixCls}-datepicker-popup`\" v-show =\"displayMonthView\" v-va-position=\"displayMonthView\">\n        <div :class=\"`${prefixCls}-datepicker-inner`\">\n          <div :class=\"`${prefixCls}-datepicker-body`\">\n            <div :class=\"`${prefixCls}-datepicker-ctrl`\">\n            <span\n              :class=\"`${prefixCls}-month-btn ${prefixCls}-datepicker-preBtn`\"\n              @click=\"preNextYearClick(0)\"\n              tabindex=\"0\"\n              v-on:keyup.enter=\"preNextYearClick(0)\">\n              <va-icon type=\"arrow-left\"></va-icon>\n            </span>\n            <p\n              @click=\"switchDecadeView\"\n              tabindex=\"0\"\n              v-on:keyup.enter=\"switchDecadeView\">{{stringifyYearHeader(currDate)}}</p>\n            <span\n              :class=\"`${prefixCls}-month-btn ${prefixCls}-datepicker-nextBtn`\"\n              @click=\"preNextYearClick(1)\"\n              tabindex=\"0\"\n              v-on:keyup.enter=\"preNextYearClick(1)\">\n              <va-icon type=\"arrow-right\"></va-icon>\n            </span>\n            </div>\n            <div :class=\"`${prefixCls}-datepicker-monthRange`\">\n              <template v-for=\"(m, index) in monthNames\">\n                <span\n                  :class=\"monthClassObj(m)\"\n                  :key=\"index\"\n                  tabindex=\"0\"\n                  v-on:keyup.enter=\"monthSelect(index)\"\n                  @click=\"monthSelect(index)\">{{m}}</span>\n              </template>\n            </div>\n          </div>\n        </div>\n      </div>\n    </transition>\n    <transition name=\"fadeDown\">\n      <div :class=\"`${prefixCls}-datepicker-popup`\" v-show =\"displayYearView\" v-va-position=\"displayYearView\">\n        <div :class=\"`${prefixCls}-datepicker-inner`\">\n          <div :class=\"`${prefixCls}-datepicker-body`\">\n            <div :class=\"`${prefixCls}-datepicker-ctrl`\">\n              <span\n                :class=\"`${prefixCls}-month-btn ${prefixCls}-datepicker-preBtn`\"\n                @click=\"preNextDecadeClick(0)\"\n                tabindex=\"0\"\n                v-on:keyup.enter=\"preNextDecadeClick(0)\">\n                <va-icon type=\"arrow-left\"></va-icon>\n              </span>\n              <span\n                :class=\"`${prefixCls}-month-btn ${prefixCls}-datepicker-nextBtn`\"\n                @click=\"preNextDecadeClick(1)\"\n                tabindex=\"0\"\n                v-on:keyup.enter=\"preNextDecadeClick(1)\">\n                <va-icon type=\"arrow-right\"></va-icon>\n              </span>\n              <p>\n              {{stringifyDecadeHeader(currDate)}}\n              </p>\n            </div>\n            <div :class=\"`${prefixCls}-datepicker-monthRange ${prefixCls}-datepicker-decadeRange`\">\n              <template v-for=\"(decade, index) in decadeRange\">\n                <span\n                  :class=\"yearClassObj(decade)\"\n                  :key=\"index\"\n                  tabindex=\"0\"\n                  v-on:keyup.enter=\"yearSelect(decade.text)\"\n                  @click.stop=\"yearSelect(decade.text)\">\n                  {{decade.text}}\n                </span>\n              </template>\n            </div>\n          </div>\n        </div>\n      </div>\n    </transition>\n  </div>\n</template>\n\n<script>\nimport EventListener from '../utils/EventListener'\nimport inputMixin from '../Mixin/inputMixin'\nimport localeMixin from '../Mixin/localeMixin'\nimport format from '../utils/format'\n\nexport default {\n  name: 'VaDatepicker',\n  mixins: [inputMixin, localeMixin('VaDatepicker')],\n  props: {\n    value: {\n      type: String\n    },\n    format: {\n      type: String,\n      default: 'yyyy-MM-dd',\n      required: false,\n      note: 'The RFC2822/ISO date format in which to display the date in the input field. Ex: \\'MM/dd/yyyy\\''\n    },\n    readonly: {\n      type: Boolean,\n      default: false,\n      required: false,\n      note: 'When true, the input cannot be changed with keyboard input'\n    },\n    disabled: {\n      type: Boolean,\n      default: false,\n      required: false,\n      note: 'When true, input is disabled'\n    },\n    prefixCls: {\n      type: String,\n      default: 'va'\n    }\n  },\n  data () {\n    let currentValue = this.value\n    if (typeof currentValue === 'undefined') {\n      this.$emit('input', null)\n      currentValue = null\n    }\n    return {\n      currentValue,\n      currMonth: 0,\n      currYear: 0,\n      today: '',\n      weekRange: [\n        this.getL('sunday'),\n        this.getL('monday'),\n        this.getL('tuesday'),\n        this.getL('wednesday'),\n        this.getL('thursday'),\n        this.getL('friday'),\n        this.getL('saturday')\n      ],\n      dateRange: [],\n      decadeRange: [],\n      currDate: new Date(),\n      displayDayView: false,\n      displayMonthView: false,\n      displayYearView: false,\n      monthNames: [\n        this.getL('january'),\n        this.getL('february'),\n        this.getL('march'),\n        this.getL('april'),\n        this.getL('may'),\n        this.getL('june'),\n        this.getL('july'),\n        this.getL('august'),\n        this.getL('september'),\n        this.getL('october'),\n        this.getL('november'),\n        this.getL('december')\n      ]\n    }\n  },\n  watch: {\n    currDate () {\n      this.getDateRange()\n    },\n    value (val) {\n      if (this.inner) {\n        this.inner = false\n        return\n      }\n      this.inner = true\n      this.currentValue = val || null\n    },\n    currentValue (val) {\n      if (this.inner) {\n        this.inner = false\n        return\n      }\n      this.inner = true\n      this.$emit('input', val)\n      this.$emit('change', this.currentValue)\n    }\n  },\n  methods: {\n    clean () {\n      this.currDate = new Date()\n      this.currYear = this.currDate.getFullYear()\n      this.currMonth = this.currDate.getMonth()\n      // this.currentValue = this.stringify(new Date())\n    },\n    monthClassObj (m) {\n      let {prefixCls, currentValue, monthNames, parse, currDate} = this\n      let klass = {}\n\n      klass[prefixCls + '-datepicker-dateRange-item-active'] =\n        currentValue && parse(currentValue) && monthNames[parse(currentValue).getMonth()] === m && currDate.getFullYear() === parse(currentValue).getFullYear()\n\n      return klass\n    },\n    yearClassObj (decade) {\n      let {prefixCls, currentValue, parse} = this\n      let klass = {}\n\n      klass[prefixCls + '-datepicker-dateRange-item-active'] =\n        currentValue && parse(currentValue) && parse(currentValue).getFullYear() === decade.text\n\n      return klass\n    },\n    close () {\n      this.displayDayView = this.displayMonthView = this.displayYearView = false\n    },\n    inputClick () {\n      if (this.disabled) return\n      if (this.displayMonthView || this.displayYearView) {\n        this.displayDayView = false\n      } else {\n        this.displayDayView = !this.displayDayView\n      }\n    },\n    preNextDecadeClick (flag) {\n      const year = this.currDate.getFullYear()\n      const months = this.currDate.getMonth()\n      const date = this.currDate.getDate()\n\n      if (flag === 0) {\n        this.currDate = new Date(year - 10, months, date)\n      } else {\n        this.currDate = new Date(year + 10, months, date)\n      }\n    },\n    preNextMonthClick (flag) {\n      const year = this.currDate.getFullYear()\n      const month = this.currDate.getMonth()\n      const date = this.currDate.getDate()\n\n      if (flag === 0) {\n        const preMonth = this.getYearMonth(year, month - 1)\n        this.currDate = new Date(preMonth.year, preMonth.month, date)\n        this.currMonth = preMonth.month\n      } else {\n        const nextMonth = this.getYearMonth(year, month + 1)\n        this.currDate = new Date(nextMonth.year, nextMonth.month, date)\n        this.currMonth = nextMonth.month\n      }\n    },\n    preNextYearClick (flag) {\n      const year = this.currDate.getFullYear()\n      const months = this.currDate.getMonth()\n      const date = this.currDate.getDate()\n\n      if (flag === 0) {\n        this.currDate = new Date(year - 1, months, date)\n        this.currYear = year - 1\n        // console.log('currYear', this.currYear)\n      } else {\n        this.currDate = new Date(year + 1, months, date)\n        this.currYear = year + 1\n        // console.log('currYear', this.currYear)\n      }\n    },\n    yearSelect (year) {\n      this.currYear = year\n      this.displayYearView = false\n      this.displayMonthView = true\n      this.currDate = new Date(year, this.currDate.getMonth(), this.currDate.getDate())\n    },\n    daySelect (date, dayNumber, klass) {\n      // let {parse} = this\n      if (klass.indexOf(this.prefixCls + '-datepicker-item-disabled') > -1) {\n        return false\n      } else {\n        if (this.currYear === 0) {\n          this.currYear = this.currDate.getFullYear()\n        }\n\n        if (this.currMonth === 0) {\n          this.currMonth = this.currDate.getMonth()\n        }\n\n        // this.currDate = date\n        this.currDate = new Date(this.currYear, this.currMonth, dayNumber)\n        this.currentValue = this.stringify(this.currDate)\n        // this.displayDayView = false\n      }\n    },\n    switchMonthView () {\n      this.displayDayView = false\n      this.displayMonthView = true\n    },\n    switchDecadeView () {\n      this.displayMonthView = false\n      this.displayYearView = true\n    },\n    monthSelect (index) {\n      this.currMonth = index\n      this.displayMonthView = false\n      this.displayDayView = true\n      this.currDate = new Date(this.currDate.getFullYear(), index, this.currDate.getDate())\n    },\n    getYearMonth (year, month) {\n      if (month > 11) {\n        year++\n        month = 0\n      } else if (month < 0) {\n        year--\n        month = 11\n      }\n\n      return {year: year, month: month}\n    },\n    stringifyDecadeHeader (date) {\n      const yearStr = date.getFullYear().toString()\n      const firstYearOfDecade = yearStr.substring(0, yearStr.length - 1) + 0\n      const lastYearOfDecade = parseInt(firstYearOfDecade, 10) + 10\n\n      return firstYearOfDecade + '-' + lastYearOfDecade\n    },\n    stringifyDayHeader (date) {\n      return this.monthNames[date.getMonth()] + ' ' + date.getFullYear()\n    },\n    stringifyYearHeader (date) {\n      return date.getFullYear()\n    },\n    parseMonth (date) {\n      return this.monthNames[date.getMonth()]\n    },\n    stringify (date, format = this.format) {\n      if (isNaN(date.getFullYear())) return ''\n\n      const year = date.getFullYear()\n      const month = date.getMonth() + 1\n      const day = date.getDate()\n\n      return format\n        .replace(/yyyy/g, year)\n        .replace(/MMMM/g, month)\n        .replace(/MMM/g, month)\n        .replace(/MM/g, ('0' + month).slice(-2))\n        .replace(/dd/g, ('0' + day).slice(-2))\n        // .replace(/yy/g, year)\n        .replace(/M(?!a)/g, month)\n        .replace(/d/g, day)\n    },\n    parse (str) {\n      // const date = new Date(format.dateParse(str, 'YYYY-MM-DD'))\n      const date = new Date(format.dateParse(str, this.format))\n      return isNaN(date.getFullYear()) ? null : date\n    },\n    getDayCount (year, month) {\n      const dict = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n\n      if (month === 1) {\n        if ((year % 400 === 0) || (year % 4 === 0 && year % 100 !== 0)) {\n          return 29\n        }\n        return 28\n      }\n\n      return dict[month]\n    },\n    getDateRange () {\n      this.dateRange = []\n      this.decadeRange = []\n      const time = {\n        year: this.currDate.getFullYear(),\n        month: this.currDate.getMonth(),\n        day: this.currDate.getDate()\n      }\n      const yearStr = time.year.toString()\n      const firstYearOfDecade = (yearStr.substring(0, yearStr.length - 1) + 0) - 1\n      for (let i = 0; i < 12; i++) {\n        this.decadeRange.push({\n          text: firstYearOfDecade + i\n        })\n      }\n\n      const currMonthFirstDay = new Date(time.year, time.month, 1)\n      let firstDayWeek = currMonthFirstDay.getDay() + 1\n      if (firstDayWeek === 0) {\n        firstDayWeek = 7\n      }\n      const dayCount = this.getDayCount(time.year, time.month)\n      if (firstDayWeek > 1) {\n        const preMonth = this.getYearMonth(time.year, time.month - 1)\n        const prevMonthDayCount = this.getDayCount(preMonth.year, preMonth.month)\n        for (let i = 1; i < firstDayWeek; i++) {\n          const dayText = prevMonthDayCount - firstDayWeek + i + 1\n          this.dateRange.push({\n            text: dayText,\n            date: new Date(preMonth.year, preMonth.month, dayText),\n            sclass: this.prefixCls + '-datepicker-item-gray'\n          })\n        }\n      }\n\n      time.day = time.day\n      for (let i = 1; i <= dayCount; i++) {\n        const date = new Date(time.year, time.month, i)\n        // const week = date.getDay()\n        let sclass = ''\n\n        if (i === time.day) {\n          if (this.currentValue) {\n            const valueDate = this.parse(this.currentValue)\n\n            if (valueDate) {\n              if (valueDate.getFullYear() === time.year && valueDate.getMonth() === time.month) {\n                sclass = this.prefixCls + '-datepicker-dateRange-item-active'\n              }\n            }\n          }\n        }\n        this.dateRange.push({\n          text: i,\n          date: date,\n          sclass: sclass\n        })\n      }\n\n      if (this.dateRange.length < 42) {\n        const nextMonthNeed = 42 - this.dateRange.length\n        const nextMonth = this.getYearMonth(time.year, time.month + 1)\n\n        for (let i = 1; i <= nextMonthNeed; i++) {\n          this.dateRange.push({\n            text: i,\n            date: new Date(nextMonth.year, nextMonth.month, i),\n            sclass: this.prefixCls + '-datepicker-item-gray'\n          })\n        }\n      }\n    }\n  },\n  created () {\n    this.today = this.stringify(new Date())\n  },\n  mounted () {\n    this.currDate = this.parse(this.currentValue) || this.parse(new Date())\n    this._closeEvent = EventListener.listen(window, 'click', (e) => {\n      if (!this.$el.contains(e.target)) this.close()\n    })\n  },\n  beforeDestroy () {\n    if (this._closeEvent) this._closeEvent.remove()\n  }\n}\n</script>\n"]}]}