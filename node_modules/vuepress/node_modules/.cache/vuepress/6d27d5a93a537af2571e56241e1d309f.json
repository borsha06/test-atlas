{"remainingRequest":"/media/itsd/ITSD/Projects/wilfried/node_modules/vue-loader/lib/index.js??vue-loader-options!/media/itsd/ITSD/Projects/wilfried/node_modules/vue-atlas/src/Radio/VaRadio.vue?vue&type=script&lang=js&","dependencies":[{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/vue-atlas/src/Radio/VaRadio.vue","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/babel-loader/lib/index.js","mtime":1526583314000},{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport validationMixin from '../Mixin/validationMixin'\nimport events from '../utils/events'\nimport validate from '../validate'\n\nexport default {\n  name: 'VaRadio',\n  mixins: [validationMixin, events],\n  props: {\n    value: {\n      type: String\n    },\n    checked: {\n      type: Boolean,\n      default: false\n    },\n    label: {\n      type: [String, Number]\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    prefixCls: {\n      type: String,\n      default: 'va'\n    }\n  },\n  components: {\n    validate\n  },\n  data () {\n    let checked = this.checked\n    if (checked !== undefined) {\n      this.$emit('input', checked)\n    } else {\n      checked = !!this.value\n    }\n\n    return {\n      currentChecked: checked\n    }\n  },\n  computed: {\n    objClass () {\n      let {prefixCls, currentChecked, disabled} = this\n      let klass = {}\n\n      klass[prefixCls + '-radio-span'] = true\n      klass[prefixCls + '-radio-checked'] = currentChecked\n      klass[prefixCls + '-radio-disabled'] = disabled\n\n      return klass\n    }\n  },\n  watch: {\n    value (val) {\n      this.currentChecked = val\n    },\n    checked (val) {\n      this.currentChecked = val\n    },\n    currentChecked (val) {\n      this.$emit('input', val)\n    }\n  },\n  created () {\n    this.$on('Va@radiogroupChange', (val) => {\n      // this.currentChecked = val.indexOf(this.label) > -1\n      this.currentChecked = val === this.label\n    })\n  },\n  methods: {\n    handleClick () {\n      if (this.currentChecked) return\n      this.currentChecked = true\n      this.dispatch('VaRadioGroup', 'Va@radioChange', this.label)\n      this.$emit('change', this.currentChecked)\n    }\n  }\n}\n",{"version":3,"sources":["VaRadio.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAyBA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"VaRadio.vue","sourceRoot":"node_modules/vue-atlas/src/Radio","sourcesContent":["<template>\n  <label :class=\"`${prefixCls}-radio-con`\">\n    <span :class=\"objClass\">\n      <span :class=\"`${prefixCls}-radio-inner`\" tabindex=\"0\" v-on:keyup.enter=\"handleClick\"></span>\n      <input\n        type=\"radio\"\n        tabindex=\"-1\"\n        :disabled=\"disabled\"\n        :checked=\"currentChecked\"\n        :class=\"`${prefixCls}-radio-input`\"\n        @click.prevent=\"handleClick\">\n    </span>\n    <span :class=\"`${prefixCls}-label`\" tabindex=\"-1\">\n      <slot />\n    </span>\n    <validate\n      :name=\"name\"\n      :rules=\"rules\"\n      :custom-validate=\"customValidate\"\n      :current=\"checked\">\n    </validate>\n  </label>\n</template>\n\n<script>\nimport validationMixin from '../Mixin/validationMixin'\nimport events from '../utils/events'\nimport validate from '../validate'\n\nexport default {\n  name: 'VaRadio',\n  mixins: [validationMixin, events],\n  props: {\n    value: {\n      type: String\n    },\n    checked: {\n      type: Boolean,\n      default: false\n    },\n    label: {\n      type: [String, Number]\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    prefixCls: {\n      type: String,\n      default: 'va'\n    }\n  },\n  components: {\n    validate\n  },\n  data () {\n    let checked = this.checked\n    if (checked !== undefined) {\n      this.$emit('input', checked)\n    } else {\n      checked = !!this.value\n    }\n\n    return {\n      currentChecked: checked\n    }\n  },\n  computed: {\n    objClass () {\n      let {prefixCls, currentChecked, disabled} = this\n      let klass = {}\n\n      klass[prefixCls + '-radio-span'] = true\n      klass[prefixCls + '-radio-checked'] = currentChecked\n      klass[prefixCls + '-radio-disabled'] = disabled\n\n      return klass\n    }\n  },\n  watch: {\n    value (val) {\n      this.currentChecked = val\n    },\n    checked (val) {\n      this.currentChecked = val\n    },\n    currentChecked (val) {\n      this.$emit('input', val)\n    }\n  },\n  created () {\n    this.$on('Va@radiogroupChange', (val) => {\n      // this.currentChecked = val.indexOf(this.label) > -1\n      this.currentChecked = val === this.label\n    })\n  },\n  methods: {\n    handleClick () {\n      if (this.currentChecked) return\n      this.currentChecked = true\n      this.dispatch('VaRadioGroup', 'Va@radioChange', this.label)\n      this.$emit('change', this.currentChecked)\n    }\n  }\n}\n</script>\n"]}]}