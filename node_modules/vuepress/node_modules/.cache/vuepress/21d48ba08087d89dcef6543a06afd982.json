{"remainingRequest":"/media/itsd/ITSD/Projects/wilfried/node_modules/vue-loader/lib/index.js??vue-loader-options!/media/itsd/ITSD/Projects/wilfried/node_modules/vue-atlas/src/Form/VaForm.vue?vue&type=script&lang=js&","dependencies":[{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/vue-atlas/src/Form/VaForm.vue","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/babel-loader/lib/index.js","mtime":1526583314000},{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n\nimport type from '../utils/type'\nimport events from '../utils/events'\n\nexport default {\n  name: 'VaForm',\n  mixins: [events],\n  props: {\n    type: {\n      type: String,\n      default: 'horizontal',\n      required: false,\n      validator (v) {\n        return [\n          'horizontal',\n          'inline',\n          'vertical'\n        ].includes(v)\n      },\n      note: 'The type of form to render. See documentation example.'\n    },\n    prefixCls: {\n      type: String,\n      default: 'va'\n    }\n  },\n  methods: {\n    noop () {\n    },\n    validateFields (cb) {\n      this.validate = true\n      this.$nextTick(() => {\n        if (type.isFunction(cb)) {\n          cb(this.result)\n        }\n      })\n    }\n  },\n  watch: {\n    validate (val) {\n      this.broadcast('VaValidate', 'Va@openValidate', val)\n      if (val) {\n        this.result = this._result\n      } else {\n        this.result = {results: {}, isvalid: true}\n      }\n    },\n    result (val) {\n      if (this.validate) {\n        this.$emit('change', val)\n      }\n    }\n  },\n  mounted () {\n    if (!this.validate) {\n      this.result = {results: {}, isvalid: true}\n    }\n    this.broadcast('VaValidate', 'Va@openValidate', this.validate)\n  },\n  computed: {\n    classObj () {\n      let {prefixCls, type} = this\n      let klass = {}\n\n      klass[prefixCls + '-form-horizontal'] = type === 'horizontal'\n      klass[prefixCls + '-form-inline'] = type === 'inline'\n      klass['clearfix'] = true\n\n      return klass\n    }\n  },\n  created () {\n    this.$on('openValidate', () => {\n      this.validate = true\n    })\n\n    this.$on('closeValidate', () => {\n      this.validate = false\n    })\n\n    this.$on('Va@validateChange', (val) => {\n      let name = val.name\n      let validateResult = Object.assign({}, this._result)\n\n      if (!validateResult.results) validateResult.results = {}\n      validateResult.results[name] = val.result\n\n      validateResult.isvalid = true\n\n      for (let i in validateResult.results) {\n        if (!validateResult.results[i]['isvalid']) {\n          validateResult.isvalid = false\n          break\n        }\n      }\n\n      this._result = validateResult\n\n      if (this.validate) {\n        this.result = this._result\n        this.$emit('validateChange', this.result)\n      }\n    })\n  },\n\n  data () {\n    return {\n      // eslint-disable-next-line\n      _result: {results: {}, isvalid: true},\n      result: {results: {}, isvalid: true},\n      validate: false\n    }\n  }\n}\n",{"version":3,"sources":["VaForm.vue"],"names":[],"mappings":";;;;;;;AAOA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"VaForm.vue","sourceRoot":"node_modules/vue-atlas/src/Form","sourcesContent":["<template>\n  <form :class=\"classObj\" @submit.prevent=\"noop\">\n    <slot />\n  </form>\n</template>\n\n<script>\nimport type from '../utils/type'\nimport events from '../utils/events'\n\nexport default {\n  name: 'VaForm',\n  mixins: [events],\n  props: {\n    type: {\n      type: String,\n      default: 'horizontal',\n      required: false,\n      validator (v) {\n        return [\n          'horizontal',\n          'inline',\n          'vertical'\n        ].includes(v)\n      },\n      note: 'The type of form to render. See documentation example.'\n    },\n    prefixCls: {\n      type: String,\n      default: 'va'\n    }\n  },\n  methods: {\n    noop () {\n    },\n    validateFields (cb) {\n      this.validate = true\n      this.$nextTick(() => {\n        if (type.isFunction(cb)) {\n          cb(this.result)\n        }\n      })\n    }\n  },\n  watch: {\n    validate (val) {\n      this.broadcast('VaValidate', 'Va@openValidate', val)\n      if (val) {\n        this.result = this._result\n      } else {\n        this.result = {results: {}, isvalid: true}\n      }\n    },\n    result (val) {\n      if (this.validate) {\n        this.$emit('change', val)\n      }\n    }\n  },\n  mounted () {\n    if (!this.validate) {\n      this.result = {results: {}, isvalid: true}\n    }\n    this.broadcast('VaValidate', 'Va@openValidate', this.validate)\n  },\n  computed: {\n    classObj () {\n      let {prefixCls, type} = this\n      let klass = {}\n\n      klass[prefixCls + '-form-horizontal'] = type === 'horizontal'\n      klass[prefixCls + '-form-inline'] = type === 'inline'\n      klass['clearfix'] = true\n\n      return klass\n    }\n  },\n  created () {\n    this.$on('openValidate', () => {\n      this.validate = true\n    })\n\n    this.$on('closeValidate', () => {\n      this.validate = false\n    })\n\n    this.$on('Va@validateChange', (val) => {\n      let name = val.name\n      let validateResult = Object.assign({}, this._result)\n\n      if (!validateResult.results) validateResult.results = {}\n      validateResult.results[name] = val.result\n\n      validateResult.isvalid = true\n\n      for (let i in validateResult.results) {\n        if (!validateResult.results[i]['isvalid']) {\n          validateResult.isvalid = false\n          break\n        }\n      }\n\n      this._result = validateResult\n\n      if (this.validate) {\n        this.result = this._result\n        this.$emit('validateChange', this.result)\n      }\n    })\n  },\n\n  data () {\n    return {\n      // eslint-disable-next-line\n      _result: {results: {}, isvalid: true},\n      result: {results: {}, isvalid: true},\n      validate: false\n    }\n  }\n}\n</script>\n"]}]}