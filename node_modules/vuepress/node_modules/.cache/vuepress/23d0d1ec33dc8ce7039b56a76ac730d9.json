{"remainingRequest":"/media/itsd/ITSD/Projects/wilfried/node_modules/vue-loader/lib/index.js??vue-loader-options!/media/itsd/ITSD/Projects/wilfried/node_modules/vue-atlas/src/Form/VaFormItem.vue?vue&type=script&lang=js&","dependencies":[{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/vue-atlas/src/Form/VaFormItem.vue","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/babel-loader/lib/index.js","mtime":1526583314000},{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  name: 'VaFormItem',\n  props: {\n    label: {\n      type: String\n    },\n    labelCol: {\n      type: Number,\n      default: 0,\n      required: false,\n      note: 'Used in horizontal and vertical type forms to allow you to assign a number of columns to the item label.'\n    },\n    wrapCol: {\n      type: Number\n    },\n    formCol: {\n      type: Number\n    },\n    need: {\n      type: Boolean,\n      default: false,\n      required: false,\n      note: 'When true, all this does is render a red asterisk next to the label. This has nothing to do with validation.'\n    },\n    prefixCls: {\n      type: String,\n      default: 'va'\n    }\n  },\n  computed: {\n    inline () {\n      return this.$parent.type === 'inline'\n    },\n    label_col () {\n      let defaultCol = this.inline ? 0 : 2\n      return this.labelCol ? this.labelCol : defaultCol\n    },\n    col () {\n      if (this.inline && !this.formCol) {\n        return 0\n      }\n\n      if (this.formCol) {\n        return this.formCol\n      }\n\n      let wrapCol = this.wrapCol ? this.wrapCol : 12\n      return wrapCol - this.label_col\n    },\n    classObj () {\n      let {prefixCls, wrapCol} = this\n      let klass = {}\n      let defaultCol = this.inline ? (wrapCol || 0) : 12\n\n      klass['clearfix'] = true\n      klass[prefixCls + '-form-group'] = true\n      klass[prefixCls + '-col-sm-' + defaultCol] = true\n\n      return klass\n    }\n  }\n}\n",{"version":3,"sources":["VaFormItem.vue"],"names":[],"mappings":";;;;;;;;;;;;;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"VaFormItem.vue","sourceRoot":"node_modules/vue-atlas/src/Form","sourcesContent":["<template>\n  <div :class=\"classObj\">\n    <label :class=\"`${prefixCls}-col-sm-${label_col} ${prefixCls}-control-label`\">\n      {{label}}\n      <em :class=\"`${prefixCls}-form-need`\" v-if=\"need\">*</em>\n    </label>\n    <div :class=\"`${prefixCls}-col-sm-${col} inline`\">\n      <slot />\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'VaFormItem',\n  props: {\n    label: {\n      type: String\n    },\n    labelCol: {\n      type: Number,\n      default: 0,\n      required: false,\n      note: 'Used in horizontal and vertical type forms to allow you to assign a number of columns to the item label.'\n    },\n    wrapCol: {\n      type: Number\n    },\n    formCol: {\n      type: Number\n    },\n    need: {\n      type: Boolean,\n      default: false,\n      required: false,\n      note: 'When true, all this does is render a red asterisk next to the label. This has nothing to do with validation.'\n    },\n    prefixCls: {\n      type: String,\n      default: 'va'\n    }\n  },\n  computed: {\n    inline () {\n      return this.$parent.type === 'inline'\n    },\n    label_col () {\n      let defaultCol = this.inline ? 0 : 2\n      return this.labelCol ? this.labelCol : defaultCol\n    },\n    col () {\n      if (this.inline && !this.formCol) {\n        return 0\n      }\n\n      if (this.formCol) {\n        return this.formCol\n      }\n\n      let wrapCol = this.wrapCol ? this.wrapCol : 12\n      return wrapCol - this.label_col\n    },\n    classObj () {\n      let {prefixCls, wrapCol} = this\n      let klass = {}\n      let defaultCol = this.inline ? (wrapCol || 0) : 12\n\n      klass['clearfix'] = true\n      klass[prefixCls + '-form-group'] = true\n      klass[prefixCls + '-col-sm-' + defaultCol] = true\n\n      return klass\n    }\n  }\n}\n</script>\n"]}]}