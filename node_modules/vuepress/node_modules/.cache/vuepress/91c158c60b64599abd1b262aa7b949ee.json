{"remainingRequest":"/media/itsd/ITSD/Projects/wilfried/node_modules/vue-loader/lib/index.js??vue-loader-options!/media/itsd/ITSD/Projects/wilfried/node_modules/vue-atlas/src/Affix/VaAffix.vue?vue&type=script&lang=js&","dependencies":[{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/vue-atlas/src/Affix/VaAffix.vue","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/babel-loader/lib/index.js","mtime":1526583314000},{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n\n\nfunction getScroll (w, top) {\n  let ret = w['page' + (top ? 'Y' : 'X') + 'Offset']\n  let method = 'scroll' + (top ? 'Top' : 'Left')\n  if (typeof ret !== 'number') {\n    let d = w.document\n    // ie 6,7,8 standard mode\n    ret = d.documentElement[method]\n\n    if (typeof ret !== 'number') {\n      // quirks mode\n      ret = d.body[method]\n    }\n  }\n  return ret\n}\n\nfunction getOffset (element) {\n  let rect = element.getBoundingClientRect()\n  let body = document.body\n  let clientTop = element.clientTop || body.clientTop || 0\n  let clientLeft = element.clientLeft || body.clientLeft || 0\n  let scrollTop = getScroll(window, true)\n  let scrollLeft = getScroll(window)\n\n  return {\n    top: rect.top + scrollTop - clientTop,\n    left: rect.left + scrollLeft - clientLeft\n  }\n}\n\nexport default {\n  name: 'VaAffix',\n  props: {\n    offset: {\n      type: [Number, String],\n      default: 0,\n      required: false,\n      note: 'Vertical offset distance to affix to'\n    },\n    prefixCls: {\n      type: String,\n      default: 'va'\n    }\n  },\n  data () {\n    return {\n      affix: false,\n      affixStyle: {}\n    }\n  },\n  computed: {\n    classObj () {\n      let {prefixCls, affix} = this\n      let klass = {}\n\n      klass[prefixCls + '-affix'] = affix\n\n      return klass\n    }\n  },\n  mounted () {\n    window.addEventListener('scroll', this._handleScroll, false)\n    window.addEventListener('resize', this._handleScroll, false)\n  },\n  beforeDestroy () {\n    window.removeEventListener('scroll', this._handleScroll, false)\n    window.removeEventListener('resize', this._handleScroll, false)\n  },\n  methods: {\n    _handleScroll () {\n      const affix = this.affix\n      const scrollTop = getScroll(window, true)\n      const elemOffset = getOffset(this.$el)\n\n      if (!affix && (elemOffset.top - this.offset) < scrollTop) {\n        this.affix = true\n        this.affixStyle = {\n          top: this.offset + 'px',\n          left: elemOffset.left + 'px',\n          width: this.$el.offsetWidth + 'px'\n        }\n      } else if (affix && (elemOffset.top - this.offset) > scrollTop) {\n        this.affix = false\n        this.affixStyle = null\n      }\n    }\n  }\n}\n",{"version":3,"sources":["VaAffix.vue"],"names":[],"mappings":";;;;;;;;;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"VaAffix.vue","sourceRoot":"node_modules/vue-atlas/src/Affix","sourcesContent":["<template>\n  <div>\n    <div :style=\"affixStyle\" :class=\"classObj\">\n      <slot/>\n    </div>\n  </div>\n</template>\n\n<script>\n\nfunction getScroll (w, top) {\n  let ret = w['page' + (top ? 'Y' : 'X') + 'Offset']\n  let method = 'scroll' + (top ? 'Top' : 'Left')\n  if (typeof ret !== 'number') {\n    let d = w.document\n    // ie 6,7,8 standard mode\n    ret = d.documentElement[method]\n\n    if (typeof ret !== 'number') {\n      // quirks mode\n      ret = d.body[method]\n    }\n  }\n  return ret\n}\n\nfunction getOffset (element) {\n  let rect = element.getBoundingClientRect()\n  let body = document.body\n  let clientTop = element.clientTop || body.clientTop || 0\n  let clientLeft = element.clientLeft || body.clientLeft || 0\n  let scrollTop = getScroll(window, true)\n  let scrollLeft = getScroll(window)\n\n  return {\n    top: rect.top + scrollTop - clientTop,\n    left: rect.left + scrollLeft - clientLeft\n  }\n}\n\nexport default {\n  name: 'VaAffix',\n  props: {\n    offset: {\n      type: [Number, String],\n      default: 0,\n      required: false,\n      note: 'Vertical offset distance to affix to'\n    },\n    prefixCls: {\n      type: String,\n      default: 'va'\n    }\n  },\n  data () {\n    return {\n      affix: false,\n      affixStyle: {}\n    }\n  },\n  computed: {\n    classObj () {\n      let {prefixCls, affix} = this\n      let klass = {}\n\n      klass[prefixCls + '-affix'] = affix\n\n      return klass\n    }\n  },\n  mounted () {\n    window.addEventListener('scroll', this._handleScroll, false)\n    window.addEventListener('resize', this._handleScroll, false)\n  },\n  beforeDestroy () {\n    window.removeEventListener('scroll', this._handleScroll, false)\n    window.removeEventListener('resize', this._handleScroll, false)\n  },\n  methods: {\n    _handleScroll () {\n      const affix = this.affix\n      const scrollTop = getScroll(window, true)\n      const elemOffset = getOffset(this.$el)\n\n      if (!affix && (elemOffset.top - this.offset) < scrollTop) {\n        this.affix = true\n        this.affixStyle = {\n          top: this.offset + 'px',\n          left: elemOffset.left + 'px',\n          width: this.$el.offsetWidth + 'px'\n        }\n      } else if (affix && (elemOffset.top - this.offset) > scrollTop) {\n        this.affix = false\n        this.affixStyle = null\n      }\n    }\n  }\n}\n</script>\n"]}]}