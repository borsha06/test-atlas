{"remainingRequest":"/media/itsd/ITSD/Projects/test/node_modules/babel-loader/lib/index.js??ref--3-1!/media/itsd/ITSD/Projects/test/node_modules/cache-loader/dist/cjs.js??ref--0-0!/media/itsd/ITSD/Projects/test/node_modules/vue-loader/lib/index.js??vue-loader-options!/media/itsd/ITSD/Projects/test/node_modules/vue-atlas/src/Modal/VaModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"/media/itsd/ITSD/Projects/test/node_modules/vue-atlas/src/Modal/VaModal.vue","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/test/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/test/node_modules/babel-loader/lib/index.js","mtime":1526583314000},{"path":"/media/itsd/ITSD/Projects/test/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/test/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport getScrollBarWidth from '../utils/getScrollBarWidth';\nimport EventListener from '../utils/EventListener';\nimport VaButton from '../Button/VaButton';\nimport element from '../utils/element';\nimport localeMixin from '../Mixin/localeMixin';\nexport default {\n  name: 'VaModal',\n  mixins: [localeMixin('VaModal')],\n  props: {\n    title: {\n      type: String,\n      default: '',\n      required: false,\n      note: 'The title of the modal'\n    },\n    show: {\n      type: Boolean,\n      default: false,\n      required: false,\n      note: 'When false, the modal will not be shown'\n    },\n    width: {\n      type: Number,\n      default: 600,\n      required: false,\n      note: 'The width of the modal.'\n    },\n    effect: {\n      type: String,\n      default: 'fade-up',\n      required: false,\n      note: 'The css effect to apply to the modal.'\n    },\n    loading: {\n      type: Boolean,\n      default: false,\n      note: 'When true, modal shows its loading state/'\n    },\n    backdrop: {\n      type: Boolean,\n      default: true,\n      required: false\n    },\n    backdropClickable: {\n      type: Boolean,\n      default: true,\n      required: false,\n      note: 'When true, clicking the backdrop in a standard or custom modal will close the modal. This prop has no effect on alert or confirm modals.'\n    },\n    prefixCls: {\n      type: String,\n      default: 'va'\n    }\n  },\n  components: {\n    VaButton: VaButton\n  },\n  mounted: function mounted() {\n    var $body = document.querySelector('body');\n    $body.appendChild(this.$refs.modal);\n  },\n  beforeDestroy: function beforeDestroy() {\n    var $body = document.querySelector('body');\n    $body.removeChild(this.$refs.modal);\n  },\n  computed: {\n    classObj: function classObj() {\n      var prefixCls = this.prefixCls,\n          effect = this.effect;\n      var klass = {};\n      klass[prefixCls + '-modal'] = true;\n      klass[prefixCls + '-modal-' + effect] = true;\n      return klass;\n    },\n    styleObj: function styleObj() {\n      var backdrop = this.backdrop,\n          numberOfParentModals = this.numberOfParentModals;\n      var style = {};\n\n      if (!backdrop) {\n        style['background'] = 'none !important';\n      }\n\n      var topMargin = parseInt(numberOfParentModals) * 20;\n      style['padding-top'] = topMargin + 'px';\n      return style;\n    },\n    modalIsLoading: function modalIsLoading() {\n      return this.loading;\n    }\n  },\n  data: function data() {\n    var show = this.show;\n    return {\n      isShow: show,\n      focused: false,\n      numberOfParentModals: 0\n    };\n  },\n  watch: {\n    isShow: function isShow(val) {\n      var _this = this;\n\n      if (val) {\n        this.$emit('show', {\n          type: 'show'\n        });\n        var x = document.getElementsByClassName(this.prefixCls + '-modal-in');\n        this.numberOfParentModals = x.length;\n      } else {\n        this.$emit('hide', {\n          type: 'hide'\n        });\n      }\n\n      var el = this.$el;\n      var body = document.body;\n      var scrollBarWidth = getScrollBarWidth();\n\n      if (val) {\n        el.querySelector('.' + this.prefixCls + '-modal-content').focus();\n        el.style.display = 'block'; // this timeout is required for opacity transition\n\n        setTimeout(function () {\n          element.addClass(el, _this.prefixCls + '-modal-in');\n        }, 20);\n        element.addClass(body, this.prefixCls + '-modal-open');\n\n        if (!scrollBarWidth) {\n          element.addClass(body, this.prefixCls + '-modal-hide-y');\n        }\n\n        if (this.backdropClickable) {\n          this._blurModalContentEvent = EventListener.listen(this.$el, 'click', function (e) {\n            if (e.target === el) _this.isShow = false;\n          });\n        }\n      } else {\n        if (this._blurModalContentEvent) this._blurModalContentEvent.remove();\n        element.removeClass(el, this.prefixCls + '-modal-in');\n        element.addClass(el, this.prefixCls + '-modal-out');\n        setTimeout(function () {\n          el.style.display = 'none';\n          element.removeClass(body, _this.prefixCls + '-modal-open');\n          element.removeClass(body, _this.prefixCls + '-modal-hide-y');\n          element.removeClass(el, _this.prefixCls + '-modal-out');\n          body.style.paddingRight = '0';\n\n          _this.$emit('closed', {\n            type: 'closed'\n          });\n        }, 300);\n      }\n    }\n  },\n  methods: {\n    close: function close() {\n      this.isShow = false;\n    },\n    open: function open() {\n      this.isShow = true;\n    },\n    confirm: function confirm() {\n      this.$emit('confirm', {\n        type: 'confirm'\n      });\n    }\n  }\n};",{"version":3,"sources":["VaModal.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div :class=\"classObj\" ref=\"modal\" :style=\"styleObj\">\n    <div :class=\"`${prefixCls}-modal-dialog`\" :style=\"{'width': width + 'px'}\">\n\n      <div v-if=\"modalIsLoading\" :class=\"`${prefixCls}-modal-loading`\">\n        <va-loading size=\"md\" color=\"#888\"></va-loading>\n      </div>\n\n      <div v-else :class=\"`${prefixCls}-modal-content`\">\n\n        <slot name=\"header\">\n          <div :class=\"`${prefixCls}-modal-header`\">\n            <va-button type=\"subtle\" :class=\"`${prefixCls}-close`\" @click.native=\"close\">\n              <va-icon type=\"times\" style=\"solid\"></va-icon>\n            </va-button>\n            <div :class=\"`${prefixCls}-modal-title`\">{{title}}</div>\n          </div>\n        </slot>\n\n        <div :class=\"`${prefixCls}-modal-body`\">\n          <slot name=\"body\" />\n        </div>\n\n        <slot name=\"footer\">\n          <div :class=\"`${prefixCls}-modal-footer`\">\n            <va-button type=\"subtle\" @click.native=\"close\">{{getL('cancel')}}</va-button>\n            <va-button type=\"primary\" @click.native=\"confirm\" :focused=\"focused\">{{getL('confirm')}}</va-button>\n          </div>\n        </slot>\n\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport getScrollBarWidth from '../utils/getScrollBarWidth'\nimport EventListener from '../utils/EventListener'\nimport VaButton from '../Button/VaButton'\nimport element from '../utils/element'\nimport localeMixin from '../Mixin/localeMixin'\n\nexport default {\n  name: 'VaModal',\n  mixins: [localeMixin('VaModal')],\n  props: {\n    title: {\n      type: String,\n      default: '',\n      required: false,\n      note: 'The title of the modal'\n    },\n    show: {\n      type: Boolean,\n      default: false,\n      required: false,\n      note: 'When false, the modal will not be shown'\n    },\n    width: {\n      type: Number,\n      default: 600,\n      required: false,\n      note: 'The width of the modal.'\n    },\n    effect: {\n      type: String,\n      default: 'fade-up',\n      required: false,\n      note: 'The css effect to apply to the modal.'\n    },\n    loading: {\n      type: Boolean,\n      default: false,\n      note: 'When true, modal shows its loading state/'\n    },\n    backdrop: {\n      type: Boolean,\n      default: true,\n      required: false\n    },\n    backdropClickable: {\n      type: Boolean,\n      default: true,\n      required: false,\n      note: 'When true, clicking the backdrop in a standard or custom modal will close the modal. This prop has no effect on alert or confirm modals.'\n    },\n    prefixCls: {\n      type: String,\n      default: 'va'\n    }\n  },\n  components: {\n    VaButton\n  },\n  mounted () {\n    const $body = document.querySelector('body')\n    $body.appendChild(this.$refs.modal)\n  },\n  beforeDestroy () {\n    const $body = document.querySelector('body')\n    $body.removeChild(this.$refs.modal)\n  },\n  computed: {\n    classObj () {\n      let {prefixCls, effect} = this\n      let klass = {}\n\n      klass[prefixCls + '-modal'] = true\n      klass[prefixCls + '-modal-' + effect] = true\n\n      return klass\n    },\n    styleObj () {\n      let {backdrop, numberOfParentModals} = this\n      let style = {}\n\n      if (!backdrop) {\n        style['background'] = 'none !important'\n      }\n\n      let topMargin = parseInt(numberOfParentModals) * 20\n      style['padding-top'] = topMargin + 'px'\n\n      return style\n    },\n    modalIsLoading () {\n      return this.loading\n    }\n  },\n  data () {\n    let show = this.show\n    return {\n      isShow: show,\n      focused: false,\n      numberOfParentModals: 0\n    }\n  },\n  watch: {\n    isShow (val) {\n      if (val) {\n        this.$emit('show', { type: 'show' })\n\n        let x = document.getElementsByClassName(this.prefixCls + '-modal-in')\n        this.numberOfParentModals = x.length\n      } else {\n        this.$emit('hide', { type: 'hide' })\n      }\n\n      const el = this.$el\n      const body = document.body\n      const scrollBarWidth = getScrollBarWidth()\n      if (val) {\n        el.querySelector('.' + this.prefixCls + '-modal-content').focus()\n        el.style.display = 'block'\n        // this timeout is required for opacity transition\n        setTimeout(() => { element.addClass(el, this.prefixCls + '-modal-in') }, 20)\n        element.addClass(body, this.prefixCls + '-modal-open')\n        if (!scrollBarWidth) {\n          element.addClass(body, this.prefixCls + '-modal-hide-y')\n        }\n        if (this.backdropClickable) {\n          this._blurModalContentEvent = EventListener.listen(this.$el, 'click', (e) => {\n            if (e.target === el) this.isShow = false\n          })\n        }\n      } else {\n        if (this._blurModalContentEvent) this._blurModalContentEvent.remove()\n        element.removeClass(el, this.prefixCls + '-modal-in')\n        element.addClass(el, this.prefixCls + '-modal-out')\n        setTimeout(() => {\n          el.style.display = 'none'\n          element.removeClass(body, this.prefixCls + '-modal-open')\n          element.removeClass(body, this.prefixCls + '-modal-hide-y')\n          element.removeClass(el, this.prefixCls + '-modal-out')\n          body.style.paddingRight = '0'\n          this.$emit('closed', { type: 'closed' })\n        }, 300)\n      }\n    }\n  },\n  methods: {\n    close () {\n      this.isShow = false\n    },\n    open () {\n      this.isShow = true\n    },\n    confirm () {\n      this.$emit('confirm', { type: 'confirm' })\n    }\n  }\n}\n</script>\n"],"sourceRoot":"node_modules/vue-atlas/src/Modal"}]}