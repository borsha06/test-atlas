{"remainingRequest":"/media/itsd/ITSD/Projects/test/node_modules/vue-loader/lib/index.js??vue-loader-options!/media/itsd/ITSD/Projects/test/node_modules/vue-atlas/src/Aside/VaAside.vue?vue&type=script&lang=js&","dependencies":[{"path":"/media/itsd/ITSD/Projects/test/node_modules/vue-atlas/src/Aside/VaAside.vue","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/test/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/test/node_modules/babel-loader/lib/index.js","mtime":1526583314000},{"path":"/media/itsd/ITSD/Projects/test/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/test/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport EventListener from '../utils/EventListener'\n// import getScrollBarWidth from '../utils/getScrollBarWidth'\nimport element from '../utils/element'\n\nexport default {\n  name: 'VaAside',\n  props: {\n    placement: {\n      type: String,\n      default: 'left',\n      required: false,\n      note: 'What side of the window to appear at.'\n    },\n    title: {\n      type: String,\n      default: '',\n      required: false,\n      note: 'If header is true, this will be the inside of it.'\n    },\n    header: {\n      type: Boolean,\n      default: false,\n      required: false,\n      note: 'If true, header will be shown.'\n    },\n    width: {\n      type: Number,\n      default: 304,\n      required: false,\n      note: 'Width of the aside element.'\n    },\n    prefixCls: {\n      type: String,\n      default: 'va',\n      required: false\n    }\n  },\n  data () {\n    return {\n      show: false\n    }\n  },\n  mounted () {\n    const $body = document.querySelector('body')\n    $body.appendChild(this.$refs.aside)\n  },\n  beforeDestroy () {\n    const $body = document.querySelector('body')\n    $body.removeChild(this.$refs.aside)\n    this.performClose()\n  },\n  computed: {\n    classObj () {\n      let {prefixCls, placement} = this\n      let klass = {}\n\n      klass[prefixCls + '-aside'] = true\n      klass[prefixCls + '-aside-left'] = placement === 'left'\n      klass[prefixCls + '-aside-right'] = placement === 'right'\n\n      return klass\n    }\n  },\n  watch: {\n    show (val) {\n      let backdrop = document.createElement('div')\n      let prefixCls = this.prefixCls\n      const body = document.body\n      backdrop.className = prefixCls + '-aside-backdrop'\n      if (val) {\n        body.appendChild(backdrop)\n        element.addClass(body, prefixCls + '-modal-open')\n\n        // This timeout is included to allow for opacity transition.\n        setTimeout(() => {\n          backdrop.className += ' ' + prefixCls + '-aside-in'\n          this._clickEvent = EventListener.listen(backdrop, 'click', this.close)\n          this.$emit('show')\n        }, 20)\n      } else {\n        this.performClose()\n      }\n    }\n  },\n  methods: {\n    open () {\n      this.show = true\n    },\n    close () {\n      this.show = false\n    },\n    performClose () {\n      if (this._clickEvent) this._clickEvent.remove()\n\n      const body = document.body\n      let prefixCls = this.prefixCls\n      let backdrop = document.querySelector('.' + prefixCls + '-aside-backdrop')\n\n      if (backdrop) {\n        backdrop.className = prefixCls + '-aside-backdrop'\n        setTimeout(() => {\n          element.removeClass(body, prefixCls + '-modal-open')\n          body.removeChild(backdrop)\n        }, 300)\n        this.$emit('hide')\n      }\n    }\n  }\n}\n",{"version":3,"sources":["VaAside.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAufile":"VaAside.vue","sourceRoot":"node_modules/vue-atlas/src/Aside","sourcesContent":["<template>\n  <transition :name=\"(this.placement === 'left') ? 'slideleft' : 'slideright'\">\n    <div\n      ref=\"aside\"\n      :style=\"{width:width + 'px'}\"\n      :class=\"classObj\"\n      v-show=\"show\">\n      <div :class=\"`${prefixCls}-aside-dialog`\">\n        <div :class=\"`${prefixCls}-aside-content`\">\n          <div :class=\"`${prefixCls}-aside-header`\" v-if=\"header\">\n            <button type=\"button\" :class=\"`${prefixCls}-close`\" @click=\"close\"><span>&times;</span></button>\n            <div :class=\"`${prefixCls}-aside-title`\">{{title}}</div>\n          </div>\n          <div :class=\"`${prefixCls}-aside-body`\">\n            <slot/>\n          </div>\n        </div>\n      </div>\n    </div>\n  </transition>\n</template>\n\n<script>\nimport EventListener from '../utils/EventListener'\n// import getScrollBarWidth from '../utils/getScrollBarWidth'\nimport element from '../utils/element'\n\nexport default {\n  name: 'VaAside',\n  props: {\n    placement: {\n      type: String,\n      default: 'left',\n      required: false,\n      note: 'What side of the window to appear at.'\n    },\n    title: {\n      type: String,\n      default: '',\n      required: false,\n      note: 'If header is true, this will be the inside of it.'\n    },\n    header: {\n      type: Boolean,\n      default: false,\n      required: false,\n      note: 'If true, header will be shown.'\n    },\n    width: {\n      type: Number,\n      default: 304,\n      required: false,\n      note: 'Width of the aside element.'\n    },\n    prefixCls: {\n      type: String,\n      default: 'va',\n      required: false\n    }\n  },\n  data () {\n    return {\n      show: false\n    }\n  },\n  mounted () {\n    const $body = document.querySelector('body')\n    $body.appendChild(this.$refs.aside)\n  },\n  beforeDestroy () {\n    const $body = document.querySelector('body')\n    $body.removeChild(this.$refs.aside)\n    this.performClose()\n  },\n  computed: {\n    classObj () {\n      let {prefixCls, placement} = this\n      let klass = {}\n\n      klass[prefixCls + '-aside'] = true\n      klass[prefixCls + '-aside-left'] = placement === 'left'\n      klass[prefixCls + '-aside-right'] = placement === 'right'\n\n      return klass\n    }\n  },\n  watch: {\n    show (val) {\n      let backdrop = document.createElement('div')\n      let prefixCls = this.prefixCls\n      const body = document.body\n      backdrop.className = prefixCls + '-aside-backdrop'\n      if (val) {\n        body.appendChild(backdrop)\n        element.addClass(body, prefixCls + '-modal-open')\n\n        // This timeout is included to allow for opacity transition.\n        setTimeout(() => {\n          backdrop.className += ' ' + prefixCls + '-aside-in'\n          this._clickEvent = EventListener.listen(backdrop, 'click', this.close)\n          this.$emit('show')\n        }, 20)\n      } else {\n        this.performClose()\n      }\n    }\n  },\n  methods: {\n    open () {\n      this.show = true\n    },\n    close () {\n      this.show = false\n    },\n    performClose () {\n      if (this._clickEvent) this._clickEvent.remove()\n\n      const body = document.body\n      let prefixCls = this.prefixCls\n      let backdrop = document.querySelector('.' + prefixCls + '-aside-backdrop')\n\n      if (backdrop) {\n        backdrop.className = prefixCls + '-aside-backdrop'\n        setTimeout(() => {\n          element.removeClass(body, prefixCls + '-modal-open')\n          body.removeChild(backdrop)\n        }, 300)\n        this.$emit('hide')\n      }\n    }\n  }\n}\n</script>\n"]}]}