{"remainingRequest":"/media/itsd/ITSD/Projects/test/node_modules/vue-loader/lib/index.js??vue-loader-options!/media/itsd/ITSD/Projects/test/node_modules/vue-atlas/src/Button/VaButton.vue?vue&type=script&lang=js&","dependencies":[{"path":"/media/itsd/ITSD/Projects/test/node_modules/vue-atlas/src/Button/VaButton.vue","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/test/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/test/node_modules/babel-loader/lib/index.js","mtime":1526583314000},{"path":"/media/itsd/ITSD/Projects/test/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/test/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport EventListener from '../utils/EventListener'\n\nexport default {\n  name: 'VaButton',\n  props: {\n    type: {\n      type: String,\n      default: 'default',\n      required: false,\n      values: ['default', 'primary'],\n      note: 'The style of button to render.',\n      validator (v) {\n        return [\n          'default',\n          'primary',\n          'primary-light',\n          'primary-dark',\n          'paleblue',\n          'success',\n          'info',\n          'warning',\n          'danger',\n          'subtle',\n          'link',\n          'subtle-link',\n          'active',\n          'dark',\n          'darker',\n          'purple',\n          'purple-light',\n          'purple-dark'\n        ].includes(v)\n      }\n    },\n    size: {\n      type: String,\n      default: 'md',\n      required: false,\n      note: 'The size of button to render.',\n      validator (v) {\n        return [\n          'xs',\n          'sm',\n          'md',\n          'lg'\n        ].includes(v)\n      }\n    },\n    badge: {\n      type: [String, Number],\n      required: false,\n      note: 'Adds an VaBadge to the button.'\n    },\n    badgeMargin: {\n      type: String,\n      default: '0 5px 0 10px',\n      required: false,\n      note: 'Margin to be applied to the outside of the badge element. The default value works well for badges displayed to the right of the button text.'\n    },\n    active: {\n      type: Boolean,\n      default: false,\n      required: false,\n      note: 'If true, applies the .${prefixCls}-btn-active class.'\n    },\n    disabled: {\n      type: Boolean,\n      default: false,\n      required: false,\n      note: 'If true, applies the .${prefixCls}-btn-disabled class.'\n    },\n    block: {\n      type: Boolean,\n      default: false,\n      required: false,\n      note: 'If true, applies the .${prefixCls}-btn-block class.'\n    },\n    loading: {\n      type: Boolean,\n      default: false,\n      required: false,\n      note: 'If true, hides text and shows prefixCls-loading spinner.'\n    },\n    round: {\n      type: Boolean,\n      default: false,\n      required: false\n    },\n    focused: {\n      type: Boolean,\n      default: false,\n      required: false\n    },\n    prefixCls: {\n      type: String,\n      default: 'va'\n    }\n  },\n  data () {\n    let loading = this.loading\n    return {\n      loadingSpinner: loading,\n      isFocused: this.focused\n    }\n  },\n  computed: {\n    spinColor () {\n      let {type} = this\n      let white = '#FFFFFF'\n      let darker = '#45526B'\n\n      switch (type) {\n        case 'default':\n          return darker\n        case 'primary':\n          return white\n        case 'primary-light':\n          return white\n        case 'primary-dark':\n          return white\n        case 'success':\n          return white\n        case 'info':\n          return white\n        case 'warning':\n          return darker\n        case 'subtle':\n          return darker\n        case 'link':\n          return darker\n        case 'subtle-link':\n          return darker\n        case 'danger':\n          return white\n        case 'dark':\n          return white\n        case 'darker':\n          return white\n      }\n\n      return white\n    },\n    classObj () {\n      let {prefixCls, type, size, block, active, disabled, round, isFocused} = this\n      let klass = {}\n\n      klass[prefixCls + '-btn'] = true\n      klass[prefixCls + '-btn-block'] = block\n      klass[prefixCls + '-btn-active'] = active\n      klass[prefixCls + '-btn-disabled'] = disabled\n      size ? klass[prefixCls + '-btn-' + size] = true : ''\n      type ? klass[prefixCls + '-btn-' + type] = true : ''\n      klass[prefixCls + '-btn-round'] = round\n\n      klass[prefixCls + '-btn-' + type + '-focused'] = isFocused\n\n      return klass\n    },\n    fadeclassObj () {\n      let {prefixCls, loadingSpinner} = this\n      let klass = {}\n\n      klass[prefixCls + '-btn-text-fade'] = true\n      loadingSpinner ? klass[prefixCls + '-btn-text-fade-out'] = true : ''\n\n      return klass\n    }\n  },\n  watch: {\n    loading (val) {\n      if (val) {\n        let rect = this.$el.getBoundingClientRect()\n\n        this.$el.style.width = rect.width + 'px'\n        this.$el.style.height = rect.height + 'px'\n\n        this.loadingSpinner = true\n      } else {\n        this.$el.style.width = 'auto'\n        this.$el.style.height = 'auto'\n        this.$nextTick(() => {\n          this.loadingSpinner = false\n        })\n      }\n    }\n  },\n  methods: {\n    enterPressed () {\n      let el = this.$refs.btn\n      let evObj = document.createEvent('Events')\n      evObj.initEvent('click', true, false)\n      el.dispatchEvent(evObj)\n    }\n  },\n  mounted () {\n    this.$nextTick(() => {\n      let el = this.$el\n\n      this._clickEvent = EventListener.listen(window, 'click', (e) => {\n        if (!el.contains(e.target)) {\n          this.isFocused = false\n        }\n      })\n    })\n  },\n  beforeDestroy () {\n    if (this._clickEvent) this._clickEvent.remove()\n  }\n}\n",{"version":3,"sources":["VaButton.vue"],"names":[],"mappings":";;;;;;;;;;;AAWA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"VaButton.vue","sourceRoot":"node_modules/vue-atlas/src/Button","sourcesContent":["<template>\n  <a :class=\"classObj\" ref=\"btn\" tabindex=\"0\" v-on:keyup.enter=\"enterPressed\">\n    <div :class=\"fadeclassObj\">\n      <slot />\n      <va-badge v-if=\"badge\" :margin=\"badgeMargin\">{{badge}}</va-badge>\n    </div>\n    <va-loading v-if=\"loadingSpinner\" :size=\"size\" :color=\"spinColor\" />\n  </a>\n</template>\n\n<script>\nimport EventListener from '../utils/EventListener'\n\nexport default {\n  name: 'VaButton',\n  props: {\n    type: {\n      type: String,\n      default: 'default',\n      required: false,\n      values: ['default', 'primary'],\n      note: 'The style of button to render.',\n      validator (v) {\n        return [\n          'default',\n          'primary',\n          'primary-light',\n          'primary-dark',\n          'paleblue',\n          'success',\n          'info',\n          'warning',\n          'danger',\n          'subtle',\n          'link',\n          'subtle-link',\n          'active',\n          'dark',\n          'darker',\n          'purple',\n          'purple-light',\n          'purple-dark'\n        ].includes(v)\n      }\n    },\n    size: {\n      type: String,\n      default: 'md',\n      required: false,\n      note: 'The size of button to render.',\n      validator (v) {\n        return [\n          'xs',\n          'sm',\n          'md',\n          'lg'\n        ].includes(v)\n      }\n    },\n    badge: {\n      type: [String, Number],\n      required: false,\n      note: 'Adds an VaBadge to the button.'\n    },\n    badgeMargin: {\n      type: String,\n      default: '0 5px 0 10px',\n      required: false,\n      note: 'Margin to be applied to the outside of the badge element. The default value works well for badges displayed to the right of the button text.'\n    },\n    active: {\n      type: Boolean,\n      default: false,\n      required: false,\n      note: 'If true, applies the .${prefixCls}-btn-active class.'\n    },\n    disabled: {\n      type: Boolean,\n      default: false,\n      required: false,\n      note: 'If true, applies the .${prefixCls}-btn-disabled class.'\n    },\n    block: {\n      type: Boolean,\n      default: false,\n      required: false,\n      note: 'If true, applies the .${prefixCls}-btn-block class.'\n    },\n    loading: {\n      type: Boolean,\n      default: false,\n      required: false,\n      note: 'If true, hides text and shows prefixCls-loading spinner.'\n    },\n    round: {\n      type: Boolean,\n      default: false,\n      required: false\n    },\n    focused: {\n      type: Boolean,\n      default: false,\n      required: false\n    },\n    prefixCls: {\n      type: String,\n      default: 'va'\n    }\n  },\n  data () {\n    let loading = this.loading\n    return {\n      loadingSpinner: loading,\n      isFocused: this.focused\n    }\n  },\n  computed: {\n    spinColor () {\n      let {type} = this\n      let white = '#FFFFFF'\n      let darker = '#45526B'\n\n      switch (type) {\n        case 'default':\n          return darker\n        case 'primary':\n          return white\n        case 'primary-light':\n          return white\n        case 'primary-dark':\n          return white\n        case 'success':\n          return white\n        case 'info':\n          return white\n        case 'warning':\n          return darker\n        case 'subtle':\n          return darker\n        case 'link':\n          return darker\n        case 'subtle-link':\n          return darker\n        case 'danger':\n          return white\n        case 'dark':\n          return white\n        case 'darker':\n          return white\n      }\n\n      return white\n    },\n    classObj () {\n      let {prefixCls, type, size, block, active, disabled, round, isFocused} = this\n      let klass = {}\n\n      klass[prefixCls + '-btn'] = true\n      klass[prefixCls + '-btn-block'] = block\n      klass[prefixCls + '-btn-active'] = active\n      klass[prefixCls + '-btn-disabled'] = disabled\n      size ? klass[prefixCls + '-btn-' + size] = true : ''\n      type ? klass[prefixCls + '-btn-' + type] = true : ''\n      klass[prefixCls + '-btn-round'] = round\n\n      klass[prefixCls + '-btn-' + type + '-focused'] = isFocused\n\n      return klass\n    },\n    fadeclassObj () {\n      let {prefixCls, loadingSpinner} = this\n      let klass = {}\n\n      klass[prefixCls + '-btn-text-fade'] = true\n      loadingSpinner ? klass[prefixCls + '-btn-text-fade-out'] = true : ''\n\n      return klass\n    }\n  },\n  watch: {\n    loading (val) {\n      if (val) {\n        let rect = this.$el.getBoundingClientRect()\n\n        this.$el.style.width = rect.width + 'px'\n        this.$el.style.height = rect.height + 'px'\n\n        this.loadingSpinner = true\n      } else {\n        this.$el.style.width = 'auto'\n        this.$el.style.height = 'auto'\n        this.$nextTick(() => {\n          this.loadingSpinner = false\n        })\n      }\n    }\n  },\n  methods: {\n    enterPressed () {\n      let el = this.$refs.btn\n      let evObj = document.createEvent('Events')\n      evObj.initEvent('click', true, false)\n      el.dispatchEvent(evObj)\n    }\n  },\n  mounted () {\n    this.$nextTick(() => {\n      let el = this.$el\n\n      this._clickEvent = EventListener.listen(window, 'click', (e) => {\n        if (!el.contains(e.target)) {\n          this.isFocused = false\n        }\n      })\n    })\n  },\n  beforeDestroy () {\n    if (this._clickEvent) this._clickEvent.remove()\n  }\n}\n</script>\n"]}]}