{"remainingRequest":"/media/itsd/ITSD/Projects/wilfried/node_modules/babel-loader/lib/index.js??ref--3-1!/media/itsd/ITSD/Projects/wilfried/node_modules/cache-loader/dist/cjs.js??ref--0-0!/media/itsd/ITSD/Projects/wilfried/node_modules/vue-loader/lib/index.js??vue-loader-options!/media/itsd/ITSD/Projects/wilfried/node_modules/vue-atlas/src/Dropdown/VaDropdown.vue?vue&type=script&lang=js&","dependencies":[{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/vue-atlas/src/Dropdown/VaDropdown.vue","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/babel-loader/lib/index.js","mtime":1526583314000},{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport EventListener from '../utils/EventListener';\nimport VaCollapseTransition from '../VaCollapseTransition';\nexport default {\n  name: 'VaDropdown',\n  props: {\n    show: {\n      type: Boolean,\n      default: false,\n      required: false,\n      note: 'If true, the dropdown content is visible.'\n    },\n    triggerEvent: {\n      type: String,\n      default: 'click',\n      required: false,\n      note: 'Trigger method. Can be either \\'click\\' or \\'hover\\'.'\n    },\n    clickClose: {\n      type: Boolean,\n      default: false,\n      required: false,\n      note: \"If true, require that the trigger element be clicked\\n            again in order to close the dropdown menu. Otherwise,\\n            clicking anywhere else in the window will close it.\"\n    },\n    effect: {\n      type: String,\n      default: 'fadeDown',\n      required: false,\n      note: 'The effect to use.'\n    },\n    prefixCls: {\n      type: String,\n      default: 'va'\n    }\n  },\n  data: function data() {\n    var show = this.show;\n    return {\n      isShow: show\n    };\n  },\n  methods: {\n    open: function open() {\n      this.isShow = true;\n      this.$emit('show');\n    },\n    close: function close() {\n      this.isShow = false;\n      this.$emit('hide');\n    },\n    toggle: function toggle() {\n      this.isShow ? this.close() : this.open();\n      this.$emit('toggle');\n    },\n    onFocus: function onFocus() {}\n  },\n  components: {\n    VaCollapseTransition: VaCollapseTransition\n  },\n  computed: {\n    classObj: function classObj() {\n      var prefixCls = this.prefixCls;\n      var klass = {};\n      klass[prefixCls + '-dropdown-selected'] = this.isShow;\n      return klass;\n    }\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    this.$nextTick(function () {\n      var el = _this.$el;\n      var trig = _this.$refs.trigger.children[0];\n\n      if (_this.triggerEvent === 'click') {\n        _this._clickEvent = EventListener.listen(trig, 'click', _this.toggle);\n        _this._closeEvent = EventListener.listen(window, 'click', function (e) {\n          if (!_this.clickClose && !el.contains(e.target)) {\n            _this.close();\n          }\n        });\n      } else if (_this.triggerEvent === 'hover') {\n        _this._mouseenterEvent = EventListener.listen(trig, 'mouseenter', function () {\n          _this.open();\n        });\n        _this._closeEvent = EventListener.listen(_this.$el, 'mouseleave', function () {\n          setTimeout(function () {\n            _this.close();\n          }, 500);\n        });\n      }\n    });\n  },\n  beforeDestroy: function beforeDestroy() {\n    if (this._closeEvent) this._closeEvent.remove();\n    if (this._clickEvent) this._clickEvent.remove();\n    if (this._mouseenterEvent) this._mouseenterEvent.remove();\n  }\n};",{"version":3,"sources":["VaDropdown.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAsBA,OAAA,aAAA,MAAA,wBAAA;AACA,OAAA,oBAAA,MAAA,yBAAA;AAEA,eAAA;AACA,QAAA,YADA;AAEA,SAAA;AACA,UAAA;AACA,YAAA,OADA;AAEA,eAAA,KAFA;AAGA,gBAAA,KAHA;AAIA,YAAA;AAJA,KADA;AAOA,kBAAA;AACA,YAAA,MADA;AAEA,eAAA,OAFA;AAGA,gBAAA,KAHA;AAIA,YAAA;AAJA,KAPA;AAaA,gBAAA;AACA,YAAA,OADA;AAEA,eAAA,KAFA;AAGA,gBAAA,KAHA;AAIA;AAJA,KAbA;AAqBA,YAAA;AACA,YAAA,MADA;AAEA,eAAA,UAFA;AAGA,gBAAA,KAHA;AAIA,YAAA;AAJA,KArBA;AA2BA,eAAA;AACA,YAAA,MADA;AAEA,eAAA;AAFA;AA3BA,GAFA;AAkCA,MAlCA,kBAkCA;AACA,QAAA,OAAA,KAAA,IAAA;AACA,WAAA;AACA,cAAA;AADA,KAAA;AAGA,GAvCA;AAwCA,WAAA;AACA,QADA,kBACA;AACA,WAAA,MAAA,GAAA,IAAA;AACA,WAAA,KAAA,CAAA,MAAA;AACA,KAJA;AAKA,SALA,mBAKA;AACA,WAAA,MAAA,GAAA,KAAA;AACA,WAAA,KAAA,CAAA,MAAA;AACA,KARA;AASA,UATA,oBASA;AACA,WAAA,MAAA,GAAA,KAAA,KAAA,EAAA,GAAA,KAAA,IAAA,EAAA;AACA,WAAA,KAAA,CAAA,QAAA;AACA,KAZA;AAaA,WAbA,qBAaA,CACA;AAdA,GAxCA;AAwDA,cAAA;AACA;AADA,GAxDA;AA2DA,YAAA;AACA,YADA,sBACA;AAAA,UACA,SADA,GACA,IADA,CACA,SADA;AAEA,UAAA,QAAA,EAAA;AAEA,YAAA,YAAA,oBAAA,IAAA,KAAA,MAAA;AAEA,aAAA,KAAA;AACA;AARA,GA3DA;AAqEA,SArEA,qBAqEA;AAAA;;AACA,SAAA,SAAA,CAAA,YAAA;AACA,UAAA,KAAA,MAAA,GAAA;AACA,UAAA,OAAA,MAAA,KAAA,CAAA,OAAA,CAAA,QAAA,CAAA,CAAA,CAAA;;AACA,UAAA,MAAA,YAAA,KAAA,OAAA,EAAA;AACA,cAAA,WAAA,GAAA,cAAA,MAAA,CAAA,IAAA,EAAA,OAAA,EAAA,MAAA,MAAA,CAAA;AACA,cAAA,WAAA,GAAA,cAAA,MAAA,CAAA,MAAA,EAAA,OAAA,EAAA,UAAA,CAAA,EAAA;AACA,cAAA,CAAA,MAAA,UAAA,IAAA,CAAA,GAAA,QAAA,CAAA,EAAA,MAAA,CAAA,EAAA;AACA,kBAAA,KAAA;AACA;AACA,SAJA,CAAA;AAKA,OAPA,MAOA,IAAA,MAAA,YAAA,KAAA,OAAA,EAAA;AACA,cAAA,gBAAA,GAAA,cAAA,MAAA,CAAA,IAAA,EAAA,YAAA,EAAA,YAAA;AACA,gBAAA,IAAA;AACA,SAFA,CAAA;AAGA,cAAA,WAAA,GAAA,cAAA,MAAA,CAAA,MAAA,GAAA,EAAA,YAAA,EAAA,YAAA;AACA,qBAAA,YAAA;AACA,kBAAA,KAAA;AACA,WAFA,EAEA,GAFA;AAGA,SAJA,CAAA;AAKA;AACA,KApBA;AAqBA,GA3FA;AA4FA,eA5FA,2BA4FA;AACA,QAAA,KAAA,WAAA,EAAA,KAAA,WAAA,CAAA,MAAA;AACA,QAAA,KAAA,WAAA,EAAA,KAAA,WAAA,CAAA,MAAA;AACA,QAAA,KAAA,gBAAA,EAAA,KAAA,gBAAA,CAAA,MAAA;AACA;AAhGA,CAAA","sourcesContent":["<template>\n  <div :class=\"[`${prefixCls}-dropdown-con`, classObj]\">\n    <span ref=\"trigger\" :focus=\"onFocus\">\n      <slot name=\"trigger\" />\n    </span>\n\n    <transition :name=\"effect\" v-if=\"effect != 'collapse'\">\n      <ul v-va-position=\"isShow\" :class=\"`${prefixCls}-dropdown-menu`\" v-show=\"isShow\">\n        <slot />\n      </ul>\n    </transition>\n\n    <va-collapse-transition v-if=\"effect=='collapse'\">\n      <ul :class=\"`${prefixCls}-dropdown-menu`\" v-show=\"isShow\">\n        <slot />\n      </ul>\n    </va-collapse-transition>\n\n  </div>\n</template>\n\n<script>\nimport EventListener from '../utils/EventListener'\nimport VaCollapseTransition from '../VaCollapseTransition'\n\nexport default {\n  name: 'VaDropdown',\n  props: {\n    show: {\n      type: Boolean,\n      default: false,\n      required: false,\n      note: 'If true, the dropdown content is visible.'\n    },\n    triggerEvent: {\n      type: String,\n      default: 'click',\n      required: false,\n      note: 'Trigger method. Can be either \\'click\\' or \\'hover\\'.'\n    },\n    clickClose: {\n      type: Boolean,\n      default: false,\n      required: false,\n      note: `If true, require that the trigger element be clicked\n            again in order to close the dropdown menu. Otherwise,\n            clicking anywhere else in the window will close it.`\n    },\n    effect: {\n      type: String,\n      default: 'fadeDown',\n      required: false,\n      note: 'The effect to use.'\n    },\n    prefixCls: {\n      type: String,\n      default: 'va'\n    }\n  },\n  data () {\n    let show = this.show\n    return {\n      isShow: show\n    }\n  },\n  methods: {\n    open () {\n      this.isShow = true\n      this.$emit('show')\n    },\n    close () {\n      this.isShow = false\n      this.$emit('hide')\n    },\n    toggle () {\n      this.isShow ? this.close() : this.open()\n      this.$emit('toggle')\n    },\n    onFocus () {\n    }\n  },\n  components: {\n    VaCollapseTransition\n  },\n  computed: {\n    classObj () {\n      let {prefixCls} = this\n      let klass = {}\n\n      klass[prefixCls + '-dropdown-selected'] = this.isShow\n\n      return klass\n    }\n  },\n  mounted () {\n    this.$nextTick(() => {\n      let el = this.$el\n      let trig = this.$refs.trigger.children[0]\n      if (this.triggerEvent === 'click') {\n        this._clickEvent = EventListener.listen(trig, 'click', this.toggle)\n        this._closeEvent = EventListener.listen(window, 'click', (e) => {\n          if (!this.clickClose && !el.contains(e.target)) {\n            this.close()\n          }\n        })\n      } else if (this.triggerEvent === 'hover') {\n        this._mouseenterEvent = EventListener.listen(trig, 'mouseenter', () => {\n          this.open()\n        })\n        this._closeEvent = EventListener.listen(this.$el, 'mouseleave', () => {\n          setTimeout(() => {\n            this.close()\n          }, 500)\n        })\n      }\n    })\n  },\n  beforeDestroy () {\n    if (this._closeEvent) this._closeEvent.remove()\n    if (this._clickEvent) this._clickEvent.remove()\n    if (this._mouseenterEvent) this._mouseenterEvent.remove()\n  }\n}\n</script>\n\n<style lang=\"scss\">\n</style>\n"],"sourceRoot":"node_modules/vue-atlas/src/Dropdown"}]}