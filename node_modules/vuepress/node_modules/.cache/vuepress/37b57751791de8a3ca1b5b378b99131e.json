{"remainingRequest":"/media/itsd/ITSD/Projects/test/node_modules/vue-loader/lib/index.js??vue-loader-options!/media/itsd/ITSD/Projects/test/node_modules/vue-atlas/src/Sidebar/VaMinibar.vue?vue&type=script&lang=js&","dependencies":[{"path":"/media/itsd/ITSD/Projects/test/node_modules/vue-atlas/src/Sidebar/VaMinibar.vue","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/test/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/test/node_modules/babel-loader/lib/index.js","mtime":1526583314000},{"path":"/media/itsd/ITSD/Projects/test/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/test/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport events from '../utils/events'\n\nexport default {\n  name: 'VaMinibar',\n  mixins: [events],\n  props: {\n    topItems: {\n      type: Array,\n      required: false\n    },\n    bottomItems: {\n      type: Array,\n      required: false\n    },\n    theme: {\n      type: String,\n      default: 'blue',\n      required: false,\n      validator (v) {\n        return [\n          'default',\n          'white',\n          'blue',\n          'dark',\n          'darker',\n          'purple'\n        ].includes(v)\n      }\n    },\n    prefixCls: {\n      type: String,\n      default: 'va'\n    }\n  },\n  data () {\n    let t = this.theme\n    return {\n      currentDesktopMinimumWidth: 0,\n      currentDesktopMargin: 0,\n      currentContentWidth: 0,\n      currentMinibarWidth: 0,\n      currentTopbarHeight: 0,\n      minibarPriority: false,\n      currentSidebarWidth: 0,\n      sidebarPriority: false,\n      currentWindowWidth: 0,\n      isReverse: false,\n      isMobile: false,\n      isSplit: false,\n      isRTL: false,\n      th: t\n    }\n  },\n  mounted () {\n    /**\n     * This needs to be wrapped in a short setTimeout to give\n     * LayoutManager time to call enableReceivers().\n     */\n    setTimeout(() => {\n      this.dispatch('VaLayoutManager', 'Va@configMinibarThemeChange', this.th)\n    }, 10)\n  },\n  created () {\n    this.$on('Va@minibarPresenceCheck', (val) => { this.dispatch('VaLayoutManager', 'Va@minibarPresenceReply', true) })\n    this.$on('Va@desktopMinimumWidthChange', (val) => { this.currentDesktopMinimumWidth = val })\n    this.$on('Va@desktopMarginChange', (val) => { this.currentDesktopMargin = val })\n    this.$on('Va@contentWidthChange', (val) => { this.currentContentWidth = val })\n    this.$on('Va@topbarHeightChange', (val) => { this.currentTopbarHeight = val })\n    this.$on('Va@minibarWidthChange', (val) => { this.currentMinibarWidth = val })\n    this.$on('Va@sidebarWidthChange', (val) => { this.currentSidebarWidth = val })\n    this.$on('Va@minibarPriorityChange', (val) => { this.minibarPriority = val })\n    this.$on('Va@sidebarPriorityChange', (val) => { this.sidebarPriority = val })\n    this.$on('Va@windowWidthChange', (val) => { this.currentWindowWidth = val })\n    this.$on('Va@minibarIsMobile', (val) => { this.isMobile = val })\n    this.$on('Va@reverseChange', (val) => { this.isReverse = val })\n    this.$on('Va@minibarThemeChange', (val) => { this.th = val })\n    this.$on('Va@splitChange', (val) => { this.isSplit = val })\n    this.$on('Va@rtlChange', (val) => { this.isRTL = val })\n  },\n  beforeDestroy () {\n    this.dispatch('VaLayoutManager', 'Va@minibarDisconnect', true)\n  },\n  computed: {\n    classObj () {\n      let {prefixCls, th} = this\n      let klass = {}\n\n      klass[prefixCls + '-minibar'] = true\n      klass[prefixCls + '-minibar--theme-' + th] = true\n\n      return klass\n    },\n    styleObj () {\n      let dmw = parseInt(this.currentDesktopMinimumWidth)\n      let dm = parseInt(this.currentDesktopMargin)\n      let mw = parseInt(this.currentMinibarWidth)\n      let th = parseInt(this.currentTopbarHeight)\n      let cw = parseInt(this.currentContentWidth)\n      let sw = parseInt(this.currentSidebarWidth)\n      let sp = this.sidebarPriority\n      let mp = this.minibarPriority\n      let reverse = this.isReverse\n      let mobile = this.isMobile\n      let split = this.isSplit\n      let rtl = this.isRTL\n      let style = {}\n\n      style['width'] = mw + 'px'\n      style['min-width'] = mw + 'px'\n\n      if (mp) {\n        style['top'] = '0px'\n      } else {\n        style['top'] = th + 'px'\n      }\n\n      style['bottom'] = '0px'\n\n      /**\n       * Adjust the margins if content width is smaller than\n       * desktop minimum width.\n       */\n      if (!mobile) {\n        if (cw < dmw) {\n          let x = dmw - cw\n          dm = dm - (x / 2)\n        }\n      } else {\n        dm = 0\n        dmw = 0\n      }\n\n      if (split) {\n        if (reverse) {\n          style['right'] = dm + 'px'\n        } else {\n          style['left'] = dm + 'px'\n        }\n      } else {\n        if (reverse) {\n          if (rtl) {\n            style['right'] = dm + 'px'\n          } else {\n            style['left'] = (dm + sw) + 'px'\n          }\n        } else {\n          if (rtl) {\n            style['right'] = (dm + sw) + 'px'\n          } else {\n            style['left'] = dm + 'px'\n          }\n        }\n      }\n\n      if (!mp && sp && !reverse && !split && !rtl) {\n        style['top'] = '0px'\n      }\n\n      if (rtl && !split && !reverse && mp) {\n        style['top'] = '0px'\n      }\n\n      if (rtl && !split && reverse && !mp && sp) {\n        style['top'] = '0px'\n      }\n\n      return style\n    }\n  }\n}\n",{"version":3,"sources":["VaMinibar.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAifile":"VaMinibar.vue","sourceRoot":"node_modules/vue-atlas/src/Sidebar","sourcesContent":["<template>\n  <div :class=\"classObj\" :style=\"styleObj\">\n\n    <div :class=\"`${prefixCls}-minibar-top`\">\n\n      <div v-for=\"(item, index) in topItems\" :key=\"index\">\n        <va-minibar-item v-if=\"item.method\" :tooltip=\"item.tooltip\" :brand=\"item.brand\" @click.native=\"item.method\">\n          <va-icon :type=\"item.icon\" :size=\"item.size\" :icon-style=\"item.iconStyle || 'solid'\"></va-icon>\n        </va-minibar-item>\n        <va-minibar-item v-else :brand=\"item.brand\" :tooltip=\"item.tooltip\">\n          <va-icon :type=\"item.icon\" :size=\"item.size\" :icon-style=\"item.iconStyle || 'solid'\"></va-icon>\n        </va-minibar-item>\n      </div>\n\n    </div>\n\n    <div :class=\"`${prefixCls}-minibar-bottom`\">\n\n      <div v-for=\"(item, index) in bottomItems\" :key=\"index\">\n        <va-minibar-item v-if=\"item.method\" @click.native=\"item.method\" :tooltip=\"item.tooltip\">\n          <va-icon :type=\"item.icon\" :size=\"item.size\" :icon-style=\"item.iconStyle || 'solid'\"></va-icon>\n        </va-minibar-item>\n        <va-minibar-item v-else :tooltip=\"item.tooltip\">\n          <va-icon :type=\"item.icon\" :size=\"item.size\" :icon-style=\"item.iconStyle || 'solid'\"></va-icon>\n        </va-minibar-item>\n      </div>\n\n    </div>\n\n  </div>\n</template>\n\n<script>\nimport events from '../utils/events'\n\nexport default {\n  name: 'VaMinibar',\n  mixins: [events],\n  props: {\n    topItems: {\n      type: Array,\n      required: false\n    },\n    bottomItems: {\n      type: Array,\n      required: false\n    },\n    theme: {\n      type: String,\n      default: 'blue',\n      required: false,\n      validator (v) {\n        return [\n          'default',\n          'white',\n          'blue',\n          'dark',\n          'darker',\n          'purple'\n        ].includes(v)\n      }\n    },\n    prefixCls: {\n      type: String,\n      default: 'va'\n    }\n  },\n  data () {\n    let t = this.theme\n    return {\n      currentDesktopMinimumWidth: 0,\n      currentDesktopMargin: 0,\n      currentContentWidth: 0,\n      currentMinibarWidth: 0,\n      currentTopbarHeight: 0,\n      minibarPriority: false,\n      currentSidebarWidth: 0,\n      sidebarPriority: false,\n      currentWindowWidth: 0,\n      isReverse: false,\n      isMobile: false,\n      isSplit: false,\n      isRTL: false,\n      th: t\n    }\n  },\n  mounted () {\n    /**\n     * This needs to be wrapped in a short setTimeout to give\n     * LayoutManager time to call enableReceivers().\n     */\n    setTimeout(() => {\n      this.dispatch('VaLayoutManager', 'Va@configMinibarThemeChange', this.th)\n    }, 10)\n  },\n  created () {\n    this.$on('Va@minibarPresenceCheck', (val) => { this.dispatch('VaLayoutManager', 'Va@minibarPresenceReply', true) })\n    this.$on('Va@desktopMinimumWidthChange', (val) => { this.currentDesktopMinimumWidth = val })\n    this.$on('Va@desktopMarginChange', (val) => { this.currentDesktopMargin = val })\n    this.$on('Va@contentWidthChange', (val) => { this.currentContentWidth = val })\n    this.$on('Va@topbarHeightChange', (val) => { this.currentTopbarHeight = val })\n    this.$on('Va@minibarWidthChange', (val) => { this.currentMinibarWidth = val })\n    this.$on('Va@sidebarWidthChange', (val) => { this.currentSidebarWidth = val })\n    this.$on('Va@minibarPriorityChange', (val) => { this.minibarPriority = val })\n    this.$on('Va@sidebarPriorityChange', (val) => { this.sidebarPriority = val })\n    this.$on('Va@windowWidthChange', (val) => { this.currentWindowWidth = val })\n    this.$on('Va@minibarIsMobile', (val) => { this.isMobile = val })\n    this.$on('Va@reverseChange', (val) => { this.isReverse = val })\n    this.$on('Va@minibarThemeChange', (val) => { this.th = val })\n    this.$on('Va@splitChange', (val) => { this.isSplit = val })\n    this.$on('Va@rtlChange', (val) => { this.isRTL = val })\n  },\n  beforeDestroy () {\n    this.dispatch('VaLayoutManager', 'Va@minibarDisconnect', true)\n  },\n  computed: {\n    classObj () {\n      let {prefixCls, th} = this\n      let klass = {}\n\n      klass[prefixCls + '-minibar'] = true\n      klass[prefixCls + '-minibar--theme-' + th] = true\n\n      return klass\n    },\n    styleObj () {\n      let dmw = parseInt(this.currentDesktopMinimumWidth)\n      let dm = parseInt(this.currentDesktopMargin)\n      let mw = parseInt(this.currentMinibarWidth)\n      let th = parseInt(this.currentTopbarHeight)\n      let cw = parseInt(this.currentContentWidth)\n      let sw = parseInt(this.currentSidebarWidth)\n      let sp = this.sidebarPriority\n      let mp = this.minibarPriority\n      let reverse = this.isReverse\n      let mobile = this.isMobile\n      let split = this.isSplit\n      let rtl = this.isRTL\n      let style = {}\n\n      style['width'] = mw + 'px'\n      style['min-width'] = mw + 'px'\n\n      if (mp) {\n        style['top'] = '0px'\n      } else {\n        style['top'] = th + 'px'\n      }\n\n      style['bottom'] = '0px'\n\n      /**\n       * Adjust the margins if content width is smaller than\n       * desktop minimum width.\n       */\n      if (!mobile) {\n        if (cw < dmw) {\n          let x = dmw - cw\n          dm = dm - (x / 2)\n        }\n      } else {\n        dm = 0\n        dmw = 0\n      }\n\n      if (split) {\n        if (reverse) {\n          style['right'] = dm + 'px'\n        } else {\n          style['left'] = dm + 'px'\n        }\n      } else {\n        if (reverse) {\n          if (rtl) {\n            style['right'] = dm + 'px'\n          } else {\n            style['left'] = (dm + sw) + 'px'\n          }\n        } else {\n          if (rtl) {\n            style['right'] = (dm + sw) + 'px'\n          } else {\n            style['left'] = dm + 'px'\n          }\n        }\n      }\n\n      if (!mp && sp && !reverse && !split && !rtl) {\n        style['top'] = '0px'\n      }\n\n      if (rtl && !split && !reverse && mp) {\n        style['top'] = '0px'\n      }\n\n      if (rtl && !split && reverse && !mp && sp) {\n        style['top'] = '0px'\n      }\n\n      return style\n    }\n  }\n}\n</script>\n"]}]}