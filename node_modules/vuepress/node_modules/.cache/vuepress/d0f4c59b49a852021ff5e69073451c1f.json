{"remainingRequest":"/media/itsd/ITSD/Projects/wilfried/node_modules/vue-loader/lib/index.js??vue-loader-options!/media/itsd/ITSD/Projects/wilfried/node_modules/vue-atlas/src/Typeahead/VaTypeahead.vue?vue&type=script&lang=js&","dependencies":[{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/vue-atlas/src/Typeahead/VaTypeahead.vue","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/babel-loader/lib/index.js","mtime":1526583314000},{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport render from '../render.vue'\nimport inputMixin from '../Mixin/inputMixin'\n\nexport default {\n  name: 'VaTypeahead',\n  created () {\n    // this.citems = this.primitiveData\n  },\n  mixins: [inputMixin],\n  props: {\n    value: {\n      type: String,\n      default: ''\n    },\n    data: {\n      type: Array\n    },\n    context: {\n    },\n    itemRender: {\n      type: Function,\n      default (item) {\n        return item\n      }\n    },\n    icon: {\n      type: String,\n      required: false\n    },\n    iconStyle: {\n      type: String,\n      default: 'regular',\n      required: false\n    },\n    limit: {\n      type: Number,\n      default: 10\n    },\n    matchCase: {\n      type: Boolean,\n      default: false\n    },\n    debounce: {\n      type: Number,\n      default: 400\n    },\n    addFormat: {\n      type: Function,\n      default (item) {\n        return item\n      }\n    },\n    onHit: {\n      type: Function,\n      default (item) {\n        this.reset()\n        this.query = this.addFormat(item)\n      }\n    },\n    showClean: {\n      type: Boolean,\n      default: false\n    },\n    dropdownWidth: {\n      type: Number,\n      default: 220\n    },\n    dropdownHeight: {\n      type: Number,\n      default: 300\n    },\n    async: {\n      type: Boolean,\n      default: true\n    },\n    items: {\n      type: Array\n    },\n    prefixCls: {\n      type: String,\n      default: 'va'\n    }\n  },\n  watch: {\n    items (val) {\n      // this.citems = val\n    },\n    citems (val) {\n      this.show = val && !!val.length\n    },\n    value (val) {\n      this.query = val\n    },\n    query (val) {\n      this.$emit('input', val)\n      if (val.value === '') {\n        this.items = []\n      }\n    }\n  },\n  data () {\n    return {\n      show: false,\n      noResults: true,\n      current: 0,\n      query: this.value,\n      timeoutID: 0\n      // citems: this.items\n    }\n  },\n  computed: {\n    citems () {\n      return this.items.slice(0, this.limit)\n    },\n    primitiveData () {\n      if (this.data && this.query) {\n        return this.data.filter((value) => {\n          value = this.matchCase ? value : value.toLowerCase()\n          return value.indexOf(this.query) !== -1\n        }).slice(0, this.limit)\n      }\n    }\n  },\n  components: {\n    render\n  },\n  methods: {\n    focusInput () {\n      this.$refs.input.focus()\n    },\n    focus () {\n      this.$emit('focus')\n    },\n    blur () {\n      this.show = false\n      this.$emit('blur')\n    },\n    update () {\n      clearTimeout(this.timeoutID)\n      let self = this\n      if (this.readonly || this.disabled) return\n      this.timeoutID = setTimeout(() => {\n        if (!self.query) {\n          self.reset()\n          return false\n        }\n        if (self.async) {\n          self.$emit('change', self.query)\n        } else if (self.data) {\n          // self.citems = self.primitiveData\n        }\n      }, this.debounce)\n    },\n    reset () {\n      // this.citems = []\n      this.query = ''\n      this.loading = false\n      this.show = false\n    },\n    isActive (index) {\n      let klass = this.prefixCls + '-dropdown-active'\n      return this.current === index ? klass : ''\n    },\n    hit (index) {\n      if (this.citems && this.citems.length) {\n        // index ? this.current = index : ''\n        this.onHit(this.citems[index], this)\n      }\n    },\n    up () {\n      if (this.current > 0) this.current--\n    },\n    down () {\n      if (this.current < this.citems.length - 1) this.current++\n    }\n  }\n}\n",{"version":3,"sources":["VaTypeahead.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4CA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"VaTypeahead.vue","sourceRoot":"node_modules/vue-atlas/src/Typeahead","sourcesContent":["<template>\n  <div :class=\"[show ? prefixCls + '-dropdown-con' : '']\">\n\n    <va-input\n      ref=\"input\"\n      :width=\"width\"\n      :name=\"name\"\n      :rules=\"rules\"\n      :placeholder=\"placeholder\"\n      :custom-validate=\"customValidate\"\n      :readonly=\"readonly\"\n      :disabled=\"disabled\"\n      v-model=\"query\"\n      :show-clean=\"showClean\"\n      :icon=\"icon\"\n      :icon-style=\"iconStyle\"\n      @focus=\"focus\"\n      @blur=\"blur\"\n      @input.native=\"update\"\n      @keydown.native.up=\"up\"\n      @keydown.native.down=\"down\"\n      @keydown.native.enter=\"hit\"\n      @keydown.native.esc=\"onReset\">\n    </va-input>\n\n    <ul\n      :class=\"`${prefixCls}-dropdown-menu`\"\n      v-show=\"show\"\n      v-va-position=\"show\"\n      :style=\"{width: dropdownWidth + 'px', maxHeight: dropdownHeight + 'px'}\">\n      <li v-for=\"(item, index) in citems\" :class=\"isActive(index)\" :key=\"index\">\n        <a @mousedown.prevent=\"hit(index)\">\n          <render\n            :context=\"context || $parent._self\"\n            :template=\"itemRender(item)\">\n          </render>\n        </a>\n      </li>\n    </ul>\n\n  </div>\n</template>\n\n<script>\nimport render from '../render.vue'\nimport inputMixin from '../Mixin/inputMixin'\n\nexport default {\n  name: 'VaTypeahead',\n  created () {\n    // this.citems = this.primitiveData\n  },\n  mixins: [inputMixin],\n  props: {\n    value: {\n      type: String,\n      default: ''\n    },\n    data: {\n      type: Array\n    },\n    context: {\n    },\n    itemRender: {\n      type: Function,\n      default (item) {\n        return item\n      }\n    },\n    icon: {\n      type: String,\n      required: false\n    },\n    iconStyle: {\n      type: String,\n      default: 'regular',\n      required: false\n    },\n    limit: {\n      type: Number,\n      default: 10\n    },\n    matchCase: {\n      type: Boolean,\n      default: false\n    },\n    debounce: {\n      type: Number,\n      default: 400\n    },\n    addFormat: {\n      type: Function,\n      default (item) {\n        return item\n      }\n    },\n    onHit: {\n      type: Function,\n      default (item) {\n        this.reset()\n        this.query = this.addFormat(item)\n      }\n    },\n    showClean: {\n      type: Boolean,\n      default: false\n    },\n    dropdownWidth: {\n      type: Number,\n      default: 220\n    },\n    dropdownHeight: {\n      type: Number,\n      default: 300\n    },\n    async: {\n      type: Boolean,\n      default: true\n    },\n    items: {\n      type: Array\n    },\n    prefixCls: {\n      type: String,\n      default: 'va'\n    }\n  },\n  watch: {\n    items (val) {\n      // this.citems = val\n    },\n    citems (val) {\n      this.show = val && !!val.length\n    },\n    value (val) {\n      this.query = val\n    },\n    query (val) {\n      this.$emit('input', val)\n      if (val.value === '') {\n        this.items = []\n      }\n    }\n  },\n  data () {\n    return {\n      show: false,\n      noResults: true,\n      current: 0,\n      query: this.value,\n      timeoutID: 0\n      // citems: this.items\n    }\n  },\n  computed: {\n    citems () {\n      return this.items.slice(0, this.limit)\n    },\n    primitiveData () {\n      if (this.data && this.query) {\n        return this.data.filter((value) => {\n          value = this.matchCase ? value : value.toLowerCase()\n          return value.indexOf(this.query) !== -1\n        }).slice(0, this.limit)\n      }\n    }\n  },\n  components: {\n    render\n  },\n  methods: {\n    focusInput () {\n      this.$refs.input.focus()\n    },\n    focus () {\n      this.$emit('focus')\n    },\n    blur () {\n      this.show = false\n      this.$emit('blur')\n    },\n    update () {\n      clearTimeout(this.timeoutID)\n      let self = this\n      if (this.readonly || this.disabled) return\n      this.timeoutID = setTimeout(() => {\n        if (!self.query) {\n          self.reset()\n          return false\n        }\n        if (self.async) {\n          self.$emit('change', self.query)\n        } else if (self.data) {\n          // self.citems = self.primitiveData\n        }\n      }, this.debounce)\n    },\n    reset () {\n      // this.citems = []\n      this.query = ''\n      this.loading = false\n      this.show = false\n    },\n    isActive (index) {\n      let klass = this.prefixCls + '-dropdown-active'\n      return this.current === index ? klass : ''\n    },\n    hit (index) {\n      if (this.citems && this.citems.length) {\n        // index ? this.current = index : ''\n        this.onHit(this.citems[index], this)\n      }\n    },\n    up () {\n      if (this.current > 0) this.current--\n    },\n    down () {\n      if (this.current < this.citems.length - 1) this.current++\n    }\n  }\n}\n</script>\n"]}]}