{"remainingRequest":"/media/itsd/ITSD/Projects/test/node_modules/babel-loader/lib/index.js??ref--3-1!/media/itsd/ITSD/Projects/test/node_modules/cache-loader/dist/cjs.js??ref--0-0!/media/itsd/ITSD/Projects/test/node_modules/vue-loader/lib/index.js??vue-loader-options!/media/itsd/ITSD/Projects/test/node_modules/vue-atlas/src/Input/VaInput.vue?vue&type=script&lang=js&","dependencies":[{"path":"/media/itsd/ITSD/Projects/test/node_modules/vue-atlas/src/Input/VaInput.vue","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/test/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/test/node_modules/babel-loader/lib/index.js","mtime":1526583314000},{"path":"/media/itsd/ITSD/Projects/test/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/test/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport inputMixin from '../Mixin/inputMixin';\nimport validate from '../validate.vue'; // import { focus } from 'vue-focus'\n\nexport default {\n  name: 'VaInput',\n  mixins: [inputMixin],\n  props: {\n    size: {\n      type: String\n    },\n    value: {\n      type: [String, Number]\n    },\n    onChange: {\n      type: Function\n    },\n    prefixCls: {\n      type: String,\n      default: 'va'\n    },\n    type: {\n      type: String,\n      default: 'text'\n    },\n    icon: {\n      type: String\n    },\n    iconStyle: {\n      type: String,\n      default: 'regular',\n      required: false\n    },\n    showClean: {\n      type: Boolean,\n      default: false\n    },\n    autofocus: {\n      type: Boolean,\n      default: false,\n      required: false\n    },\n    theme: {\n      type: String,\n      default: 'primary',\n      required: false,\n      validator: function validator(v) {\n        return ['default', 'primary', 'success', 'warning', 'danger', 'purple'];\n      }\n    }\n  },\n  // directives: {\n  //   focus: focus\n  // },\n  data: function data() {\n    return {\n      focused: false\n    };\n  },\n  components: {\n    validate: validate\n  },\n  computed: {\n    classObj: function classObj() {\n      var prefixCls = this.prefixCls,\n          validStatus = this.validStatus,\n          showClean = this.showClean,\n          size = this.size,\n          icon = this.icon;\n      var klass = {};\n      klass[prefixCls + '-has-error'] = validStatus === 'error';\n      klass[prefixCls + '-has-success'] = validStatus === 'success';\n      klass[prefixCls + '-has-warn'] = validStatus === 'warn';\n      klass[prefixCls + '-input-con'] = true;\n      klass[prefixCls + '-show-clean'] = showClean;\n      klass[prefixCls + '-show-icon'] = icon ? true : false;\n      size ? klass[prefixCls + '-input-' + size] = true : '';\n      klass['inline'] = true;\n      return klass;\n    },\n    inputClassObj: function inputClassObj() {\n      var prefixCls = this.prefixCls,\n          theme = this.theme;\n      var klass = {};\n      klass[prefixCls + '-form-control'] = true;\n      klass[prefixCls + '-form-control-' + theme] = true;\n      return klass;\n    }\n  },\n  methods: {\n    clean: function clean() {\n      this.$emit('input', '');\n      this.$emit('clean');\n    },\n    update: function update(val) {\n      this.$emit('input', val);\n      this.$emit('change', val);\n    },\n    blur: function blur() {\n      this.focused = false;\n      this.$emit('blur', this.value);\n    },\n    focus: function focus() {\n      this.focused = true;\n      this.$emit('focus', this.value);\n    },\n    enterPressed: function enterPressed() {\n      var el = this.$refs.input;\n      var evObj = document.createEvent('Events');\n      evObj.initEvent('click', true, false);\n      el.dispatchEvent(evObj);\n    }\n  }\n};",{"version":3,"sources":["VaInput.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div :class=\"classObj\" :style=\"{'width': width}\">\n    <!-- <input\n      ref=\"input\"\n      auto-complete=\"off\"\n      :class=\"`${prefixCls}-form-control`\"\n      :style=\"{'width': width}\"\n      :readonly=\"readonly\"\n      :disabled=\"disabled\"\n      :placeholder=\"placeholder\"\n      :type=\"type\"\n      @blur=\"blur\"\n      @focus=\"focus\"\n      @input=\"update($event.target.value)\"\n      v-focus=\"focused\"\n      :value=\"value\" /> -->\n\n    <!-- This one has had the focus event and directive removed. -->\n    <input\n      ref=\"input\"\n      auto-complete=\"off\"\n      :class=\"inputClassObj\"\n      :style=\"{'width': width}\"\n      :readonly=\"readonly\"\n      :disabled=\"disabled\"\n      :placeholder=\"placeholder\"\n      :autofocus=\"autofocus\"\n      :type=\"type\"\n      @blur=\"blur\"\n      @input=\"update($event.target.value)\"\n      tabindex=\"0\"\n      v-on:keyup.enter=\"enterPressed\"\n      :value=\"value\" />\n\n    <va-icon\n      type=\"times\"\n      icon-style=\"solid\"\n      v-if=\"showClean\"\n      :class=\"`${prefixCls}-input-show-clean`\"\n      @click.native.stop=\"clean\">\n    </va-icon>\n\n    <va-icon v-if=\"icon !== undefined\"\n      :class=\"`${prefixCls}-input-show-icon`\"\n      :type=\"icon\"\n      :icon-style=\"iconStyle\">\n    </va-icon>\n\n    <validate\n      :name=\"name\"\n      v-model=\"validStatus\"\n      :rules=\"rules\"\n      :custom-validate=\"customValidate\"\n      :current=\"value\" />\n  </div>\n</template>\n\n<script>\nimport inputMixin from '../Mixin/inputMixin'\nimport validate from '../validate.vue'\n// import { focus } from 'vue-focus'\n\nexport default {\n  name: 'VaInput',\n  mixins: [inputMixin],\n  props: {\n    size: {\n      type: String\n    },\n    value: {\n      type: [String, Number]\n    },\n    onChange: {\n      type: Function\n    },\n    prefixCls: {\n      type: String,\n      default: 'va'\n    },\n    type: {\n      type: String,\n      default: 'text'\n    },\n    icon: {\n      type: String\n    },\n    iconStyle: {\n      type: String,\n      default: 'regular',\n      required: false\n    },\n    showClean: {\n      type: Boolean,\n      default: false\n    },\n    autofocus: {\n      type: Boolean,\n      default: false,\n      required: false\n    },\n    theme: {\n      type: String,\n      default: 'primary',\n      required: false,\n      validator (v) {\n        return [\n          'default',\n          'primary',\n          'success',\n          'warning',\n          'danger',\n          'purple'\n        ]\n      }\n    }\n  },\n  // directives: {\n  //   focus: focus\n  // },\n  data () {\n    return {\n      focused: false\n    }\n  },\n  components: {\n    validate\n  },\n  computed: {\n    classObj () {\n      let {prefixCls, validStatus, showClean, size, icon} = this\n      let klass = {}\n\n      klass[prefixCls + '-has-error'] = validStatus === 'error'\n      klass[prefixCls + '-has-success'] = validStatus === 'success'\n      klass[prefixCls + '-has-warn'] = validStatus === 'warn'\n      klass[prefixCls + '-input-con'] = true\n      klass[prefixCls + '-show-clean'] = showClean\n      klass[prefixCls + '-show-icon'] = icon ? true : false\n      size ? klass[prefixCls + '-input-' + size] = true : ''\n      klass['inline'] = true\n\n      return klass\n    },\n    inputClassObj () {\n      let {prefixCls, theme} = this\n      let klass = {}\n\n      klass[prefixCls + '-form-control'] = true\n      klass[prefixCls + '-form-control-' + theme] = true\n\n      return klass\n    }\n  },\n  methods: {\n    clean () {\n      this.$emit('input', '')\n      this.$emit('clean')\n    },\n    update (val) {\n      this.$emit('input', val)\n      this.$emit('change', val)\n    },\n    blur () {\n      this.focused = false\n      this.$emit('blur', this.value)\n    },\n    focus () {\n      this.focused = true\n      this.$emit('focus', this.value)\n    },\n    enterPressed () {\n      let el = this.$refs.input\n      let evObj = document.createEvent('Events')\n      evObj.initEvent('click', true, false)\n      el.dispatchEvent(evObj)\n    }\n  }\n}\n</script>\n"],"sourceRoot":"node_modules/vue-atlas/src/Input"}]}