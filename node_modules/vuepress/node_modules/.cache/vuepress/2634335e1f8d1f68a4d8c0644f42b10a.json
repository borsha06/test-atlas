{"remainingRequest":"/media/itsd/ITSD/Projects/test/node_modules/babel-loader/lib/index.js??ref--3-1!/media/itsd/ITSD/Projects/test/node_modules/cache-loader/dist/cjs.js??ref--0-0!/media/itsd/ITSD/Projects/test/node_modules/vue-loader/lib/index.js??vue-loader-options!/media/itsd/ITSD/Projects/test/node_modules/vue-atlas/src/Form/VaForm.vue?vue&type=script&lang=js&","dependencies":[{"path":"/media/itsd/ITSD/Projects/test/node_modules/vue-atlas/src/Form/VaForm.vue","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/test/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/test/node_modules/babel-loader/lib/index.js","mtime":1526583314000},{"path":"/media/itsd/ITSD/Projects/test/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/test/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.object.assign\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\n//\n//\n//\n//\n//\n//\nimport type from '../utils/type';\nimport events from '../utils/events';\nexport default {\n  name: 'VaForm',\n  mixins: [events],\n  props: {\n    type: {\n      type: String,\n      default: 'horizontal',\n      required: false,\n      validator: function validator(v) {\n        return ['horizontal', 'inline', 'vertical'].includes(v);\n      },\n      note: 'The type of form to render. See documentation example.'\n    },\n    prefixCls: {\n      type: String,\n      default: 'va'\n    }\n  },\n  methods: {\n    noop: function noop() {},\n    validateFields: function validateFields(cb) {\n      var _this = this;\n\n      this.validate = true;\n      this.$nextTick(function () {\n        if (type.isFunction(cb)) {\n          cb(_this.result);\n        }\n      });\n    }\n  },\n  watch: {\n    validate: function validate(val) {\n      this.broadcast('VaValidate', 'Va@openValidate', val);\n\n      if (val) {\n        this.result = this._result;\n      } else {\n        this.result = {\n          results: {},\n          isvalid: true\n        };\n      }\n    },\n    result: function result(val) {\n      if (this.validate) {\n        this.$emit('change', val);\n      }\n    }\n  },\n  mounted: function mounted() {\n    if (!this.validate) {\n      this.result = {\n        results: {},\n        isvalid: true\n      };\n    }\n\n    this.broadcast('VaValidate', 'Va@openValidate', this.validate);\n  },\n  computed: {\n    classObj: function classObj() {\n      var prefixCls = this.prefixCls,\n          type = this.type;\n      var klass = {};\n      klass[prefixCls + '-form-horizontal'] = type === 'horizontal';\n      klass[prefixCls + '-form-inline'] = type === 'inline';\n      klass['clearfix'] = true;\n      return klass;\n    }\n  },\n  created: function created() {\n    var _this2 = this;\n\n    this.$on('openValidate', function () {\n      _this2.validate = true;\n    });\n    this.$on('closeValidate', function () {\n      _this2.validate = false;\n    });\n    this.$on('Va@validateChange', function (val) {\n      var name = val.name;\n      var validateResult = Object.assign({}, _this2._result);\n      if (!validateResult.results) validateResult.results = {};\n      validateResult.results[name] = val.result;\n      validateResult.isvalid = true;\n\n      for (var i in validateResult.results) {\n        if (!validateResult.results[i]['isvalid']) {\n          validateResult.isvalid = false;\n          break;\n        }\n      }\n\n      _this2._result = validateResult;\n\n      if (_this2.validate) {\n        _this2.result = _this2._result;\n\n        _this2.$emit('validateChange', _this2.result);\n      }\n    });\n  },\n  data: function data() {\n    return {\n      // eslint-disable-next-line\n      _result: {\n        results: {},\n        isvalid: true\n      },\n      result: {\n        results: {},\n        isvalid: true\n      },\n      validate: false\n    };\n  }\n};",{"version":3,"sources":["VaForm.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <form :class=\"classObj\" @submit.prevent=\"noop\">\n    <slot />\n  </form>\n</template>\n\n<script>\nimport type from '../utils/type'\nimport events from '../utils/events'\n\nexport default {\n  name: 'VaForm',\n  mixins: [events],\n  props: {\n    type: {\n      type: String,\n      default: 'horizontal',\n      required: false,\n      validator (v) {\n        return [\n          'horizontal',\n          'inline',\n          'vertical'\n        ].includes(v)\n      },\n      note: 'The type of form to render. See documentation example.'\n    },\n    prefixCls: {\n      type: String,\n      default: 'va'\n    }\n  },\n  methods: {\n    noop () {\n    },\n    validateFields (cb) {\n      this.validate = true\n      this.$nextTick(() => {\n        if (type.isFunction(cb)) {\n          cb(this.result)\n        }\n      })\n    }\n  },\n  watch: {\n    validate (val) {\n      this.broadcast('VaValidate', 'Va@openValidate', val)\n      if (val) {\n        this.result = this._result\n      } else {\n        this.result = {results: {}, isvalid: true}\n      }\n    },\n    result (val) {\n      if (this.validate) {\n        this.$emit('change', val)\n      }\n    }\n  },\n  mounted () {\n    if (!this.validate) {\n      this.result = {results: {}, isvalid: true}\n    }\n    this.broadcast('VaValidate', 'Va@openValidate', this.validate)\n  },\n  computed: {\n    classObj () {\n      let {prefixCls, type} = this\n      let klass = {}\n\n      klass[prefixCls + '-form-horizontal'] = type === 'horizontal'\n      klass[prefixCls + '-form-inline'] = type === 'inline'\n      klass['clearfix'] = true\n\n      return klass\n    }\n  },\n  created () {\n    this.$on('openValidate', () => {\n      this.validate = true\n    })\n\n    this.$on('closeValidate', () => {\n      this.validate = false\n    })\n\n    this.$on('Va@validateChange', (val) => {\n      let name = val.name\n      let validateResult = Object.assign({}, this._result)\n\n      if (!validateResult.results) validateResult.results = {}\n      validateResult.results[name] = val.result\n\n      validateResult.isvalid = true\n\n      for (let i in validateResult.results) {\n        if (!validateResult.results[i]['isvalid']) {\n          validateResult.isvalid = false\n          break\n        }\n      }\n\n      this._result = validateResult\n\n      if (this.validate) {\n        this.result = this._result\n        this.$emit('validateChange', this.result)\n      }\n    })\n  },\n\n  data () {\n    return {\n      // eslint-disable-next-line\n      _result: {results: {}, isvalid: true},\n      result: {results: {}, isvalid: true},\n      validate: false\n    }\n  }\n}\n</script>\n"],"sourceRoot":"node_modules/vue-atlas/src/Form"}]}