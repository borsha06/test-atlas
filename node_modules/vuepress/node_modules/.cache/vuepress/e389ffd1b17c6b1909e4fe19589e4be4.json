{"remainingRequest":"/media/itsd/ITSD/Projects/test/node_modules/vue-loader/lib/index.js??vue-loader-options!/media/itsd/ITSD/Projects/test/node_modules/vue-atlas/src/Toast/VaToast.vue?vue&type=script&lang=js&","dependencies":[{"path":"/media/itsd/ITSD/Projects/test/node_modules/vue-atlas/src/Toast/VaToast.vue","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/test/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/test/node_modules/babel-loader/lib/index.js","mtime":1526583314000},{"path":"/media/itsd/ITSD/Projects/test/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/test/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  name: 'VaToast',\n  props: {\n    text: {\n      type: String,\n      required: true,\n      note: 'The inner text of the toast.'\n    },\n    placement: {\n      type: String,\n      default: 'center',\n      validator (v) {\n        return [\n          'bottom-right',\n          'top',\n          'top-right',\n          'top-left',\n          'bottom',\n          'bottom-left',\n          'center'\n        ].includes(v)\n      },\n      note: 'Where in the window the toast will appear.'\n    },\n    type: {\n      type: String,\n      default: 'default',\n      validator (v) {\n        return [\n          'default',\n          'default-notification',\n          'success',\n          'primary',\n          'info',\n          'warning',\n          'danger'\n        ].includes(v)\n      },\n      note: 'What kind of toast do you like?'\n    },\n    duration: {\n      type: Number,\n      default: 3000,\n      note: 'Length in milliseconds until the toast disappears.'\n    },\n    closeOnClick: {\n      type: Boolean,\n      default: true,\n      note: 'When true, clicking the toast will dismiss it immediately.'\n    },\n    prefixCls: {\n      type: String,\n      default: 'va'\n    }\n  },\n  data () {\n    return {\n      show: false\n    }\n  },\n  computed: {\n    classObj () {\n      let {prefixCls, placement, type} = this\n      let klass = {}\n\n      klass[prefixCls + '-toast'] = true\n      klass[prefixCls + '-toast-' + type] = true\n      klass[prefixCls + '-toast-' + placement] = true\n\n      return klass\n    }\n  },\n  methods: {\n    handleClick () {\n      if (this.closeOnClick) {\n        this.show = false\n      }\n    }\n  },\n  watch: {\n    show: {\n      handler (val, newVal) {\n        this.setT = window.clearTimeout(this.setT)\n        if (val) {\n          this.$nextTick(() => {\n            // recompute position\n            if (this.placement === 'top' || this.placement === 'bottom') {\n              this.$refs.dom.style.marginLeft = -1 * this.$refs.dom.offsetWidth / 2 + 'px'\n            } else if (this.placement === 'center') {\n              this.$refs.dom.style.marginLeft = -1 * this.$refs.dom.offsetWidth / 2 + 'px'\n              this.$refs.dom.style.marginTop = -1 * this.$refs.dom.offsetHeight / 2 + 'px'\n            }\n          })\n        }\n      },\n      immediate: true\n    }\n  }\n}\n",{"version":3,"sources":["VaToast.vue"],"names":[],"mappings":";;;;;;;;;;;;;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"VaToast.vue","sourceRoot":"node_modules/vue-atlas/src/Toast","sourcesContent":["<template>\n  <transition name=\"fade\">\n    <div\n      ref=\"dom\"\n      :class=\"classObj\"\n      @click=\"handleClick\"\n      v-if=\"show\">\n      <span v-text=\"text\" />\n    </div>\n  </transition>\n</template>\n\n<script>\nexport default {\n  name: 'VaToast',\n  props: {\n    text: {\n      type: String,\n      required: true,\n      note: 'The inner text of the toast.'\n    },\n    placement: {\n      type: String,\n      default: 'center',\n      validator (v) {\n        return [\n          'bottom-right',\n          'top',\n          'top-right',\n          'top-left',\n          'bottom',\n          'bottom-left',\n          'center'\n        ].includes(v)\n      },\n      note: 'Where in the window the toast will appear.'\n    },\n    type: {\n      type: String,\n      default: 'default',\n      validator (v) {\n        return [\n          'default',\n          'default-notification',\n          'success',\n          'primary',\n          'info',\n          'warning',\n          'danger'\n        ].includes(v)\n      },\n      note: 'What kind of toast do you like?'\n    },\n    duration: {\n      type: Number,\n      default: 3000,\n      note: 'Length in milliseconds until the toast disappears.'\n    },\n    closeOnClick: {\n      type: Boolean,\n      default: true,\n      note: 'When true, clicking the toast will dismiss it immediately.'\n    },\n    prefixCls: {\n      type: String,\n      default: 'va'\n    }\n  },\n  data () {\n    return {\n      show: false\n    }\n  },\n  computed: {\n    classObj () {\n      let {prefixCls, placement, type} = this\n      let klass = {}\n\n      klass[prefixCls + '-toast'] = true\n      klass[prefixCls + '-toast-' + type] = true\n      klass[prefixCls + '-toast-' + placement] = true\n\n      return klass\n    }\n  },\n  methods: {\n    handleClick () {\n      if (this.closeOnClick) {\n        this.show = false\n      }\n    }\n  },\n  watch: {\n    show: {\n      handler (val, newVal) {\n        this.setT = window.clearTimeout(this.setT)\n        if (val) {\n          this.$nextTick(() => {\n            // recompute position\n            if (this.placement === 'top' || this.placement === 'bottom') {\n              this.$refs.dom.style.marginLeft = -1 * this.$refs.dom.offsetWidth / 2 + 'px'\n            } else if (this.placement === 'center') {\n              this.$refs.dom.style.marginLeft = -1 * this.$refs.dom.offsetWidth / 2 + 'px'\n              this.$refs.dom.style.marginTop = -1 * this.$refs.dom.offsetHeight / 2 + 'px'\n            }\n          })\n        }\n      },\n      immediate: true\n    }\n  }\n}\n</script>\n"]}]}