{"remainingRequest":"/media/itsd/ITSD/Projects/wilfried/node_modules/vue-loader/lib/index.js??vue-loader-options!/media/itsd/ITSD/Projects/wilfried/node_modules/vue-atlas/src/Sidebar/VaSidebar.vue?vue&type=script&lang=js&","dependencies":[{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/vue-atlas/src/Sidebar/VaSidebar.vue","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/babel-loader/lib/index.js","mtime":1526583314000},{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n\nimport events from '../utils/events'\n\nexport default {\n  name: 'VaSidebar',\n  mixins: [events],\n  props: {\n    compact: {\n      type: Boolean,\n      default: false,\n      required: false\n    },\n    textLinks: {\n      type: Boolean,\n      default: false,\n      required: false\n    },\n    theme: {\n      type: String,\n      default: 'default',\n      required: false,\n      validator (v) {\n        return [\n          'default',\n          'white',\n          'blue',\n          'dark',\n          'darker',\n          'purple'\n        ]\n      }\n    },\n    showToggle: {\n      type: Boolean,\n      default: false,\n      required: false\n    },\n    prefixCls: {\n      type: String,\n      default: 'va'\n    }\n  },\n  data () {\n    let s = this.showToggle\n    let c = this.compact\n    let t = this.theme\n    return {\n      currentDesktopMinimumWidth: 0,\n      currentDesktopMargin: 0,\n      currentSidebarWidth: 0,\n      currentMinibarWidth: 0,\n      currentTopbarHeight: 0,\n      minibarPriority: false,\n      currentContentWidth: 0,\n      sidebarPriority: false,\n      currentWindowWidth: 0,\n      isReverse: false,\n      isMobile: false,\n      isSplit: false,\n      isRTL: false,\n      comp: c,\n      th: t,\n      st: s\n    }\n  },\n  created () {\n    this.$on('Va@sidebarPresenceCheck', (val) => { this.dispatch('VaLayoutManager', 'Va@sidebarPresenceReply', true) })\n    this.$on('Va@desktopMinimumWidthChange', (val) => { this.currentDesktopMinimumWidth = val })\n    this.$on('Va@desktopMarginChange', (val) => { this.currentDesktopMargin = val })\n    this.$on('Va@minibarWidthChange', (val) => { this.currentMinibarWidth = val })\n    this.$on('Va@topbarHeightChange', (val) => { this.currentTopbarHeight = val })\n    this.$on('Va@contentWidthChange', (val) => { this.currentContentWidth = val })\n    this.$on('Va@sidebarWidthChange', (val) => { this.currentSidebarWidth = val })\n    this.$on('Va@minibarPriorityChange', (val) => { this.minibarPriority = val })\n    this.$on('Va@sidebarPriorityChange', (val) => { this.sidebarPriority = val })\n    this.$on('Va@windowWidthChange', (val) => { this.currentWindowWidth = val })\n    this.$on('Va@sidebarIsMobile', (val) => { this.isMobile = val })\n    this.$on('Va@reverseChange', (val) => { this.isReverse = val })\n    this.$on('Va@sidebarThemeChange', (val) => { this.th = val })\n    this.$on('Va@showToggleChange', (val) => { this.st = val })\n    this.$on('Va@splitChange', (val) => { this.isSplit = val })\n    this.$on('Va@compactChange', (val) => { this.comp = val })\n    this.$on('Va@rtlChange', (val) => { this.isRTL = val })\n  },\n  mounted () {\n    /**\n     * This needs to be wrapped in a short setTimeout to give\n     * LayoutManager time to call enableReceivers().\n     */\n    setTimeout(() => {\n      this.dispatch('VaLayoutManager', 'Va@configSidebarThemeChange', this.th)\n    }, 10)\n  },\n  beforeDestroy () {\n    this.dispatch('VaLayoutManager', 'Va@sidebarDisconnect', true)\n  },\n  computed: {\n    classObj () {\n      let {prefixCls, th, isMobile, comp, textLinks} = this\n      let klass = {}\n\n      klass[prefixCls + '-sidebar'] = true\n      klass[prefixCls + '-sidebar--theme-' + th] = true\n      klass[prefixCls + '-sidebar-mobile'] = isMobile\n      klass[prefixCls + '-sidebar-compact'] = comp\n      klass[prefixCls + '-sidebar-text-links'] = textLinks\n\n      return klass\n    },\n    styleObj () {\n      let dmw = parseInt(this.currentDesktopMinimumWidth)\n      let dm = parseInt(this.currentDesktopMargin)\n      let sw = parseInt(this.currentSidebarWidth)\n      let th = parseInt(this.currentTopbarHeight)\n      let cw = parseInt(this.currentContentWidth)\n      let mw = parseInt(this.currentMinibarWidth)\n      let sp = this.sidebarPriority\n      let mp = this.minibarPriority\n      let reverse = this.isReverse\n      let mobile = this.isMobile\n      let split = this.isSplit\n      let rtl = this.isRTL\n      let style = {}\n\n      style['width'] = sw + 'px'\n      style['min-width'] = sw + 'px'\n\n      if (sp) {\n        style['top'] = '0px'\n      } else {\n        style['top'] = th + 'px'\n      }\n\n      /**\n       * Adjust the margins if content width is smaller than\n       * desktop minimum width.\n       */\n      if (!mobile) {\n        if (cw < dmw) {\n          let x = dmw - cw\n          dm = dm - (x / 2)\n        }\n      } else {\n        dm = 0\n        dmw = 0\n      }\n\n      if (split) {\n        if (reverse) {\n          style['left'] = dm + 'px'\n        } else {\n          style['right'] = dm + 'px'\n        }\n      } else {\n        if (reverse) {\n          if (rtl) {\n            style['right'] = (dm + mw) + 'px'\n          } else {\n            style['left'] = dm + 'px'\n          }\n        } else {\n          if (rtl) {\n            style['right'] = dm + 'px'\n          } else {\n            style['left'] = (dm + mw) + 'px'\n          }\n        }\n      }\n\n      if (!sp && mp && reverse && !split && !rtl) {\n        style['top'] = '0px'\n      }\n\n      if (rtl && !split && !reverse && !sp && mp) {\n        style['top'] = '0px'\n      }\n\n      style['bottom'] = '0px'\n\n      return style\n    }\n  },\n  watch: {\n  }\n  // methods: {\n  //   initResize (e) {\n  //     /**\n  //      * Prevent text selection while dragging.\n  //      * https://stackoverflow.com/questions/5429827/how-can-i-prevent-text-element-selection-with-cursor-drag\n  //      */\n  //     if (e.stopPropagation) {\n  //       e.stopPropagation()\n  //     }\n  //     if (e.preventDefault) {\n  //       e.preventDefault()\n  //     }\n  //     e.cancelBubble = true\n  //     e.returnValue = false\n\n  //     window.addEventListener('mousemove', this.doResize, false)\n  //     window.addEventListener('mouseup', this.stopResize, false)\n  //   },\n  //   doResize (e) {\n  //     let el = this.$refs.sidebar\n  //     this.dispatch('VaLayoutManager', 'Va@sidebarWidthChange', e.clientX - el.offsetLeft)\n  //   },\n  //   stopResize () {\n  //     window.removeEventListener('mouseup', this.stopResize, false)\n  //     window.removeEventListener('mousemove', this.doResize, false)\n  //   }\n  // }\n}\n",{"version":3,"sources":["VaSidebar.vue"],"names":[],"mappings":";;;;;;;AAOA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"VaSidebar.vue","sourceRoot":"node_modules/vue-atlas/src/Sidebar","sourcesContent":["<template>\n  <div :class=\"classObj\" :style=\"styleObj\">\n      <slot />\n  </div>\n</template>\n\n<script>\nimport events from '../utils/events'\n\nexport default {\n  name: 'VaSidebar',\n  mixins: [events],\n  props: {\n    compact: {\n      type: Boolean,\n      default: false,\n      required: false\n    },\n    textLinks: {\n      type: Boolean,\n      default: false,\n      required: false\n    },\n    theme: {\n      type: String,\n      default: 'default',\n      required: false,\n      validator (v) {\n        return [\n          'default',\n          'white',\n          'blue',\n          'dark',\n          'darker',\n          'purple'\n        ]\n      }\n    },\n    showToggle: {\n      type: Boolean,\n      default: false,\n      required: false\n    },\n    prefixCls: {\n      type: String,\n      default: 'va'\n    }\n  },\n  data () {\n    let s = this.showToggle\n    let c = this.compact\n    let t = this.theme\n    return {\n      currentDesktopMinimumWidth: 0,\n      currentDesktopMargin: 0,\n      currentSidebarWidth: 0,\n      currentMinibarWidth: 0,\n      currentTopbarHeight: 0,\n      minibarPriority: false,\n      currentContentWidth: 0,\n      sidebarPriority: false,\n      currentWindowWidth: 0,\n      isReverse: false,\n      isMobile: false,\n      isSplit: false,\n      isRTL: false,\n      comp: c,\n      th: t,\n      st: s\n    }\n  },\n  created () {\n    this.$on('Va@sidebarPresenceCheck', (val) => { this.dispatch('VaLayoutManager', 'Va@sidebarPresenceReply', true) })\n    this.$on('Va@desktopMinimumWidthChange', (val) => { this.currentDesktopMinimumWidth = val })\n    this.$on('Va@desktopMarginChange', (val) => { this.currentDesktopMargin = val })\n    this.$on('Va@minibarWidthChange', (val) => { this.currentMinibarWidth = val })\n    this.$on('Va@topbarHeightChange', (val) => { this.currentTopbarHeight = val })\n    this.$on('Va@contentWidthChange', (val) => { this.currentContentWidth = val })\n    this.$on('Va@sidebarWidthChange', (val) => { this.currentSidebarWidth = val })\n    this.$on('Va@minibarPriorityChange', (val) => { this.minibarPriority = val })\n    this.$on('Va@sidebarPriorityChange', (val) => { this.sidebarPriority = val })\n    this.$on('Va@windowWidthChange', (val) => { this.currentWindowWidth = val })\n    this.$on('Va@sidebarIsMobile', (val) => { this.isMobile = val })\n    this.$on('Va@reverseChange', (val) => { this.isReverse = val })\n    this.$on('Va@sidebarThemeChange', (val) => { this.th = val })\n    this.$on('Va@showToggleChange', (val) => { this.st = val })\n    this.$on('Va@splitChange', (val) => { this.isSplit = val })\n    this.$on('Va@compactChange', (val) => { this.comp = val })\n    this.$on('Va@rtlChange', (val) => { this.isRTL = val })\n  },\n  mounted () {\n    /**\n     * This needs to be wrapped in a short setTimeout to give\n     * LayoutManager time to call enableReceivers().\n     */\n    setTimeout(() => {\n      this.dispatch('VaLayoutManager', 'Va@configSidebarThemeChange', this.th)\n    }, 10)\n  },\n  beforeDestroy () {\n    this.dispatch('VaLayoutManager', 'Va@sidebarDisconnect', true)\n  },\n  computed: {\n    classObj () {\n      let {prefixCls, th, isMobile, comp, textLinks} = this\n      let klass = {}\n\n      klass[prefixCls + '-sidebar'] = true\n      klass[prefixCls + '-sidebar--theme-' + th] = true\n      klass[prefixCls + '-sidebar-mobile'] = isMobile\n      klass[prefixCls + '-sidebar-compact'] = comp\n      klass[prefixCls + '-sidebar-text-links'] = textLinks\n\n      return klass\n    },\n    styleObj () {\n      let dmw = parseInt(this.currentDesktopMinimumWidth)\n      let dm = parseInt(this.currentDesktopMargin)\n      let sw = parseInt(this.currentSidebarWidth)\n      let th = parseInt(this.currentTopbarHeight)\n      let cw = parseInt(this.currentContentWidth)\n      let mw = parseInt(this.currentMinibarWidth)\n      let sp = this.sidebarPriority\n      let mp = this.minibarPriority\n      let reverse = this.isReverse\n      let mobile = this.isMobile\n      let split = this.isSplit\n      let rtl = this.isRTL\n      let style = {}\n\n      style['width'] = sw + 'px'\n      style['min-width'] = sw + 'px'\n\n      if (sp) {\n        style['top'] = '0px'\n      } else {\n        style['top'] = th + 'px'\n      }\n\n      /**\n       * Adjust the margins if content width is smaller than\n       * desktop minimum width.\n       */\n      if (!mobile) {\n        if (cw < dmw) {\n          let x = dmw - cw\n          dm = dm - (x / 2)\n        }\n      } else {\n        dm = 0\n        dmw = 0\n      }\n\n      if (split) {\n        if (reverse) {\n          style['left'] = dm + 'px'\n        } else {\n          style['right'] = dm + 'px'\n        }\n      } else {\n        if (reverse) {\n          if (rtl) {\n            style['right'] = (dm + mw) + 'px'\n          } else {\n            style['left'] = dm + 'px'\n          }\n        } else {\n          if (rtl) {\n            style['right'] = dm + 'px'\n          } else {\n            style['left'] = (dm + mw) + 'px'\n          }\n        }\n      }\n\n      if (!sp && mp && reverse && !split && !rtl) {\n        style['top'] = '0px'\n      }\n\n      if (rtl && !split && !reverse && !sp && mp) {\n        style['top'] = '0px'\n      }\n\n      style['bottom'] = '0px'\n\n      return style\n    }\n  },\n  watch: {\n  }\n  // methods: {\n  //   initResize (e) {\n  //     /**\n  //      * Prevent text selection while dragging.\n  //      * https://stackoverflow.com/questions/5429827/how-can-i-prevent-text-element-selection-with-cursor-drag\n  //      */\n  //     if (e.stopPropagation) {\n  //       e.stopPropagation()\n  //     }\n  //     if (e.preventDefault) {\n  //       e.preventDefault()\n  //     }\n  //     e.cancelBubble = true\n  //     e.returnValue = false\n\n  //     window.addEventListener('mousemove', this.doResize, false)\n  //     window.addEventListener('mouseup', this.stopResize, false)\n  //   },\n  //   doResize (e) {\n  //     let el = this.$refs.sidebar\n  //     this.dispatch('VaLayoutManager', 'Va@sidebarWidthChange', e.clientX - el.offsetLeft)\n  //   },\n  //   stopResize () {\n  //     window.removeEventListener('mouseup', this.stopResize, false)\n  //     window.removeEventListener('mousemove', this.doResize, false)\n  //   }\n  // }\n}\n</script>\n"]}]}