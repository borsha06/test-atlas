{"remainingRequest":"/media/itsd/ITSD/Projects/wilfried/node_modules/babel-loader/lib/index.js??ref--3-1!/media/itsd/ITSD/Projects/wilfried/node_modules/cache-loader/dist/cjs.js??ref--0-0!/media/itsd/ITSD/Projects/wilfried/node_modules/vue-loader/lib/index.js??vue-loader-options!/media/itsd/ITSD/Projects/wilfried/node_modules/vue-atlas/src/Range/VaRange.vue?vue&type=script&lang=js&","dependencies":[{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/vue-atlas/src/Range/VaRange.vue","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/babel-loader/lib/index.js","mtime":1526583314000},{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport events from '../utils/events';\nimport EventListener from '../utils/EventListener.js';\nexport default {\n  name: 'VaRange',\n  mixins: [events],\n  props: {\n    min: {\n      type: [String, Number],\n      default: '0',\n      required: false\n    },\n    max: {\n      type: [String, Number],\n      default: '100',\n      required: false\n    },\n    step: {\n      type: [String, Number],\n      default: '1',\n      required: false\n    },\n    value: {\n      type: [Number, String],\n      default: 0,\n      required: false\n    },\n    width: {\n      type: Number\n    },\n    prefixCls: {\n      type: String,\n      default: 'va'\n    }\n  },\n  data: function data() {\n    var value = this.value;\n    return {\n      showoutput: false,\n      currentValue: value,\n      preBarElement: null,\n      isMobile: false\n    };\n  },\n  watch: {\n    currentValue: function currentValue(val) {\n      this.$emit('input', val);\n      this.$emit('change', val);\n      this.update();\n    },\n    value: function value(val) {\n      this.currentValue = parseInt(val);\n    },\n    min: function min(val) {\n      this.update();\n    },\n    max: function max(val) {\n      this.update();\n    },\n    step: function step(val) {\n      this.update();\n    }\n  },\n  methods: {\n    update: function update() {\n      this.preBarElement.style.width = this.getVal() + 'px';\n    },\n    onInput: function onInput(e) {\n      this.currentValue = parseInt(e.target.value);\n      this.$emit('input', parseInt(e.target.value));\n    },\n    getVal: function getVal() {\n      var w = parseInt(this.$refs.range.clientWidth, 10);\n      var cv = parseInt(this.currentValue, 10);\n      var min = parseInt(this.min, 10);\n      var max = parseInt(this.max, 10);\n      /**\n      *  I wonder if there's a way to figure out the width of the runnable track..\n      *  Right now, we listen for isMobile from LayoutManager.\n      *  Width is 16px on desktop, 28px on mobile.\n      */\n\n      var thumbWidth;\n      this.isMobile ? thumbWidth = 28 : thumbWidth = 16;\n      max = max - min;\n      cv = cv - min;\n      min = min - min;\n\n      if (min === 0 && max === 100) {\n        return cv * w / 100 - cv * thumbWidth / 100; // because the thumb is 16px wide\n      } else {\n        var p = cv * 100 / max;\n        var pp = p * w / 100;\n        pp = pp - p * thumbWidth / 100;\n        return pp;\n      }\n    },\n    init: function init() {\n      var _this = this;\n\n      var prefixCls = this.prefixCls;\n      var wrp = document.createElement('div');\n      var preBar = document.createElement('p');\n      wrp.className = prefixCls + '-range-barCnt';\n      preBar.className = prefixCls + '-range-preBar';\n      this.$refs.range.className = this.$refs.range.className.length ? this.$refs.range.className + ' colorized' : 'colorized';\n      this.$refs.range.parentNode.replaceChild(wrp, this.$refs.range);\n      wrp.appendChild(this.$refs.range);\n      wrp.appendChild(preBar);\n      var r = this.$refs.range;\n      this._inputEvent = EventListener.listen(r, 'input', function () {\n        preBar.style.width = _this.getVal() + 'px';\n      });\n      this.$nextTick(function () {\n        preBar.style.width = _this.getVal() + 'px';\n      });\n      this.$refs.range.value = this.value;\n      this.preBarElement = preBar;\n    },\n    _resizeEvent: function _resizeEvent() {\n      this.update();\n    }\n  },\n  computed: {\n    styleObj: function styleObj() {\n      var style = {};\n      var l = this.value - this.min;\n      var r = this.max - this.min;\n      style['transform'] = 'translate(calc(' + l / r + ' * 11.25em - 50%))';\n      return style;\n    }\n  },\n  created: function created() {\n    var _this2 = this;\n\n    this.$on('Va@rangeIsMobile', function (val) {\n      if (val === true) {\n        _this2.isMobile = true;\n      } else {\n        _this2.isMobile = false;\n      }\n    });\n    this.dispatch('VaLayoutManager', 'Va@requestIsMobile', true);\n  },\n  mounted: function mounted() {\n    this.init();\n    window.addEventListener('resize', this._resizeEvent, false);\n  },\n  beforeDestroy: function beforeDestroy() {\n    if (this._inputEvent) this._inputEvent.remove();\n    if (this._mouseupEvent) this._mouseupEvent.remove();\n    if (this._mousedownEvent) this._mousedownEvent.remove();\n    /**\n     * This event was not created using EventListener.\n     */\n\n    window.removeEventListener('resize', this._resizeEvent, false);\n  }\n};",{"version":3,"sources":["VaRange.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"wrap\" :style=\"{width: width + 'px' || '100%'}\">\n    <input ref=\"range\" :class=\"`${prefixCls}-range`\" :value=\"currentValue\" type=\"range\" :min=\"min\" :max=\"max\" :step=\"step\" @input=\"onInput\" />\n    <transition name=\"fade\">\n      <div v-if=\"showoutput\" class=\"output_position\">\n        <output for=\"r\" ></output>\n      </div>\n    </transition>\n  </div>\n</template>\n\n<script>\nimport events from '../utils/events'\nimport EventListener from '../utils/EventListener.js'\n\nexport default {\n  name: 'VaRange',\n  mixins: [events],\n  props: {\n    min: {\n      type: [String, Number],\n      default: '0',\n      required: false\n    },\n    max: {\n      type: [String, Number],\n      default: '100',\n      required: false\n    },\n    step: {\n      type: [String, Number],\n      default: '1',\n      required: false\n    },\n    value: {\n      type: [Number, String],\n      default: 0,\n      required: false\n    },\n    width: {\n      type: Number\n    },\n    prefixCls: {\n      type: String,\n      default: 'va'\n    }\n  },\n  data () {\n    let value = this.value\n    return {\n      showoutput: false,\n      currentValue: value,\n      preBarElement: null,\n      isMobile: false\n    }\n  },\n  watch: {\n    currentValue (val) {\n      this.$emit('input', val)\n      this.$emit('change', val)\n      this.update()\n    },\n    value (val) {\n      this.currentValue = parseInt(val)\n    },\n    min (val) {\n      this.update()\n    },\n    max (val) {\n      this.update()\n    },\n    step (val) {\n      this.update()\n    }\n  },\n  methods: {\n    update () {\n      this.preBarElement.style.width = this.getVal() + 'px'\n    },\n    onInput (e) {\n      this.currentValue = parseInt(e.target.value)\n      this.$emit('input', parseInt(e.target.value))\n    },\n    getVal () {\n      var w = parseInt(this.$refs.range.clientWidth, 10)\n      let cv = parseInt(this.currentValue, 10)\n      let min = parseInt(this.min, 10)\n      let max = parseInt(this.max, 10)\n\n      /**\n      *  I wonder if there's a way to figure out the width of the runnable track..\n      *  Right now, we listen for isMobile from LayoutManager.\n      *  Width is 16px on desktop, 28px on mobile.\n      */\n\n      let thumbWidth\n      this.isMobile ? thumbWidth = 28 : thumbWidth = 16\n\n      max = max - min\n      cv = cv - min\n      min = min - min\n\n      if (min === 0 && max === 100) {\n        return cv * w / 100 - (cv * thumbWidth / 100) // because the thumb is 16px wide\n      } else {\n        let p = cv * 100 / max\n        let pp = p * w / 100\n        pp = pp - (p * thumbWidth / 100)\n\n        return pp\n      }\n    },\n    init () {\n      let {prefixCls} = this\n      var wrp = document.createElement('div')\n      var preBar = document.createElement('p')\n\n      wrp.className = prefixCls + '-range-barCnt'\n      preBar.className = prefixCls + '-range-preBar'\n\n      this.$refs.range.className = this.$refs.range.className.length ? (this.$refs.range.className + ' colorized') : 'colorized'\n      this.$refs.range.parentNode.replaceChild(wrp, this.$refs.range)\n\n      wrp.appendChild(this.$refs.range)\n      wrp.appendChild(preBar)\n\n      let r = this.$refs.range\n      this._inputEvent = EventListener.listen(r, 'input', () => {\n        preBar.style.width = this.getVal() + 'px'\n      })\n\n      this.$nextTick(() => {\n        preBar.style.width = this.getVal() + 'px'\n      })\n\n      this.$refs.range.value = this.value\n      this.preBarElement = preBar\n    },\n    _resizeEvent () {\n      this.update()\n    }\n  },\n  computed: {\n    styleObj () {\n      let style = {}\n\n      let l = this.value - this.min\n      let r = this.max - this.min\n\n      style['transform'] = 'translate(calc(' + l / r + ' * 11.25em - 50%))'\n\n      return style\n    }\n  },\n  created () {\n    this.$on('Va@rangeIsMobile', (val) => {\n      if (val === true) {\n        this.isMobile = true\n      } else {\n        this.isMobile = false\n      }\n    })\n    this.dispatch('VaLayoutManager', 'Va@requestIsMobile', true)\n  },\n  mounted () {\n    this.init()\n    window.addEventListener('resize', this._resizeEvent, false)\n  },\n  beforeDestroy () {\n    if (this._inputEvent) this._inputEvent.remove()\n    if (this._mouseupEvent) this._mouseupEvent.remove()\n    if (this._mousedownEvent) this._mousedownEvent.remove()\n\n    /**\n     * This event was not created using EventListener.\n     */\n    window.removeEventListener('resize', this._resizeEvent, false)\n  }\n}\n</script>\n"],"sourceRoot":"node_modules/vue-atlas/src/Range"}]}