{"remainingRequest":"/media/itsd/ITSD/Projects/wilfried/node_modules/vue-loader/lib/index.js??vue-loader-options!/media/itsd/ITSD/Projects/wilfried/node_modules/vue-atlas/src/Topbar/VaTopbar.vue?vue&type=script&lang=js&","dependencies":[{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/vue-atlas/src/Topbar/VaTopbar.vue","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/babel-loader/lib/index.js","mtime":1526583314000},{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport events from '../utils/events'\n\nexport default {\n  name: 'VaTopbar',\n  mixins: [events],\n  props: {\n    theme: {\n      type: String,\n      default: 'blue',\n      required: false,\n      validator (v) {\n        return [\n          'default',\n          'white',\n          'blue',\n          'dark',\n          'darker',\n          'purple'\n        ]\n      }\n    },\n    prefixCls: {\n      type: String,\n      default: 'va'\n    }\n  },\n  data () {\n    let t = this.theme\n    return {\n      currentDesktopMinimumWidth: 0,\n      currentDesktopMargin: 0,\n      currentContentWidth: 0,\n      currentTopbarHeight: 0,\n      currentMinibarWidth: 0,\n      currentSidebarWidth: 0,\n      sidebarPriority: false,\n      minibarPriority: false,\n      currentWindowWidth: 0,\n      topbarPriority: false,\n      topbarPadded: false,\n      isReverse: false,\n      isMobile: false,\n      isSplit: false,\n      isRTL: false,\n      th: t\n    }\n  },\n  mounted () {\n    /**\n     * This needs to be wrapped in a short setTimeout to give\n     * LayoutManager time to call enableReceivers().\n     */\n    setTimeout(() => {\n      this.dispatch('VaLayoutManager', 'Va@configTopbarThemeChange', this.th)\n    }, 10)\n  },\n  created () {\n    this.$on('Va@topbarPresenceCheck', (val) => { this.dispatch('VaLayoutManager', 'Va@topbarPresenceReply', true) })\n    this.$on('Va@desktopMinimumWidthChange', (val) => { this.currentDesktopMinimumWidth = val })\n    this.$on('Va@desktopMarginChange', (val) => { this.currentDesktopMargin = val })\n    this.$on('Va@minibarWidthChange', (val) => { this.currentMinibarWidth = val })\n    this.$on('Va@topbarHeightChange', (val) => { this.currentTopbarHeight = val })\n    this.$on('Va@contentWidthChange', (val) => { this.currentContentWidth = val })\n    this.$on('Va@sidebarWidthChange', (val) => { this.currentSidebarWidth = val })\n    this.$on('Va@sidebarPriorityChange', (val) => { this.sidebarPriority = val })\n    this.$on('Va@minibarPriorityChange', (val) => { this.minibarPriority = val })\n    this.$on('Va@windowWidthChange', (val) => { this.currentWindowWidth = val })\n    this.$on('Va@topbarPriorityChange', (val) => { this.topbarPriority = val })\n    this.$on('Va@topbarPaddedChange', (val) => { this.topbarPadded = val })\n    this.$on('Va@reverseChange', (val) => { this.isReverse = val })\n    this.$on('Va@topbarIsMobile', (val) => { this.isMobile = val })\n    this.$on('Va@topbarThemeChange', (val) => { this.th = val })\n    this.$on('Va@splitChange', (val) => { this.isSplit = val })\n    this.$on('Va@rtlChange', (val) => { this.isRTL = val })\n  },\n  beforeDestroy () {\n    this.dispatch('VaLayoutManager', 'Va@topbarDisconnect', true)\n  },\n  computed: {\n    classObj () {\n      let {prefixCls, th} = this\n      let klass = {}\n\n      klass[prefixCls + '-topbar'] = true\n      klass[prefixCls + '-topbar--theme-' + th] = true\n\n      return klass\n    },\n    styleObj () {\n      let dmw = parseInt(this.currentDesktopMinimumWidth)\n      let dm = parseInt(this.currentDesktopMargin)\n      let th = parseInt(this.currentTopbarHeight)\n      let sw = parseInt(this.currentSidebarWidth)\n      let cw = parseInt(this.currentContentWidth)\n      let mw = parseInt(this.currentMinibarWidth)\n      let sp = this.sidebarPriority\n      let mp = this.minibarPriority\n      let tp = this.topbarPriority\n      let tpad = this.topbarPadded\n      let reverse = this.isReverse\n      let mobile = this.isMobile\n      let split = this.isSplit\n      let rtl = this.isRTL\n      let style = {}\n\n      style['height'] = th + 'px'\n      style['left'] = '0px'\n      style['right'] = '0px'\n\n      /**\n       * Adjust the margins if content width is smaller than\n       * desktop minimum width.\n       */\n      if (!mobile) {\n        if (cw < dmw) {\n          let x = dmw - cw\n          dm = dm - (x / 2)\n        }\n      } else {\n        dm = 0\n        dmw = 0\n      }\n\n      /**\n       * If a minimum desktop width is set\n       */\n      if (dmw !== 0) {\n        style['min-width'] = (dmw - mw - sw) + 'px'\n      } else {\n        style['min-width'] = '0px'\n      }\n\n      /**\n       * Ready to be thoroughly confused?\n       */\n      if (sp) {\n        if (split) {\n          if (reverse) {\n            if (mp) {\n              style['left'] = (dm + sw) + 'px'\n              style['right'] = (dm + mw) + 'px'\n            } else {\n              style['left'] = (dm + sw) + 'px'\n              style['right'] = dm + 'px'\n            }\n          } else {\n            if (mp) {\n              style['left'] = (dm + mw) + 'px'\n              style['right'] = (dm + sw) + 'px'\n            } else {\n              style['left'] = dm + 'px'\n              style['right'] = (dm + sw) + 'px'\n            }\n          }\n        } else {\n          if (reverse) {\n            if (mp) {\n              style['left'] = (sw + mw + dm) + 'px'\n              style['right'] = dm + 'px'\n            } else {\n              style['left'] = (dm + sw) + 'px'\n              style['right'] = dm + 'px'\n            }\n          } else {\n            if (mp) {\n              style['left'] = (sw + mw + dm) + 'px'\n              style['right'] = dm + 'px'\n            } else {\n              style['left'] = (sw + mw + dm) + 'px'\n              style['right'] = dm + 'px'\n            }\n          }\n        }\n      }\n\n      if (!sp) {\n        if (split) {\n          if (reverse) {\n            if (mp) {\n              style['left'] = dm + 'px'\n              style['right'] = (dm + mw) + 'px'\n            } else {\n              style['left'] = dm + 'px'\n              style['right'] = dm + 'px'\n            }\n          } else {\n            if (mp) {\n              style['left'] = (dm + mw) + 'px'\n              style['right'] = dm + 'px'\n            } else {\n              style['left'] = dm + 'px'\n              style['right'] = dm + 'px'\n            }\n          }\n        } else {\n          if (reverse) {\n            if (mp) {\n              style['left'] = (sw + mw + dm) + 'px'\n              style['right'] = dm + 'px'\n            } else {\n              style['left'] = dm + 'px'\n              style['right'] = dm + 'px'\n            }\n          } else {\n            if (mp) {\n              style['left'] = (dm + mw) + 'px'\n              style['right'] = dm + 'px'\n            } else {\n              style['left'] = dm + 'px'\n              style['right'] = dm + 'px'\n            }\n          }\n        }\n      }\n\n      if (rtl) {\n        // rtl only effective when not split\n        if (!split) {\n          if (reverse) {\n            if (sp) {\n              style['left'] = dm + 'px'\n              style['right'] = (sw + mw + dm) + 'px'\n            } else {\n              if (mp) {\n                style['left'] = dm + 'px'\n                style['right'] = (dm + mw) + 'px'\n              }\n            }\n          } else {\n            if (sp) {\n              if (mp) {\n                style['right'] = (mw + sw + dm) + 'px'\n                style['left'] = dm + 'px'\n              } else {\n                style['right'] = (dm + sw) + 'px'\n                style['left'] = dm + 'px'\n              }\n            } else {\n              if (mp) {\n                style['right'] = (mw + sw + dm) + 'px'\n                style['left'] = dm + 'px'\n              }\n            }\n          }\n        }\n      }\n\n      if (tp) {\n        style['left'] = '0px'\n        style['right'] = '0px'\n\n        if (tpad) {\n          style['padding-left'] = (dm + 8) + 'px'\n          style['padding-right'] = (dm + 8) + 'px'\n          /**\n           * Why 8px?\n           * Because a 50px Minibar looks best, and if the\n           * first or last element in a padded topbar is\n           * an icon, this lines it up nicely with the\n           * icons in the Minibar.\n           */\n        }\n      }\n\n      // Less than 40 and we don't want overflow.\n      // Greater than 40 and we do, because we don't want\n      // to hide dropdown menus.\n      // That means..\n      // Dropdown menus in the topbar won't appear when the\n      // topbar has a height of less than 40px.\n      if (th < 40) {\n        style['overflow'] = 'hidden'\n      } else {\n        style['overflow'] = 'visible'\n      }\n\n      return style\n    }\n  }\n}\n",{"version":3,"sources":["VaTopbar.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAifile":"VaTopbar.vue","sourceRoot":"node_modules/vue-atlas/src/Topbar","sourcesContent":["<template>\n  <div :class=\"classObj\" :style=\"styleObj\">\n    <div :class=\"`${prefixCls}-topbar-inner`\">\n      <div :class=\"`${prefixCls}-topbar-left`\">\n        <slot name=\"left\"/>\n      </div>\n      <div :class=\"`${prefixCls}-topbar-center`\">\n        <slot name=\"center\"/>\n      </div>\n      <div :class=\"`${prefixCls}-topbar-right`\">\n        <slot name=\"right\"/>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport events from '../utils/events'\n\nexport default {\n  name: 'VaTopbar',\n  mixins: [events],\n  props: {\n    theme: {\n      type: String,\n      default: 'blue',\n      required: false,\n      validator (v) {\n        return [\n          'default',\n          'white',\n          'blue',\n          'dark',\n          'darker',\n          'purple'\n        ]\n      }\n    },\n    prefixCls: {\n      type: String,\n      default: 'va'\n    }\n  },\n  data () {\n    let t = this.theme\n    return {\n      currentDesktopMinimumWidth: 0,\n      currentDesktopMargin: 0,\n      currentContentWidth: 0,\n      currentTopbarHeight: 0,\n      currentMinibarWidth: 0,\n      currentSidebarWidth: 0,\n      sidebarPriority: false,\n      minibarPriority: false,\n      currentWindowWidth: 0,\n      topbarPriority: false,\n      topbarPadded: false,\n      isReverse: false,\n      isMobile: false,\n      isSplit: false,\n      isRTL: false,\n      th: t\n    }\n  },\n  mounted () {\n    /**\n     * This needs to be wrapped in a short setTimeout to give\n     * LayoutManager time to call enableReceivers().\n     */\n    setTimeout(() => {\n      this.dispatch('VaLayoutManager', 'Va@configTopbarThemeChange', this.th)\n    }, 10)\n  },\n  created () {\n    this.$on('Va@topbarPresenceCheck', (val) => { this.dispatch('VaLayoutManager', 'Va@topbarPresenceReply', true) })\n    this.$on('Va@desktopMinimumWidthChange', (val) => { this.currentDesktopMinimumWidth = val })\n    this.$on('Va@desktopMarginChange', (val) => { this.currentDesktopMargin = val })\n    this.$on('Va@minibarWidthChange', (val) => { this.currentMinibarWidth = val })\n    this.$on('Va@topbarHeightChange', (val) => { this.currentTopbarHeight = val })\n    this.$on('Va@contentWidthChange', (val) => { this.currentContentWidth = val })\n    this.$on('Va@sidebarWidthChange', (val) => { this.currentSidebarWidth = val })\n    this.$on('Va@sidebarPriorityChange', (val) => { this.sidebarPriority = val })\n    this.$on('Va@minibarPriorityChange', (val) => { this.minibarPriority = val })\n    this.$on('Va@windowWidthChange', (val) => { this.currentWindowWidth = val })\n    this.$on('Va@topbarPriorityChange', (val) => { this.topbarPriority = val })\n    this.$on('Va@topbarPaddedChange', (val) => { this.topbarPadded = val })\n    this.$on('Va@reverseChange', (val) => { this.isReverse = val })\n    this.$on('Va@topbarIsMobile', (val) => { this.isMobile = val })\n    this.$on('Va@topbarThemeChange', (val) => { this.th = val })\n    this.$on('Va@splitChange', (val) => { this.isSplit = val })\n    this.$on('Va@rtlChange', (val) => { this.isRTL = val })\n  },\n  beforeDestroy () {\n    this.dispatch('VaLayoutManager', 'Va@topbarDisconnect', true)\n  },\n  computed: {\n    classObj () {\n      let {prefixCls, th} = this\n      let klass = {}\n\n      klass[prefixCls + '-topbar'] = true\n      klass[prefixCls + '-topbar--theme-' + th] = true\n\n      return klass\n    },\n    styleObj () {\n      let dmw = parseInt(this.currentDesktopMinimumWidth)\n      let dm = parseInt(this.currentDesktopMargin)\n      let th = parseInt(this.currentTopbarHeight)\n      let sw = parseInt(this.currentSidebarWidth)\n      let cw = parseInt(this.currentContentWidth)\n      let mw = parseInt(this.currentMinibarWidth)\n      let sp = this.sidebarPriority\n      let mp = this.minibarPriority\n      let tp = this.topbarPriority\n      let tpad = this.topbarPadded\n      let reverse = this.isReverse\n      let mobile = this.isMobile\n      let split = this.isSplit\n      let rtl = this.isRTL\n      let style = {}\n\n      style['height'] = th + 'px'\n      style['left'] = '0px'\n      style['right'] = '0px'\n\n      /**\n       * Adjust the margins if content width is smaller than\n       * desktop minimum width.\n       */\n      if (!mobile) {\n        if (cw < dmw) {\n          let x = dmw - cw\n          dm = dm - (x / 2)\n        }\n      } else {\n        dm = 0\n        dmw = 0\n      }\n\n      /**\n       * If a minimum desktop width is set\n       */\n      if (dmw !== 0) {\n        style['min-width'] = (dmw - mw - sw) + 'px'\n      } else {\n        style['min-width'] = '0px'\n      }\n\n      /**\n       * Ready to be thoroughly confused?\n       */\n      if (sp) {\n        if (split) {\n          if (reverse) {\n            if (mp) {\n              style['left'] = (dm + sw) + 'px'\n              style['right'] = (dm + mw) + 'px'\n            } else {\n              style['left'] = (dm + sw) + 'px'\n              style['right'] = dm + 'px'\n            }\n          } else {\n            if (mp) {\n              style['left'] = (dm + mw) + 'px'\n              style['right'] = (dm + sw) + 'px'\n            } else {\n              style['left'] = dm + 'px'\n              style['right'] = (dm + sw) + 'px'\n            }\n          }\n        } else {\n          if (reverse) {\n            if (mp) {\n              style['left'] = (sw + mw + dm) + 'px'\n              style['right'] = dm + 'px'\n            } else {\n              style['left'] = (dm + sw) + 'px'\n              style['right'] = dm + 'px'\n            }\n          } else {\n            if (mp) {\n              style['left'] = (sw + mw + dm) + 'px'\n              style['right'] = dm + 'px'\n            } else {\n              style['left'] = (sw + mw + dm) + 'px'\n              style['right'] = dm + 'px'\n            }\n          }\n        }\n      }\n\n      if (!sp) {\n        if (split) {\n          if (reverse) {\n            if (mp) {\n              style['left'] = dm + 'px'\n              style['right'] = (dm + mw) + 'px'\n            } else {\n              style['left'] = dm + 'px'\n              style['right'] = dm + 'px'\n            }\n          } else {\n            if (mp) {\n              style['left'] = (dm + mw) + 'px'\n              style['right'] = dm + 'px'\n            } else {\n              style['left'] = dm + 'px'\n              style['right'] = dm + 'px'\n            }\n          }\n        } else {\n          if (reverse) {\n            if (mp) {\n              style['left'] = (sw + mw + dm) + 'px'\n              style['right'] = dm + 'px'\n            } else {\n              style['left'] = dm + 'px'\n              style['right'] = dm + 'px'\n            }\n          } else {\n            if (mp) {\n              style['left'] = (dm + mw) + 'px'\n              style['right'] = dm + 'px'\n            } else {\n              style['left'] = dm + 'px'\n              style['right'] = dm + 'px'\n            }\n          }\n        }\n      }\n\n      if (rtl) {\n        // rtl only effective when not split\n        if (!split) {\n          if (reverse) {\n            if (sp) {\n              style['left'] = dm + 'px'\n              style['right'] = (sw + mw + dm) + 'px'\n            } else {\n              if (mp) {\n                style['left'] = dm + 'px'\n                style['right'] = (dm + mw) + 'px'\n              }\n            }\n          } else {\n            if (sp) {\n              if (mp) {\n                style['right'] = (mw + sw + dm) + 'px'\n                style['left'] = dm + 'px'\n              } else {\n                style['right'] = (dm + sw) + 'px'\n                style['left'] = dm + 'px'\n              }\n            } else {\n              if (mp) {\n                style['right'] = (mw + sw + dm) + 'px'\n                style['left'] = dm + 'px'\n              }\n            }\n          }\n        }\n      }\n\n      if (tp) {\n        style['left'] = '0px'\n        style['right'] = '0px'\n\n        if (tpad) {\n          style['padding-left'] = (dm + 8) + 'px'\n          style['padding-right'] = (dm + 8) + 'px'\n          /**\n           * Why 8px?\n           * Because a 50px Minibar looks best, and if the\n           * first or last element in a padded topbar is\n           * an icon, this lines it up nicely with the\n           * icons in the Minibar.\n           */\n        }\n      }\n\n      // Less than 40 and we don't want overflow.\n      // Greater than 40 and we do, because we don't want\n      // to hide dropdown menus.\n      // That means..\n      // Dropdown menus in the topbar won't appear when the\n      // topbar has a height of less than 40px.\n      if (th < 40) {\n        style['overflow'] = 'hidden'\n      } else {\n        style['overflow'] = 'visible'\n      }\n\n      return style\n    }\n  }\n}\n</script>\n"]}]}