{"remainingRequest":"/media/itsd/ITSD/Projects/test/node_modules/vue-loader/lib/index.js??vue-loader-options!/media/itsd/ITSD/Projects/test/node_modules/vue-atlas/src/Range/VaRange.vue?vue&type=script&lang=js&","dependencies":[{"path":"/media/itsd/ITSD/Projects/test/node_modules/vue-atlas/src/Range/VaRange.vue","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/test/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/test/node_modules/babel-loader/lib/index.js","mtime":1526583314000},{"path":"/media/itsd/ITSD/Projects/test/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/test/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport events from '../utils/events'\nimport EventListener from '../utils/EventListener.js'\n\nexport default {\n  name: 'VaRange',\n  mixins: [events],\n  props: {\n    min: {\n      type: [String, Number],\n      default: '0',\n      required: false\n    },\n    max: {\n      type: [String, Number],\n      default: '100',\n      required: false\n    },\n    step: {\n      type: [String, Number],\n      default: '1',\n      required: false\n    },\n    value: {\n      type: [Number, String],\n      default: 0,\n      required: false\n    },\n    width: {\n      type: Number\n    },\n    prefixCls: {\n      type: String,\n      default: 'va'\n    }\n  },\n  data () {\n    let value = this.value\n    return {\n      showoutput: false,\n      currentValue: value,\n      preBarElement: null,\n      isMobile: false\n    }\n  },\n  watch: {\n    currentValue (val) {\n      this.$emit('input', val)\n      this.$emit('change', val)\n      this.update()\n    },\n    value (val) {\n      this.currentValue = parseInt(val)\n    },\n    min (val) {\n      this.update()\n    },\n    max (val) {\n      this.update()\n    },\n    step (val) {\n      this.update()\n    }\n  },\n  methods: {\n    update () {\n      this.preBarElement.style.width = this.getVal() + 'px'\n    },\n    onInput (e) {\n      this.currentValue = parseInt(e.target.value)\n      this.$emit('input', parseInt(e.target.value))\n    },\n    getVal () {\n      var w = parseInt(this.$refs.range.clientWidth, 10)\n      let cv = parseInt(this.currentValue, 10)\n      let min = parseInt(this.min, 10)\n      let max = parseInt(this.max, 10)\n\n      /**\n      *  I wonder if there's a way to figure out the width of the runnable track..\n      *  Right now, we listen for isMobile from LayoutManager.\n      *  Width is 16px on desktop, 28px on mobile.\n      */\n\n      let thumbWidth\n      this.isMobile ? thumbWidth = 28 : thumbWidth = 16\n\n      max = max - min\n      cv = cv - min\n      min = min - min\n\n      if (min === 0 && max === 100) {\n        return cv * w / 100 - (cv * thumbWidth / 100) // because the thumb is 16px wide\n      } else {\n        let p = cv * 100 / max\n        let pp = p * w / 100\n        pp = pp - (p * thumbWidth / 100)\n\n        return pp\n      }\n    },\n    init () {\n      let {prefixCls} = this\n      var wrp = document.createElement('div')\n      var preBar = document.createElement('p')\n\n      wrp.className = prefixCls + '-range-barCnt'\n      preBar.className = prefixCls + '-range-preBar'\n\n      this.$refs.range.className = this.$refs.range.className.length ? (this.$refs.range.className + ' colorized') : 'colorized'\n      this.$refs.range.parentNode.replaceChild(wrp, this.$refs.range)\n\n      wrp.appendChild(this.$refs.range)\n      wrp.appendChild(preBar)\n\n      let r = this.$refs.range\n      this._inputEvent = EventListener.listen(r, 'input', () => {\n        preBar.style.width = this.getVal() + 'px'\n      })\n\n      this.$nextTick(() => {\n        preBar.style.width = this.getVal() + 'px'\n      })\n\n      this.$refs.range.value = this.value\n      this.preBarElement = preBar\n    },\n    _resizeEvent () {\n      this.update()\n    }\n  },\n  computed: {\n    styleObj () {\n      let style = {}\n\n      let l = this.value - this.min\n      let r = this.max - this.min\n\n      style['transform'] = 'translate(calc(' + l / r + ' * 11.25em - 50%))'\n\n      return style\n    }\n  },\n  created () {\n    this.$on('Va@rangeIsMobile', (val) => {\n      if (val === true) {\n        this.isMobile = true\n      } else {\n        this.isMobile = false\n      }\n    })\n    this.dispatch('VaLayoutManager', 'Va@requestIsMobile', true)\n  },\n  mounted () {\n    this.init()\n    window.addEventListener('resize', this._resizeEvent, false)\n  },\n  beforeDestroy () {\n    if (this._inputEvent) this._inputEvent.remove()\n    if (this._mouseupEvent) this._mouseupEvent.remove()\n    if (this._mousedownEvent) this._mousedownEvent.remove()\n\n    /**\n     * This event was not created using EventListener.\n     */\n    window.removeEventListener('resize', this._resizeEvent, false)\n  }\n}\n",{"version":3,"sources":["VaRange.vue"],"names":[],"mappings":";;;;;;;;;;;;AAYA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"VaRange.vue","sourceRoot":"node_modules/vue-atlas/src/Range","sourcesContent":["<template>\n  <div class=\"wrap\" :style=\"{width: width + 'px' || '100%'}\">\n    <input ref=\"range\" :class=\"`${prefixCls}-range`\" :value=\"currentValue\" type=\"range\" :min=\"min\" :max=\"max\" :step=\"step\" @input=\"onInput\" />\n    <transition name=\"fade\">\n      <div v-if=\"showoutput\" class=\"output_position\">\n        <output for=\"r\" ></output>\n      </div>\n    </transition>\n  </div>\n</template>\n\n<script>\nimport events from '../utils/events'\nimport EventListener from '../utils/EventListener.js'\n\nexport default {\n  name: 'VaRange',\n  mixins: [events],\n  props: {\n    min: {\n      type: [String, Number],\n      default: '0',\n      required: false\n    },\n    max: {\n      type: [String, Number],\n      default: '100',\n      required: false\n    },\n    step: {\n      type: [String, Number],\n      default: '1',\n      required: false\n    },\n    value: {\n      type: [Number, String],\n      default: 0,\n      required: false\n    },\n    width: {\n      type: Number\n    },\n    prefixCls: {\n      type: String,\n      default: 'va'\n    }\n  },\n  data () {\n    let value = this.value\n    return {\n      showoutput: false,\n      currentValue: value,\n      preBarElement: null,\n      isMobile: false\n    }\n  },\n  watch: {\n    currentValue (val) {\n      this.$emit('input', val)\n      this.$emit('change', val)\n      this.update()\n    },\n    value (val) {\n      this.currentValue = parseInt(val)\n    },\n    min (val) {\n      this.update()\n    },\n    max (val) {\n      this.update()\n    },\n    step (val) {\n      this.update()\n    }\n  },\n  methods: {\n    update () {\n      this.preBarElement.style.width = this.getVal() + 'px'\n    },\n    onInput (e) {\n      this.currentValue = parseInt(e.target.value)\n      this.$emit('input', parseInt(e.target.value))\n    },\n    getVal () {\n      var w = parseInt(this.$refs.range.clientWidth, 10)\n      let cv = parseInt(this.currentValue, 10)\n      let min = parseInt(this.min, 10)\n      let max = parseInt(this.max, 10)\n\n      /**\n      *  I wonder if there's a way to figure out the width of the runnable track..\n      *  Right now, we listen for isMobile from LayoutManager.\n      *  Width is 16px on desktop, 28px on mobile.\n      */\n\n      let thumbWidth\n      this.isMobile ? thumbWidth = 28 : thumbWidth = 16\n\n      max = max - min\n      cv = cv - min\n      min = min - min\n\n      if (min === 0 && max === 100) {\n        return cv * w / 100 - (cv * thumbWidth / 100) // because the thumb is 16px wide\n      } else {\n        let p = cv * 100 / max\n        let pp = p * w / 100\n        pp = pp - (p * thumbWidth / 100)\n\n        return pp\n      }\n    },\n    init () {\n      let {prefixCls} = this\n      var wrp = document.createElement('div')\n      var preBar = document.createElement('p')\n\n      wrp.className = prefixCls + '-range-barCnt'\n      preBar.className = prefixCls + '-range-preBar'\n\n      this.$refs.range.className = this.$refs.range.className.length ? (this.$refs.range.className + ' colorized') : 'colorized'\n      this.$refs.range.parentNode.replaceChild(wrp, this.$refs.range)\n\n      wrp.appendChild(this.$refs.range)\n      wrp.appendChild(preBar)\n\n      let r = this.$refs.range\n      this._inputEvent = EventListener.listen(r, 'input', () => {\n        preBar.style.width = this.getVal() + 'px'\n      })\n\n      this.$nextTick(() => {\n        preBar.style.width = this.getVal() + 'px'\n      })\n\n      this.$refs.range.value = this.value\n      this.preBarElement = preBar\n    },\n    _resizeEvent () {\n      this.update()\n    }\n  },\n  computed: {\n    styleObj () {\n      let style = {}\n\n      let l = this.value - this.min\n      let r = this.max - this.min\n\n      style['transform'] = 'translate(calc(' + l / r + ' * 11.25em - 50%))'\n\n      return style\n    }\n  },\n  created () {\n    this.$on('Va@rangeIsMobile', (val) => {\n      if (val === true) {\n        this.isMobile = true\n      } else {\n        this.isMobile = false\n      }\n    })\n    this.dispatch('VaLayoutManager', 'Va@requestIsMobile', true)\n  },\n  mounted () {\n    this.init()\n    window.addEventListener('resize', this._resizeEvent, false)\n  },\n  beforeDestroy () {\n    if (this._inputEvent) this._inputEvent.remove()\n    if (this._mouseupEvent) this._mouseupEvent.remove()\n    if (this._mousedownEvent) this._mousedownEvent.remove()\n\n    /**\n     * This event was not created using EventListener.\n     */\n    window.removeEventListener('resize', this._resizeEvent, false)\n  }\n}\n</script>\n"]}]}