{"remainingRequest":"/media/itsd/ITSD/Projects/wilfried/node_modules/vue-loader/lib/index.js??vue-loader-options!/media/itsd/ITSD/Projects/wilfried/node_modules/vue-atlas/src/Dropdown/VaDropdown.vue?vue&type=script&lang=js&","dependencies":[{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/vue-atlas/src/Dropdown/VaDropdown.vue","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/babel-loader/lib/index.js","mtime":1526583314000},{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport EventListener from '../utils/EventListener'\nimport VaCollapseTransition from '../VaCollapseTransition'\n\nexport default {\n  name: 'VaDropdown',\n  props: {\n    show: {\n      type: Boolean,\n      default: false,\n      required: false,\n      note: 'If true, the dropdown content is visible.'\n    },\n    triggerEvent: {\n      type: String,\n      default: 'click',\n      required: false,\n      note: 'Trigger method. Can be either \\'click\\' or \\'hover\\'.'\n    },\n    clickClose: {\n      type: Boolean,\n      default: false,\n      required: false,\n      note: `If true, require that the trigger element be clicked\n            again in order to close the dropdown menu. Otherwise,\n            clicking anywhere else in the window will close it.`\n    },\n    effect: {\n      type: String,\n      default: 'fadeDown',\n      required: false,\n      note: 'The effect to use.'\n    },\n    prefixCls: {\n      type: String,\n      default: 'va'\n    }\n  },\n  data () {\n    let show = this.show\n    return {\n      isShow: show\n    }\n  },\n  methods: {\n    open () {\n      this.isShow = true\n      this.$emit('show')\n    },\n    close () {\n      this.isShow = false\n      this.$emit('hide')\n    },\n    toggle () {\n      this.isShow ? this.close() : this.open()\n      this.$emit('toggle')\n    },\n    onFocus () {\n    }\n  },\n  components: {\n    VaCollapseTransition\n  },\n  computed: {\n    classObj () {\n      let {prefixCls} = this\n      let klass = {}\n\n      klass[prefixCls + '-dropdown-selected'] = this.isShow\n\n      return klass\n    }\n  },\n  mounted () {\n    this.$nextTick(() => {\n      let el = this.$el\n      let trig = this.$refs.trigger.children[0]\n      if (this.triggerEvent === 'click') {\n        this._clickEvent = EventListener.listen(trig, 'click', this.toggle)\n        this._closeEvent = EventListener.listen(window, 'click', (e) => {\n          if (!this.clickClose && !el.contains(e.target)) {\n            this.close()\n          }\n        })\n      } else if (this.triggerEvent === 'hover') {\n        this._mouseenterEvent = EventListener.listen(trig, 'mouseenter', () => {\n          this.open()\n        })\n        this._closeEvent = EventListener.listen(this.$el, 'mouseleave', () => {\n          setTimeout(() => {\n            this.close()\n          }, 500)\n        })\n      }\n    })\n  },\n  beforeDestroy () {\n    if (this._closeEvent) this._closeEvent.remove()\n    if (this._clickEvent) this._clickEvent.remove()\n    if (this._mouseenterEvent) this._mouseenterEvent.remove()\n  }\n}\n",{"version":3,"sources":["VaDropdown.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAsBA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"VaDropdown.vue","sourceRoot":"node_modules/vue-atlas/src/Dropdown","sourcesContent":["<template>\n  <div :class=\"[`${prefixCls}-dropdown-con`, classObj]\">\n    <span ref=\"trigger\" :focus=\"onFocus\">\n      <slot name=\"trigger\" />\n    </span>\n\n    <transition :name=\"effect\" v-if=\"effect != 'collapse'\">\n      <ul v-va-position=\"isShow\" :class=\"`${prefixCls}-dropdown-menu`\" v-show=\"isShow\">\n        <slot />\n      </ul>\n    </transition>\n\n    <va-collapse-transition v-if=\"effect=='collapse'\">\n      <ul :class=\"`${prefixCls}-dropdown-menu`\" v-show=\"isShow\">\n        <slot />\n      </ul>\n    </va-collapse-transition>\n\n  </div>\n</template>\n\n<script>\nimport EventListener from '../utils/EventListener'\nimport VaCollapseTransition from '../VaCollapseTransition'\n\nexport default {\n  name: 'VaDropdown',\n  props: {\n    show: {\n      type: Boolean,\n      default: false,\n      required: false,\n      note: 'If true, the dropdown content is visible.'\n    },\n    triggerEvent: {\n      type: String,\n      default: 'click',\n      required: false,\n      note: 'Trigger method. Can be either \\'click\\' or \\'hover\\'.'\n    },\n    clickClose: {\n      type: Boolean,\n      default: false,\n      required: false,\n      note: `If true, require that the trigger element be clicked\n            again in order to close the dropdown menu. Otherwise,\n            clicking anywhere else in the window will close it.`\n    },\n    effect: {\n      type: String,\n      default: 'fadeDown',\n      required: false,\n      note: 'The effect to use.'\n    },\n    prefixCls: {\n      type: String,\n      default: 'va'\n    }\n  },\n  data () {\n    let show = this.show\n    return {\n      isShow: show\n    }\n  },\n  methods: {\n    open () {\n      this.isShow = true\n      this.$emit('show')\n    },\n    close () {\n      this.isShow = false\n      this.$emit('hide')\n    },\n    toggle () {\n      this.isShow ? this.close() : this.open()\n      this.$emit('toggle')\n    },\n    onFocus () {\n    }\n  },\n  components: {\n    VaCollapseTransition\n  },\n  computed: {\n    classObj () {\n      let {prefixCls} = this\n      let klass = {}\n\n      klass[prefixCls + '-dropdown-selected'] = this.isShow\n\n      return klass\n    }\n  },\n  mounted () {\n    this.$nextTick(() => {\n      let el = this.$el\n      let trig = this.$refs.trigger.children[0]\n      if (this.triggerEvent === 'click') {\n        this._clickEvent = EventListener.listen(trig, 'click', this.toggle)\n        this._closeEvent = EventListener.listen(window, 'click', (e) => {\n          if (!this.clickClose && !el.contains(e.target)) {\n            this.close()\n          }\n        })\n      } else if (this.triggerEvent === 'hover') {\n        this._mouseenterEvent = EventListener.listen(trig, 'mouseenter', () => {\n          this.open()\n        })\n        this._closeEvent = EventListener.listen(this.$el, 'mouseleave', () => {\n          setTimeout(() => {\n            this.close()\n          }, 500)\n        })\n      }\n    })\n  },\n  beforeDestroy () {\n    if (this._closeEvent) this._closeEvent.remove()\n    if (this._clickEvent) this._clickEvent.remove()\n    if (this._mouseenterEvent) this._mouseenterEvent.remove()\n  }\n}\n</script>\n\n<style lang=\"scss\">\n</style>\n"]}]}