{"remainingRequest":"/media/itsd/ITSD/Projects/test/node_modules/vue-loader/lib/index.js??vue-loader-options!/media/itsd/ITSD/Projects/test/node_modules/vue-atlas/src/Modal/VaModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"/media/itsd/ITSD/Projects/test/node_modules/vue-atlas/src/Modal/VaModal.vue","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/test/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/test/node_modules/babel-loader/lib/index.js","mtime":1526583314000},{"path":"/media/itsd/ITSD/Projects/test/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/test/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport getScrollBarWidth from '../utils/getScrollBarWidth'\nimport EventListener from '../utils/EventListener'\nimport VaButton from '../Button/VaButton'\nimport element from '../utils/element'\nimport localeMixin from '../Mixin/localeMixin'\n\nexport default {\n  name: 'VaModal',\n  mixins: [localeMixin('VaModal')],\n  props: {\n    title: {\n      type: String,\n      default: '',\n      required: false,\n      note: 'The title of the modal'\n    },\n    show: {\n      type: Boolean,\n      default: false,\n      required: false,\n      note: 'When false, the modal will not be shown'\n    },\n    width: {\n      type: Number,\n      default: 600,\n      required: false,\n      note: 'The width of the modal.'\n    },\n    effect: {\n      type: String,\n      default: 'fade-up',\n      required: false,\n      note: 'The css effect to apply to the modal.'\n    },\n    loading: {\n      type: Boolean,\n      default: false,\n      note: 'When true, modal shows its loading state/'\n    },\n    backdrop: {\n      type: Boolean,\n      default: true,\n      required: false\n    },\n    backdropClickable: {\n      type: Boolean,\n      default: true,\n      required: false,\n      note: 'When true, clicking the backdrop in a standard or custom modal will close the modal. This prop has no effect on alert or confirm modals.'\n    },\n    prefixCls: {\n      type: String,\n      default: 'va'\n    }\n  },\n  components: {\n    VaButton\n  },\n  mounted () {\n    const $body = document.querySelector('body')\n    $body.appendChild(this.$refs.modal)\n  },\n  beforeDestroy () {\n    const $body = document.querySelector('body')\n    $body.removeChild(this.$refs.modal)\n  },\n  computed: {\n    classObj () {\n      let {prefixCls, effect} = this\n      let klass = {}\n\n      klass[prefixCls + '-modal'] = true\n      klass[prefixCls + '-modal-' + effect] = true\n\n      return klass\n    },\n    styleObj () {\n      let {backdrop, numberOfParentModals} = this\n      let style = {}\n\n      if (!backdrop) {\n        style['background'] = 'none !important'\n      }\n\n      let topMargin = parseInt(numberOfParentModals) * 20\n      style['padding-top'] = topMargin + 'px'\n\n      return style\n    },\n    modalIsLoading () {\n      return this.loading\n    }\n  },\n  data () {\n    let show = this.show\n    return {\n      isShow: show,\n      focused: false,\n      numberOfParentModals: 0\n    }\n  },\n  watch: {\n    isShow (val) {\n      if (val) {\n        this.$emit('show', { type: 'show' })\n\n        let x = document.getElementsByClassName(this.prefixCls + '-modal-in')\n        this.numberOfParentModals = x.length\n      } else {\n        this.$emit('hide', { type: 'hide' })\n      }\n\n      const el = this.$el\n      const body = document.body\n      const scrollBarWidth = getScrollBarWidth()\n      if (val) {\n        el.querySelector('.' + this.prefixCls + '-modal-content').focus()\n        el.style.display = 'block'\n        // this timeout is required for opacity transition\n        setTimeout(() => { element.addClass(el, this.prefixCls + '-modal-in') }, 20)\n        element.addClass(body, this.prefixCls + '-modal-open')\n        if (!scrollBarWidth) {\n          element.addClass(body, this.prefixCls + '-modal-hide-y')\n        }\n        if (this.backdropClickable) {\n          this._blurModalContentEvent = EventListener.listen(this.$el, 'click', (e) => {\n            if (e.target === el) this.isShow = false\n          })\n        }\n      } else {\n        if (this._blurModalContentEvent) this._blurModalContentEvent.remove()\n        element.removeClass(el, this.prefixCls + '-modal-in')\n        element.addClass(el, this.prefixCls + '-modal-out')\n        setTimeout(() => {\n          el.style.display = 'none'\n          element.removeClass(body, this.prefixCls + '-modal-open')\n          element.removeClass(body, this.prefixCls + '-modal-hide-y')\n          element.removeClass(el, this.prefixCls + '-modal-out')\n          body.style.paddingRight = '0'\n          this.$emit('closed', { type: 'closed' })\n        }, 300)\n      }\n    }\n  },\n  methods: {\n    close () {\n      this.isShow = false\n    },\n    open () {\n      this.isShow = true\n    },\n    confirm () {\n      this.$emit('confirm', { type: 'confirm' })\n    }\n  }\n}\n",{"version":3,"sources":["VaModal.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAofile":"VaModal.vue","sourceRoot":"node_modules/vue-atlas/src/Modal","sourcesContent":["<template>\n  <div :class=\"classObj\" ref=\"modal\" :style=\"styleObj\">\n    <div :class=\"`${prefixCls}-modal-dialog`\" :style=\"{'width': width + 'px'}\">\n\n      <div v-if=\"modalIsLoading\" :class=\"`${prefixCls}-modal-loading`\">\n        <va-loading size=\"md\" color=\"#888\"></va-loading>\n      </div>\n\n      <div v-else :class=\"`${prefixCls}-modal-content`\">\n\n        <slot name=\"header\">\n          <div :class=\"`${prefixCls}-modal-header`\">\n            <va-button type=\"subtle\" :class=\"`${prefixCls}-close`\" @click.native=\"close\">\n              <va-icon type=\"times\" style=\"solid\"></va-icon>\n            </va-button>\n            <div :class=\"`${prefixCls}-modal-title`\">{{title}}</div>\n          </div>\n        </slot>\n\n        <div :class=\"`${prefixCls}-modal-body`\">\n          <slot name=\"body\" />\n        </div>\n\n        <slot name=\"footer\">\n          <div :class=\"`${prefixCls}-modal-footer`\">\n            <va-button type=\"subtle\" @click.native=\"close\">{{getL('cancel')}}</va-button>\n            <va-button type=\"primary\" @click.native=\"confirm\" :focused=\"focused\">{{getL('confirm')}}</va-button>\n          </div>\n        </slot>\n\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport getScrollBarWidth from '../utils/getScrollBarWidth'\nimport EventListener from '../utils/EventListener'\nimport VaButton from '../Button/VaButton'\nimport element from '../utils/element'\nimport localeMixin from '../Mixin/localeMixin'\n\nexport default {\n  name: 'VaModal',\n  mixins: [localeMixin('VaModal')],\n  props: {\n    title: {\n      type: String,\n      default: '',\n      required: false,\n      note: 'The title of the modal'\n    },\n    show: {\n      type: Boolean,\n      default: false,\n      required: false,\n      note: 'When false, the modal will not be shown'\n    },\n    width: {\n      type: Number,\n      default: 600,\n      required: false,\n      note: 'The width of the modal.'\n    },\n    effect: {\n      type: String,\n      default: 'fade-up',\n      required: false,\n      note: 'The css effect to apply to the modal.'\n    },\n    loading: {\n      type: Boolean,\n      default: false,\n      note: 'When true, modal shows its loading state/'\n    },\n    backdrop: {\n      type: Boolean,\n      default: true,\n      required: false\n    },\n    backdropClickable: {\n      type: Boolean,\n      default: true,\n      required: false,\n      note: 'When true, clicking the backdrop in a standard or custom modal will close the modal. This prop has no effect on alert or confirm modals.'\n    },\n    prefixCls: {\n      type: String,\n      default: 'va'\n    }\n  },\n  components: {\n    VaButton\n  },\n  mounted () {\n    const $body = document.querySelector('body')\n    $body.appendChild(this.$refs.modal)\n  },\n  beforeDestroy () {\n    const $body = document.querySelector('body')\n    $body.removeChild(this.$refs.modal)\n  },\n  computed: {\n    classObj () {\n      let {prefixCls, effect} = this\n      let klass = {}\n\n      klass[prefixCls + '-modal'] = true\n      klass[prefixCls + '-modal-' + effect] = true\n\n      return klass\n    },\n    styleObj () {\n      let {backdrop, numberOfParentModals} = this\n      let style = {}\n\n      if (!backdrop) {\n        style['background'] = 'none !important'\n      }\n\n      let topMargin = parseInt(numberOfParentModals) * 20\n      style['padding-top'] = topMargin + 'px'\n\n      return style\n    },\n    modalIsLoading () {\n      return this.loading\n    }\n  },\n  data () {\n    let show = this.show\n    return {\n      isShow: show,\n      focused: false,\n      numberOfParentModals: 0\n    }\n  },\n  watch: {\n    isShow (val) {\n      if (val) {\n        this.$emit('show', { type: 'show' })\n\n        let x = document.getElementsByClassName(this.prefixCls + '-modal-in')\n        this.numberOfParentModals = x.length\n      } else {\n        this.$emit('hide', { type: 'hide' })\n      }\n\n      const el = this.$el\n      const body = document.body\n      const scrollBarWidth = getScrollBarWidth()\n      if (val) {\n        el.querySelector('.' + this.prefixCls + '-modal-content').focus()\n        el.style.display = 'block'\n        // this timeout is required for opacity transition\n        setTimeout(() => { element.addClass(el, this.prefixCls + '-modal-in') }, 20)\n        element.addClass(body, this.prefixCls + '-modal-open')\n        if (!scrollBarWidth) {\n          element.addClass(body, this.prefixCls + '-modal-hide-y')\n        }\n        if (this.backdropClickable) {\n          this._blurModalContentEvent = EventListener.listen(this.$el, 'click', (e) => {\n            if (e.target === el) this.isShow = false\n          })\n        }\n      } else {\n        if (this._blurModalContentEvent) this._blurModalContentEvent.remove()\n        element.removeClass(el, this.prefixCls + '-modal-in')\n        element.addClass(el, this.prefixCls + '-modal-out')\n        setTimeout(() => {\n          el.style.display = 'none'\n          element.removeClass(body, this.prefixCls + '-modal-open')\n          element.removeClass(body, this.prefixCls + '-modal-hide-y')\n          element.removeClass(el, this.prefixCls + '-modal-out')\n          body.style.paddingRight = '0'\n          this.$emit('closed', { type: 'closed' })\n        }, 300)\n      }\n    }\n  },\n  methods: {\n    close () {\n      this.isShow = false\n    },\n    open () {\n      this.isShow = true\n    },\n    confirm () {\n      this.$emit('confirm', { type: 'confirm' })\n    }\n  }\n}\n</script>\n"]}]}