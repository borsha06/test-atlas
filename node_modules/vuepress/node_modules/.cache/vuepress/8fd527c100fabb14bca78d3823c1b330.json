{"remainingRequest":"/media/itsd/ITSD/Projects/test/node_modules/vue-loader/lib/index.js??vue-loader-options!/media/itsd/ITSD/Projects/test/node_modules/vue-atlas/src/Textarea/VaTextarea.vue?vue&type=script&lang=js&","dependencies":[{"path":"/media/itsd/ITSD/Projects/test/node_modules/vue-atlas/src/Textarea/VaTextarea.vue","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/test/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/test/node_modules/babel-loader/lib/index.js","mtime":1526583314000},{"path":"/media/itsd/ITSD/Projects/test/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/test/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport validate from '../validate.vue'\nimport validationMixin from '../Mixin/validationMixin.js'\n\nexport default {\n  name: 'VaTextarea',\n  mixins: [validationMixin],\n  props: {\n    placeholder: {\n      type: String,\n      default: '',\n      required: false\n    },\n    resize: {\n      type: Boolean,\n      default: true,\n      required: false\n    },\n    width: {\n      type: Number,\n      default: 240,\n      required: false\n    },\n    maxLength: {\n      type: Number,\n      required: false\n    },\n    maxHeight: {\n      type: Number,\n      required: false,\n      default: 200\n    },\n    minHeight: {\n      type: Number,\n      required: false,\n      default: 100\n    },\n    value: {\n      type: String\n    },\n    readonly: {\n      type: Boolean,\n      default: false,\n      required: false\n    },\n    disabled: {\n      type: Boolean,\n      default: false,\n      required: false\n    },\n    prefixCls: {\n      type: String,\n      default: 'va'\n    }\n  },\n  components: {\n    validate\n  },\n  methods: {\n    update (val) {\n      this.$emit('input', val)\n      this.$emit('change', val)\n    },\n    _onFocus () {\n      this.$emit('focus')\n    },\n    _onBlur () {\n      this.$emit('blur')\n    }\n  },\n  computed: {\n    styleObj () {\n      let {resize, maxHeight, minHeight} = this\n      let style = {}\n\n      style['maxWidth'] = '100%'\n      style['width'] = '100%'\n      style['maxHeight'] = maxHeight + 'px'\n      style['minHeight'] = minHeight + 'px'\n      // style['minWidth'] = minWidth + 'px'\n      // style['maxWidth'] = maxWidth + 'px'\n      !resize ? style['resize'] = 'none' : ''\n\n      return style\n    },\n    classObj () {\n      let {prefixCls} = this\n      let klass = {}\n\n      klass[prefixCls + '-textarea-con'] = true\n      // klass['inline'] = true\n\n      return klass\n    }\n  }\n}\n",{"version":3,"sources":["VaTextarea.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA","file":"VaTextarea.vue","sourceRoot":"node_modules/vue-atlas/src/Textarea","sourcesContent":["<template>\n  <div :class=\"classObj\" :style=\"{width:width + 'px'}\">\n    <textarea\n      :class=\"`${prefixCls}-form-control`\"\n      :disabled=\"disabled\"\n      :readonly=\"readonly\"\n      :maxlength=\"maxLength\"\n      :style=\"styleObj\"\n      :name=\"name\"\n      @input=\"update($event.target.value)\"\n      @focus=\"_onFocus\"\n      @blur=\"_onBlur\"\n      :placeholder=\"placeholder\"\n      :value=\"value\">\n    </textarea>\n\n    <validate\n      :name=\"name\"\n      :rules=\"rules\"\n      :custom-validate=\"customValidate\"\n      :current=\"value\">\n    </validate>\n  </div>\n</template>\n\n<script>\nimport validate from '../validate.vue'\nimport validationMixin from '../Mixin/validationMixin.js'\n\nexport default {\n  name: 'VaTextarea',\n  mixins: [validationMixin],\n  props: {\n    placeholder: {\n      type: String,\n      default: '',\n      required: false\n    },\n    resize: {\n      type: Boolean,\n      default: true,\n      required: false\n    },\n    width: {\n      type: Number,\n      default: 240,\n      required: false\n    },\n    maxLength: {\n      type: Number,\n      required: false\n    },\n    maxHeight: {\n      type: Number,\n      required: false,\n      default: 200\n    },\n    minHeight: {\n      type: Number,\n      required: false,\n      default: 100\n    },\n    value: {\n      type: String\n    },\n    readonly: {\n      type: Boolean,\n      default: false,\n      required: false\n    },\n    disabled: {\n      type: Boolean,\n      default: false,\n      required: false\n    },\n    prefixCls: {\n      type: String,\n      default: 'va'\n    }\n  },\n  components: {\n    validate\n  },\n  methods: {\n    update (val) {\n      this.$emit('input', val)\n      this.$emit('change', val)\n    },\n    _onFocus () {\n      this.$emit('focus')\n    },\n    _onBlur () {\n      this.$emit('blur')\n    }\n  },\n  computed: {\n    styleObj () {\n      let {resize, maxHeight, minHeight} = this\n      let style = {}\n\n      style['maxWidth'] = '100%'\n      style['width'] = '100%'\n      style['maxHeight'] = maxHeight + 'px'\n      style['minHeight'] = minHeight + 'px'\n      // style['minWidth'] = minWidth + 'px'\n      // style['maxWidth'] = maxWidth + 'px'\n      !resize ? style['resize'] = 'none' : ''\n\n      return style\n    },\n    classObj () {\n      let {prefixCls} = this\n      let klass = {}\n\n      klass[prefixCls + '-textarea-con'] = true\n      // klass['inline'] = true\n\n      return klass\n    }\n  }\n}\n</script>\n"]}]}