{"remainingRequest":"/media/itsd/ITSD/Projects/test/node_modules/babel-loader/lib/index.js??ref--3-1!/media/itsd/ITSD/Projects/test/node_modules/cache-loader/dist/cjs.js??ref--0-0!/media/itsd/ITSD/Projects/test/node_modules/vue-loader/lib/index.js??vue-loader-options!/media/itsd/ITSD/Projects/test/node_modules/vue-atlas/src/Page/VaPage.vue?vue&type=script&lang=js&","dependencies":[{"path":"/media/itsd/ITSD/Projects/test/node_modules/vue-atlas/src/Page/VaPage.vue","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/test/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/test/node_modules/babel-loader/lib/index.js","mtime":1526583314000},{"path":"/media/itsd/ITSD/Projects/test/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/test/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport events from '../utils/events';\nexport default {\n  name: 'VaPage',\n  mixins: [events],\n  props: {\n    size: {\n      type: String,\n      default: 'lg',\n      validator: function validator(v) {\n        return ['lg', 'md', 'sm'].includes(v);\n      },\n      note: 'The size of the page.'\n    },\n    article: {\n      type: Boolean,\n      default: false,\n      note: 'When true, applies some additional CSS to header elements for more comfortable spacing.'\n    },\n    bgColor: {\n      type: String,\n      default: '#fff',\n      required: false\n    },\n    prefixCls: {\n      type: String,\n      default: 'va'\n    }\n  },\n  data: function data() {\n    var bgColor = this.bgColor;\n    var s = this.size;\n    return {\n      currentDesktopMinimumWidth: 0,\n      currentSidebarWidth: 240,\n      currentMinibarWidth: 64,\n      currentDesktopMargin: 0,\n      currentTopbarHeight: 0,\n      currentContentWidth: 0,\n      currentWindowWidth: 0,\n      isReverse: false,\n      isMobile: false,\n      isSplit: false,\n      isRTL: false,\n      bg: bgColor,\n      sz: s\n    };\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    setTimeout(function () {\n      _this.dispatch('VaLayoutManager', 'Va@configPageSizeChange', _this.sz);\n    }, 10);\n  },\n  created: function created() {\n    var _this2 = this;\n\n    this.$on('Va@pagePresenceCheck', function (val) {\n      _this2.dispatch('VaLayoutManager', 'Va@pagePresenceReply', true);\n    });\n    this.$on('Va@desktopMinimumWidthChange', function (val) {\n      _this2.currentDesktopMinimumWidth = val;\n    });\n    this.$on('Va@desktopMarginChange', function (val) {\n      _this2.currentDesktopMargin = val;\n    });\n    this.$on('Va@sidebarWidthChange', function (val) {\n      _this2.currentSidebarWidth = val;\n    });\n    this.$on('Va@topbarHeightChange', function (val) {\n      _this2.currentTopbarHeight = val;\n    });\n    this.$on('Va@contentWidthChange', function (val) {\n      _this2.currentContentWidth = val;\n    });\n    this.$on('Va@minibarWidthChange', function (val) {\n      _this2.currentMinibarWidth = val;\n    });\n    this.$on('Va@windowWidthChange', function (val) {\n      _this2.currentWindowWidth = val;\n    });\n    this.$on('Va@reverseChange', function (val) {\n      _this2.isReverse = val;\n    });\n    this.$on('Va@pageIsMobile', function (val) {\n      _this2.isMobile = val;\n    });\n    this.$on('Va@pageBgColorChange', function (val) {\n      _this2.bg = val;\n    });\n    this.$on('Va@splitChange', function (val) {\n      _this2.isSplit = val;\n    });\n    this.$on('Va@pageSizeChange', function (val) {\n      _this2.sz = val;\n    });\n    this.$on('Va@rtlChange', function (val) {\n      _this2.isRTL = val;\n    });\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.dispatch('VaLayoutManager', 'Va@pageDisconnect', true);\n  },\n  computed: {\n    pageClassObj: function pageClassObj() {\n      var prefixCls = this.prefixCls,\n          sz = this.sz,\n          article = this.article,\n          isMobile = this.isMobile;\n      var klass = {};\n      isMobile ? klass[prefixCls + '-page-container-lg'] = true : klass[prefixCls + '-page-container-' + sz] = true;\n      klass[prefixCls + '-page-container-article'] = article;\n      return klass;\n    },\n    styleObj: function styleObj() {\n      // let {prefixCls, sidebarWidth} = this\n      var split = this.isSplit;\n      var rtl = this.isRTL;\n      var reverse = this.isReverse;\n      var bg = this.bg;\n      var stl = {};\n      var sw = parseInt(this.currentSidebarWidth);\n      var mw = parseInt(this.currentMinibarWidth);\n      var th = parseInt(this.currentTopbarHeight);\n      var dm = parseInt(this.currentDesktopMargin);\n      var dmw = parseInt(this.currentDesktopMinimumWidth);\n      var cw = parseInt(this.currentContentWidth);\n      var mobile = this.isMobile; // let possibleWidth = mw + sw + (dm * 2)\n\n      stl['background'] = bg;\n      stl['position'] = 'fixed';\n      stl['top'] = th + 'px';\n      stl['height'] = 'calc(100% - ' + th + 'px)';\n      stl['overflow'] = 'scroll'; // stl['width'] = 'calc(100% - ' + sw + mw + 'px)'\n\n      /**\n       * Adjust the margins if content width is smaller than\n       * desktop minimum width.\n       */\n\n      if (!mobile) {\n        if (cw < dmw) {\n          var x = dmw - cw;\n          dm = dm - x / 2;\n        }\n      } else {\n        dm = 0;\n        dmw = 0;\n      }\n      /**\n       * If a minimum desktop width is set\n       */\n\n\n      if (dmw !== 0) {\n        stl['min-width'] = dmw - mw - sw + 'px';\n      } else {\n        stl['min-width'] = '0px';\n      } // The layout isn't split, so Page is only\n      // concerned with total width of bars\n\n\n      if (!split) {\n        if (rtl) {\n          stl['left'] = dm + 'px';\n          stl['right'] = sw + mw + dm + 'px';\n        } else {\n          stl['left'] = sw + mw + dm + 'px';\n          stl['right'] = dm + 'px';\n        }\n      } else {\n        // So it's a split layout\n        // If reverse is also true, that means that the\n        // sidebar will be moved to the left,\n        // and the minibar is moved to the right\n        // SO.. our 'left' distance should be equal to the width of the minibar\n        if (reverse) {\n          stl['left'] = dm + sw + 'px';\n          stl['right'] = dm + mw + 'px';\n        } else {\n          stl['left'] = dm + mw + 'px';\n          stl['right'] = dm + sw + 'px';\n        }\n      }\n\n      return stl;\n    }\n  }\n};",{"version":3,"sources":["VaPage.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div :style=\"styleObj\" :class=\"`${prefixCls}-page-wrapper`\">\n    <div :class=\"`${prefixCls}-page-container`\">\n      <div :class=\"pageClassObj\">\n        <slot/>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport events from '../utils/events'\n\nexport default {\n  name: 'VaPage',\n  mixins: [events],\n  props: {\n    size: {\n      type: String,\n      default: 'lg',\n      validator (v) {\n        return [\n          'lg',\n          'md',\n          'sm'\n        ].includes(v)\n      },\n      note: 'The size of the page.'\n    },\n    article: {\n      type: Boolean,\n      default: false,\n      note: 'When true, applies some additional CSS to header elements for more comfortable spacing.'\n    },\n    bgColor: {\n      type: String,\n      default: '#fff',\n      required: false\n    },\n    prefixCls: {\n      type: String,\n      default: 'va'\n    }\n  },\n  data () {\n    let bgColor = this.bgColor\n    let s = this.size\n    return {\n      currentDesktopMinimumWidth: 0,\n      currentSidebarWidth: 240,\n      currentMinibarWidth: 64,\n      currentDesktopMargin: 0,\n      currentTopbarHeight: 0,\n      currentContentWidth: 0,\n      currentWindowWidth: 0,\n      isReverse: false,\n      isMobile: false,\n      isSplit: false,\n      isRTL: false,\n      bg: bgColor,\n      sz: s\n    }\n  },\n  mounted () {\n    setTimeout(() => {\n      this.dispatch('VaLayoutManager', 'Va@configPageSizeChange', this.sz)\n    }, 10)\n  },\n  created () {\n    this.$on('Va@pagePresenceCheck', (val) => { this.dispatch('VaLayoutManager', 'Va@pagePresenceReply', true) })\n    this.$on('Va@desktopMinimumWidthChange', (val) => { this.currentDesktopMinimumWidth = val })\n    this.$on('Va@desktopMarginChange', (val) => { this.currentDesktopMargin = val })\n    this.$on('Va@sidebarWidthChange', (val) => { this.currentSidebarWidth = val })\n    this.$on('Va@topbarHeightChange', (val) => { this.currentTopbarHeight = val })\n    this.$on('Va@contentWidthChange', (val) => { this.currentContentWidth = val })\n    this.$on('Va@minibarWidthChange', (val) => { this.currentMinibarWidth = val })\n    this.$on('Va@windowWidthChange', (val) => { this.currentWindowWidth = val })\n    this.$on('Va@reverseChange', (val) => { this.isReverse = val })\n    this.$on('Va@pageIsMobile', (val) => { this.isMobile = val })\n    this.$on('Va@pageBgColorChange', (val) => { this.bg = val })\n    this.$on('Va@splitChange', (val) => { this.isSplit = val })\n    this.$on('Va@pageSizeChange', (val) => { this.sz = val })\n    this.$on('Va@rtlChange', (val) => { this.isRTL = val })\n  },\n  beforeDestroy () {\n    this.dispatch('VaLayoutManager', 'Va@pageDisconnect', true)\n  },\n  computed: {\n    pageClassObj () {\n      let {prefixCls, sz, article, isMobile} = this\n      let klass = {}\n\n      isMobile ? klass[prefixCls + '-page-container-lg'] = true : klass[prefixCls + '-page-container-' + sz] = true\n      klass[prefixCls + '-page-container-article'] = article\n\n      return klass\n    },\n    styleObj () {\n      // let {prefixCls, sidebarWidth} = this\n      let split = this.isSplit\n      let rtl = this.isRTL\n      let reverse = this.isReverse\n      let bg = this.bg\n      let stl = {}\n\n      let sw = parseInt(this.currentSidebarWidth)\n      let mw = parseInt(this.currentMinibarWidth)\n      let th = parseInt(this.currentTopbarHeight)\n      let dm = parseInt(this.currentDesktopMargin)\n      let dmw = parseInt(this.currentDesktopMinimumWidth)\n      let cw = parseInt(this.currentContentWidth)\n      let mobile = this.isMobile\n\n      // let possibleWidth = mw + sw + (dm * 2)\n\n      stl['background'] = bg\n      stl['position'] = 'fixed'\n      stl['top'] = th + 'px'\n      stl['height'] = 'calc(100% - ' + th + 'px)'\n      stl['overflow'] = 'scroll'\n      // stl['width'] = 'calc(100% - ' + sw + mw + 'px)'\n\n      /**\n       * Adjust the margins if content width is smaller than\n       * desktop minimum width.\n       */\n      if (!mobile) {\n        if (cw < dmw) {\n          let x = dmw - cw\n          dm = dm - (x / 2)\n        }\n      } else {\n        dm = 0\n        dmw = 0\n      }\n\n      /**\n       * If a minimum desktop width is set\n       */\n      if (dmw !== 0) {\n        stl['min-width'] = (dmw - mw - sw) + 'px'\n      } else {\n        stl['min-width'] = '0px'\n      }\n\n      // The layout isn't split, so Page is only\n      // concerned with total width of bars\n      if (!split) {\n        if (rtl) {\n          stl['left'] = dm + 'px'\n          stl['right'] = (sw + mw + dm) + 'px'\n        } else {\n          stl['left'] = (sw + mw + dm) + 'px'\n          stl['right'] = dm + 'px'\n        }\n      } else {\n        // So it's a split layout\n        // If reverse is also true, that means that the\n        // sidebar will be moved to the left,\n        // and the minibar is moved to the right\n        // SO.. our 'left' distance should be equal to the width of the minibar\n        if (reverse) {\n          stl['left'] = (dm + sw) + 'px'\n          stl['right'] = (dm + mw) + 'px'\n        } else {\n          stl['left'] = (dm + mw) + 'px'\n          stl['right'] = (dm + sw) + 'px'\n        }\n      }\n\n      return stl\n    }\n  }\n}\n</script>\n"],"sourceRoot":"node_modules/vue-atlas/src/Page"}]}