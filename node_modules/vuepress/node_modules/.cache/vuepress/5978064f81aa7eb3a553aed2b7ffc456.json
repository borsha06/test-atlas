{"remainingRequest":"/media/itsd/ITSD/Projects/wilfried/node_modules/vue-loader/lib/index.js??vue-loader-options!/media/itsd/ITSD/Projects/wilfried/node_modules/vue-atlas/src/Checkbox/VaCheckboxBtn.vue?vue&type=script&lang=js&","dependencies":[{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/vue-atlas/src/Checkbox/VaCheckboxBtn.vue","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/babel-loader/lib/index.js","mtime":1526583314000},{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport events from '../utils/events'\n\nexport default {\n  name: 'VaCheckboxBtn',\n  mixins: [events],\n  props: {\n    value: {\n      type: String\n    },\n    label: {\n      type: [String, Number]\n    },\n    checked: {\n      type: Boolean,\n      default: false\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    prefixCls: {\n      type: String,\n      default: 'va'\n    }\n  },\n  computed: {\n    classObj () {\n      let {prefixCls} = this\n      let klass = {}\n\n      klass[prefixCls + '-checked-btn'] = true\n\n      return klass\n    }\n  },\n  watch: {\n    value (val) {\n      this.currentChecked = val\n    },\n    checked (val) {\n      this.currentChecked = val\n    },\n    currentChecked (val) {\n      this.$emit('input', val)\n    }\n  },\n  data () {\n    let checked = this.checked\n    if (checked !== undefined) {\n      this.$emit('input', checked)\n    } else {\n      checked = !!this.value\n    }\n\n    return {\n      currentChecked: checked\n    }\n  },\n  methods: {\n    handleClick () {\n      this.currentChecked = !this.currentChecked\n      this.dispatch('VaCheckboxGroup', 'Va@checkboxChange', this)\n      this.$emit('change', this.currentChecked)\n    }\n  },\n  created () {\n    this.$on('Va@checkboxgroupChange', (val) => {\n      this.currentChecked = val.indexOf(this.label) > -1\n    })\n  }\n}\n",{"version":3,"sources":["VaCheckboxBtn.vue"],"names":[],"mappings":";;;;;;;;;;;AAWA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"VaCheckboxBtn.vue","sourceRoot":"node_modules/vue-atlas/src/Checkbox","sourcesContent":["<template>\n  <va-button\n    @click.prevent.native=\"handleClick\"\n    :class=\"classObj\"\n    :disabled=\"disabled\"\n    :type=\"currentChecked ? 'primary' : 'default'\">\n    <slot />\n  </va-button>\n</template>\n\n<script>\nimport events from '../utils/events'\n\nexport default {\n  name: 'VaCheckboxBtn',\n  mixins: [events],\n  props: {\n    value: {\n      type: String\n    },\n    label: {\n      type: [String, Number]\n    },\n    checked: {\n      type: Boolean,\n      default: false\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    prefixCls: {\n      type: String,\n      default: 'va'\n    }\n  },\n  computed: {\n    classObj () {\n      let {prefixCls} = this\n      let klass = {}\n\n      klass[prefixCls + '-checked-btn'] = true\n\n      return klass\n    }\n  },\n  watch: {\n    value (val) {\n      this.currentChecked = val\n    },\n    checked (val) {\n      this.currentChecked = val\n    },\n    currentChecked (val) {\n      this.$emit('input', val)\n    }\n  },\n  data () {\n    let checked = this.checked\n    if (checked !== undefined) {\n      this.$emit('input', checked)\n    } else {\n      checked = !!this.value\n    }\n\n    return {\n      currentChecked: checked\n    }\n  },\n  methods: {\n    handleClick () {\n      this.currentChecked = !this.currentChecked\n      this.dispatch('VaCheckboxGroup', 'Va@checkboxChange', this)\n      this.$emit('change', this.currentChecked)\n    }\n  },\n  created () {\n    this.$on('Va@checkboxgroupChange', (val) => {\n      this.currentChecked = val.indexOf(this.label) > -1\n    })\n  }\n}\n</script>\n"]}]}