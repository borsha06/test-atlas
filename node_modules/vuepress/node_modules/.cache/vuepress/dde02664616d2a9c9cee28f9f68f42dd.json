{"remainingRequest":"/media/itsd/ITSD/Projects/wilfried/node_modules/vue-loader/lib/index.js??vue-loader-options!/media/itsd/ITSD/Projects/wilfried/node_modules/vue-atlas/src/AnimQueue/VaAnimQueue.vue?vue&type=script&lang=js&","dependencies":[{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/vue-atlas/src/AnimQueue/VaAnimQueue.vue","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/babel-loader/lib/index.js","mtime":1526583314000},{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport velocity from 'velocity-animate'\nimport ANIM_TYPES from './animTypes'\n\nconst BackEase = {\n  easeInBack: [0.6, -0.28, 0.735, 0.045],\n  easeOutBack: [0.175, 0.885, 0.32, 1.275],\n  easeInOutBack: [0.68, -0.55, 0.265, 1.55]\n}\n\nfunction transformArguments (arg) {\n  if (Array.isArray(arg) && arg.length === 2) {\n    return arg\n  }\n  return [arg, arg]\n}\n\nexport default {\n  name: 'VaAnimQueue',\n  props: {\n    show: {\n      type: Boolean,\n      default: false,\n      required: false\n    },\n    tag: {\n      type: String,\n      default: 'div',\n      validator (v) {\n        return [\n          'div',\n          'form',\n          'ul',\n          'ol'\n        ].includes(v)\n      },\n      required: false,\n      note: `The tag to render around the animation queue.\nThis is helpful when you want to animate items in a list, but not the entire list itself.\nFor example, in this kind of scenario, you could pass tag=\"ul\" or tag=\"ol\".`\n    },\n    interval: {\n      type: [Number, Array],\n      default: 100,\n      required: false\n    },\n    duration: {\n      type: [Number, Array, String],\n      default: 500,\n      required: false,\n      note: 'The speed of the animation'\n    },\n    delay: {\n      type: [Number, Array, String],\n      default: 0,\n      required: false,\n      note: 'The amount of time (ms) to wait between animating each node'\n    },\n    type: {\n      type: [String, Array],\n      default: 'right',\n      required: false,\n      note: `The type of enter and leave animation.\nWhen passing an array, the first item is the enter animation and the second is the leave animation.`\n    },\n    animConfig: {\n      type: [String, Array],\n      required: false\n    },\n    ease: {\n      type: [String, Array],\n      default: 'easeOutQuart',\n      required: false\n    },\n    watchValue: {\n      type: [String, Array],\n      required: false\n    },\n    leaveReverse: {\n      type: Boolean,\n      default: false,\n      required: false,\n      note: 'When true, during the leave animation the nodes will be transitioned out from last to first, instead of from first to last.'\n    },\n    prefixCls: {\n      type: String,\n      default: 'va'\n    }\n  },\n  data () {\n    return {\n      animatingClassName: [],\n      originChildren: [],\n      children: [],\n      childrenShow: {}\n    }\n  },\n  mounted () {\n    let {prefixCls} = this\n    this.animatingClassName = [prefixCls + '-anim-queue-entering', prefixCls + '-anim-queue-leaving']\n\n    // this.$nextTick(() => {\n    this.keysAnimating = []\n    const freeChild = this._getFreeKeysAndChild()\n    this.keysAnimating = Object.keys(freeChild)\n    this.children = freeChild\n    this.originChildren = freeChild\n\n    this.$on('VaAnimQueueHidden', () => {\n      this._hiddenVelocityNode()\n      return true\n    })\n\n    if (this.show) {\n      this._animateEnter()\n    }\n    // })\n  },\n  beforeDestroy () {\n    if (this.originChildren && this.originChildren.length > 0) {\n      this.originChildren.forEach(child => {\n        velocity(child, 'stop')\n      })\n    }\n  },\n  computed: {\n    usedSlot () {\n      switch (this.tag) {\n        case 'div':\n          return this.$slots.divslot\n        case 'ul':\n          return this.$slots.ulslot\n        case 'ol':\n          return this.$slots.olslot\n        case 'form':\n          return this.$slots.formslot\n        default:\n          return false\n      }\n    }\n  },\n  isActHideAnimate: false,\n  watch: {\n    show (value) {\n      if (value) {\n        this.isActHideAnimate = true\n\n        this.$nextTick(() => {\n          this.$emit('VaAnimQueueHidden')\n          setTimeout(() => {\n            this._animateEnter()\n            this.isActHideAnimate = false\n          }, 50)\n        })\n      } else {\n        this._animateLeave(() => {\n          if (!this.isActHideAnimate) {\n            this.$emit('VaAnimQueueHidden')\n          }\n        })\n      }\n    },\n    watchValue (newValue, oldValue) {\n      this.$nextTick(() => {\n        let shouldEnterChild = []\n        let shouldLeaveChild = []\n        const newChild = this._getKeysChild()\n        // const nodeMap = {}\n\n        for (let i = 0; i < this.children.length; i++) {\n          let curChild = this.children[i]\n          let hasRemove = true\n\n          for (let j = 0; j < newChild.length; j++) {\n            if (curChild.key === newChild[j].key) {\n              hasRemove = false\n            }\n          }\n          if (hasRemove) {\n            shouldLeaveChild.push(curChild)\n          }\n        }\n\n        for (let i = 0; i < newChild.length; i++) {\n          let curChild = newChild[i]\n          let hasAdd = true\n\n          for (let j = 0; j < this.children.length; j++) {\n            if (curChild.key === this.children[j].key) {\n              hasAdd = false\n            }\n          }\n          if (hasAdd) {\n            shouldEnterChild.push(curChild)\n          }\n        }\n\n        shouldEnterChild.forEach(this._performEnter)\n        shouldLeaveChild.forEach(this._performLeave)\n\n        this.children = newChild\n      })\n    }\n  },\n  methods: {\n    _getKeysChild () {\n      const ret = []\n      const keyNodes = Array.prototype.slice.call(this.$el.querySelectorAll('[anim-key]'))\n\n      keyNodes.forEach(child => {\n        if (!child) {\n          return\n        }\n\n        child.setAttribute('__scope_key__', 1)\n\n        const key = child.getAttribute('anim-key')\n\n        if (!key) {\n          return\n        }\n\n        ret.push({\n          key: key,\n          el: child\n        })\n      })\n\n      return ret\n    },\n    _getFreeKeysAndChild () {\n      const ret = []\n      const keyNodes = Array.prototype.slice.call(this.$el.querySelectorAll('[anim-key]:not([__scope_key__])'))\n\n      keyNodes.forEach(child => {\n        if (!child) {\n          return\n        }\n\n        child.setAttribute('__scope_key__', 1)\n\n        const key = child.getAttribute('anim-key')\n\n        if (!key) {\n          return\n        }\n\n        ret.push({\n          key: key,\n          el: child\n        })\n      })\n\n      return ret\n    },\n    _getVelocityConfig (index) {\n      if (this.animConfig) {\n        return transformArguments(this.animConfig)[index]\n      }\n      return ANIM_TYPES[transformArguments(this.type)[index]]\n    },\n    _getVelocityEnterConfig () {\n      return this._getVelocityConfig(0)\n    },\n    _getVelocityLeaveConfig () {\n      const config = this._getVelocityConfig(1)\n      const ret = {}\n\n      Object.keys(config).forEach((key) => {\n        if (Array.isArray(config[key])) {\n          ret[key] = Array.prototype.slice.call(config[key]).reverse()\n        } else {\n          ret[key] = config[key]\n        }\n      })\n      return ret\n    },\n    _getVelocityEasing () {\n      return transformArguments(this.ease).map(easeName => {\n        if (typeof easeName === 'string') {\n          return BackEase[easeName] || easeName\n        }\n      })\n    },\n    _hiddenVelocityNode () {\n      this.children.forEach((item, i) => {\n        const node = item.el\n        if (!node) {\n          return\n        }\n        node.style.visibility = 'hidden'\n        velocity(node, 'stop')\n      })\n    },\n    _animateEnter () {\n      this.children.forEach(this._performEnter)\n    },\n    _performEnter (item, i) {\n      const node = item.el\n      const key = item.key\n\n      if (!node) {\n        return\n      }\n\n      const interval = parseInt(transformArguments(this.interval)[0])\n      const delay = parseInt(transformArguments(this.delay)[0])\n      const duration = parseInt(transformArguments(this.duration)[0])\n      node.style.visibility = 'hidden'\n      velocity(node, 'stop')\n      velocity(node, this._getVelocityEnterConfig('enter'), {\n        delay: (interval * i * delay) / 100,\n        duration: duration,\n        easing: this._getVelocityEasing()[0],\n        visibility: 'visible',\n        begin: (elements) => {\n          this._enterBegin(key, elements)\n          if (node.__vue__) {\n            const _enterFn = node.__vue__._animateEnter\n            _enterFn && _enterFn()\n\n            const children = node.__vue__.$children\n            children.forEach(item => {\n              item._animateEnter && item._animateEnter()\n            })\n          }\n        },\n        complete: this._enterComplete.bind(this, key)\n      })\n    },\n    _animateLeave (done) {\n      this.children.forEach((item, i) => {\n        this._performLeave(item, i, done)\n      })\n    },\n    _performLeave (item, i, done) {\n      const node = item.el\n      const key = item.key\n      if (!node) {\n        return\n      }\n      const interval = parseInt(transformArguments(this.interval)[1])\n      const delay = parseInt(transformArguments(this.delay)[1])\n      const duration = parseInt(transformArguments(this.duration)[1])\n      const order = this.leaveReverse ? (this.children.length - i - 1) : i\n\n      velocity(node, 'stop')\n      velocity(node, this._getVelocityLeaveConfig('leave'), {\n        delay: interval * order + delay,\n        duration: duration,\n        easing: this._getVelocityEasing()[1],\n        begin: this._leaveBegin.bind(this),\n        complete: (elements) => {\n          this._leaveComplete(key, elements)\n          const len = this.children.length\n          if (i === len - 1) {\n            done && done()\n          }\n        }\n      })\n    },\n    _enterBegin (key, elements) {\n      const self = this\n      if (this.keysAnimating.indexOf(key) >= 0) {\n        this.keysAnimating.splice(this.keysAnimating.indexOf(key), 1)\n      }\n      elements.forEach(elem => {\n        elem.className = elem.className.replace(self.animatingClassName[1], '').trim()\n        elem.className += (' ' + self.animatingClassName[0])\n      })\n    },\n    _enterComplete (key, elements) {\n      const self = this\n      if (this.keysAnimating.indexOf(key) >= 0) {\n        this.keysAnimating.splice(this.keysAnimating.indexOf(key), 1)\n      }\n      elements.forEach(elem => {\n        elem.className = elem.className.replace(self.animatingClassName[0], '').trim()\n      })\n    },\n    _leaveBegin (elements) {\n      const self = this\n      elements.forEach(elem => {\n        elem.className = elem.className.replace(self.animatingClassName[0], '').trim()\n        elem.className += (' ' + self.animatingClassName[1])\n      })\n    },\n    _leaveComplete (key, elements) {\n      const self = this\n      if (this.keysAnimating.indexOf(key) < 0) {\n        return\n      }\n      this.keysAnimating.splice(this.keysAnimating.indexOf(key), 1)\n      elements.forEach(elem => {\n        elem.className = elem.className.replace(self.animatingClassName[1], '').trim()\n      })\n    }\n  }\n}\n",{"version":3,"sources":["VaAnimQueue.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAkfile":"VaAnimQueue.vue","sourceRoot":"node_modules/vue-atlas/src/AnimQueue","sourcesContent":["<template>\n  <div>\n    <div v-if=\"tag === 'div'\">\n      <slot/>\n    </div>\n    <ul v-if=\"tag === 'ul'\">\n      <slot/>\n    </ul>\n    <ol v-if=\"tag === 'ol'\">\n      <slot/>\n    </ol>\n    <form v-if=\"tag === 'form'\">\n      <slot/>\n    </form>\n  </div>\n</template>\n\n<script>\nimport velocity from 'velocity-animate'\nimport ANIM_TYPES from './animTypes'\n\nconst BackEase = {\n  easeInBack: [0.6, -0.28, 0.735, 0.045],\n  easeOutBack: [0.175, 0.885, 0.32, 1.275],\n  easeInOutBack: [0.68, -0.55, 0.265, 1.55]\n}\n\nfunction transformArguments (arg) {\n  if (Array.isArray(arg) && arg.length === 2) {\n    return arg\n  }\n  return [arg, arg]\n}\n\nexport default {\n  name: 'VaAnimQueue',\n  props: {\n    show: {\n      type: Boolean,\n      default: false,\n      required: false\n    },\n    tag: {\n      type: String,\n      default: 'div',\n      validator (v) {\n        return [\n          'div',\n          'form',\n          'ul',\n          'ol'\n        ].includes(v)\n      },\n      required: false,\n      note: `The tag to render around the animation queue.\nThis is helpful when you want to animate items in a list, but not the entire list itself.\nFor example, in this kind of scenario, you could pass tag=\"ul\" or tag=\"ol\".`\n    },\n    interval: {\n      type: [Number, Array],\n      default: 100,\n      required: false\n    },\n    duration: {\n      type: [Number, Array, String],\n      default: 500,\n      required: false,\n      note: 'The speed of the animation'\n    },\n    delay: {\n      type: [Number, Array, String],\n      default: 0,\n      required: false,\n      note: 'The amount of time (ms) to wait between animating each node'\n    },\n    type: {\n      type: [String, Array],\n      default: 'right',\n      required: false,\n      note: `The type of enter and leave animation.\nWhen passing an array, the first item is the enter animation and the second is the leave animation.`\n    },\n    animConfig: {\n      type: [String, Array],\n      required: false\n    },\n    ease: {\n      type: [String, Array],\n      default: 'easeOutQuart',\n      required: false\n    },\n    watchValue: {\n      type: [String, Array],\n      required: false\n    },\n    leaveReverse: {\n      type: Boolean,\n      default: false,\n      required: false,\n      note: 'When true, during the leave animation the nodes will be transitioned out from last to first, instead of from first to last.'\n    },\n    prefixCls: {\n      type: String,\n      default: 'va'\n    }\n  },\n  data () {\n    return {\n      animatingClassName: [],\n      originChildren: [],\n      children: [],\n      childrenShow: {}\n    }\n  },\n  mounted () {\n    let {prefixCls} = this\n    this.animatingClassName = [prefixCls + '-anim-queue-entering', prefixCls + '-anim-queue-leaving']\n\n    // this.$nextTick(() => {\n    this.keysAnimating = []\n    const freeChild = this._getFreeKeysAndChild()\n    this.keysAnimating = Object.keys(freeChild)\n    this.children = freeChild\n    this.originChildren = freeChild\n\n    this.$on('VaAnimQueueHidden', () => {\n      this._hiddenVelocityNode()\n      return true\n    })\n\n    if (this.show) {\n      this._animateEnter()\n    }\n    // })\n  },\n  beforeDestroy () {\n    if (this.originChildren && this.originChildren.length > 0) {\n      this.originChildren.forEach(child => {\n        velocity(child, 'stop')\n      })\n    }\n  },\n  computed: {\n    usedSlot () {\n      switch (this.tag) {\n        case 'div':\n          return this.$slots.divslot\n        case 'ul':\n          return this.$slots.ulslot\n        case 'ol':\n          return this.$slots.olslot\n        case 'form':\n          return this.$slots.formslot\n        default:\n          return false\n      }\n    }\n  },\n  isActHideAnimate: false,\n  watch: {\n    show (value) {\n      if (value) {\n        this.isActHideAnimate = true\n\n        this.$nextTick(() => {\n          this.$emit('VaAnimQueueHidden')\n          setTimeout(() => {\n            this._animateEnter()\n            this.isActHideAnimate = false\n          }, 50)\n        })\n      } else {\n        this._animateLeave(() => {\n          if (!this.isActHideAnimate) {\n            this.$emit('VaAnimQueueHidden')\n          }\n        })\n      }\n    },\n    watchValue (newValue, oldValue) {\n      this.$nextTick(() => {\n        let shouldEnterChild = []\n        let shouldLeaveChild = []\n        const newChild = this._getKeysChild()\n        // const nodeMap = {}\n\n        for (let i = 0; i < this.children.length; i++) {\n          let curChild = this.children[i]\n          let hasRemove = true\n\n          for (let j = 0; j < newChild.length; j++) {\n            if (curChild.key === newChild[j].key) {\n              hasRemove = false\n            }\n          }\n          if (hasRemove) {\n            shouldLeaveChild.push(curChild)\n          }\n        }\n\n        for (let i = 0; i < newChild.length; i++) {\n          let curChild = newChild[i]\n          let hasAdd = true\n\n          for (let j = 0; j < this.children.length; j++) {\n            if (curChild.key === this.children[j].key) {\n              hasAdd = false\n            }\n          }\n          if (hasAdd) {\n            shouldEnterChild.push(curChild)\n          }\n        }\n\n        shouldEnterChild.forEach(this._performEnter)\n        shouldLeaveChild.forEach(this._performLeave)\n\n        this.children = newChild\n      })\n    }\n  },\n  methods: {\n    _getKeysChild () {\n      const ret = []\n      const keyNodes = Array.prototype.slice.call(this.$el.querySelectorAll('[anim-key]'))\n\n      keyNodes.forEach(child => {\n        if (!child) {\n          return\n        }\n\n        child.setAttribute('__scope_key__', 1)\n\n        const key = child.getAttribute('anim-key')\n\n        if (!key) {\n          return\n        }\n\n        ret.push({\n          key: key,\n          el: child\n        })\n      })\n\n      return ret\n    },\n    _getFreeKeysAndChild () {\n      const ret = []\n      const keyNodes = Array.prototype.slice.call(this.$el.querySelectorAll('[anim-key]:not([__scope_key__])'))\n\n      keyNodes.forEach(child => {\n        if (!child) {\n          return\n        }\n\n        child.setAttribute('__scope_key__', 1)\n\n        const key = child.getAttribute('anim-key')\n\n        if (!key) {\n          return\n        }\n\n        ret.push({\n          key: key,\n          el: child\n        })\n      })\n\n      return ret\n    },\n    _getVelocityConfig (index) {\n      if (this.animConfig) {\n        return transformArguments(this.animConfig)[index]\n      }\n      return ANIM_TYPES[transformArguments(this.type)[index]]\n    },\n    _getVelocityEnterConfig () {\n      return this._getVelocityConfig(0)\n    },\n    _getVelocityLeaveConfig () {\n      const config = this._getVelocityConfig(1)\n      const ret = {}\n\n      Object.keys(config).forEach((key) => {\n        if (Array.isArray(config[key])) {\n          ret[key] = Array.prototype.slice.call(config[key]).reverse()\n        } else {\n          ret[key] = config[key]\n        }\n      })\n      return ret\n    },\n    _getVelocityEasing () {\n      return transformArguments(this.ease).map(easeName => {\n        if (typeof easeName === 'string') {\n          return BackEase[easeName] || easeName\n        }\n      })\n    },\n    _hiddenVelocityNode () {\n      this.children.forEach((item, i) => {\n        const node = item.el\n        if (!node) {\n          return\n        }\n        node.style.visibility = 'hidden'\n        velocity(node, 'stop')\n      })\n    },\n    _animateEnter () {\n      this.children.forEach(this._performEnter)\n    },\n    _performEnter (item, i) {\n      const node = item.el\n      const key = item.key\n\n      if (!node) {\n        return\n      }\n\n      const interval = parseInt(transformArguments(this.interval)[0])\n      const delay = parseInt(transformArguments(this.delay)[0])\n      const duration = parseInt(transformArguments(this.duration)[0])\n      node.style.visibility = 'hidden'\n      velocity(node, 'stop')\n      velocity(node, this._getVelocityEnterConfig('enter'), {\n        delay: (interval * i * delay) / 100,\n        duration: duration,\n        easing: this._getVelocityEasing()[0],\n        visibility: 'visible',\n        begin: (elements) => {\n          this._enterBegin(key, elements)\n          if (node.__vue__) {\n            const _enterFn = node.__vue__._animateEnter\n            _enterFn && _enterFn()\n\n            const children = node.__vue__.$children\n            children.forEach(item => {\n              item._animateEnter && item._animateEnter()\n            })\n          }\n        },\n        complete: this._enterComplete.bind(this, key)\n      })\n    },\n    _animateLeave (done) {\n      this.children.forEach((item, i) => {\n        this._performLeave(item, i, done)\n      })\n    },\n    _performLeave (item, i, done) {\n      const node = item.el\n      const key = item.key\n      if (!node) {\n        return\n      }\n      const interval = parseInt(transformArguments(this.interval)[1])\n      const delay = parseInt(transformArguments(this.delay)[1])\n      const duration = parseInt(transformArguments(this.duration)[1])\n      const order = this.leaveReverse ? (this.children.length - i - 1) : i\n\n      velocity(node, 'stop')\n      velocity(node, this._getVelocityLeaveConfig('leave'), {\n        delay: interval * order + delay,\n        duration: duration,\n        easing: this._getVelocityEasing()[1],\n        begin: this._leaveBegin.bind(this),\n        complete: (elements) => {\n          this._leaveComplete(key, elements)\n          const len = this.children.length\n          if (i === len - 1) {\n            done && done()\n          }\n        }\n      })\n    },\n    _enterBegin (key, elements) {\n      const self = this\n      if (this.keysAnimating.indexOf(key) >= 0) {\n        this.keysAnimating.splice(this.keysAnimating.indexOf(key), 1)\n      }\n      elements.forEach(elem => {\n        elem.className = elem.className.replace(self.animatingClassName[1], '').trim()\n        elem.className += (' ' + self.animatingClassName[0])\n      })\n    },\n    _enterComplete (key, elements) {\n      const self = this\n      if (this.keysAnimating.indexOf(key) >= 0) {\n        this.keysAnimating.splice(this.keysAnimating.indexOf(key), 1)\n      }\n      elements.forEach(elem => {\n        elem.className = elem.className.replace(self.animatingClassName[0], '').trim()\n      })\n    },\n    _leaveBegin (elements) {\n      const self = this\n      elements.forEach(elem => {\n        elem.className = elem.className.replace(self.animatingClassName[0], '').trim()\n        elem.className += (' ' + self.animatingClassName[1])\n      })\n    },\n    _leaveComplete (key, elements) {\n      const self = this\n      if (this.keysAnimating.indexOf(key) < 0) {\n        return\n      }\n      this.keysAnimating.splice(this.keysAnimating.indexOf(key), 1)\n      elements.forEach(elem => {\n        elem.className = elem.className.replace(self.animatingClassName[1], '').trim()\n      })\n    }\n  }\n}\n</script>\n"]}]}