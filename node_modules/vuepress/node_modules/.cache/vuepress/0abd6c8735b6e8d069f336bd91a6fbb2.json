{"remainingRequest":"/media/itsd/ITSD/Projects/wilfried/node_modules/vue-loader/lib/index.js??vue-loader-options!/media/itsd/ITSD/Projects/wilfried/node_modules/vue-atlas/src/Page/VaPage.vue?vue&type=script&lang=js&","dependencies":[{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/vue-atlas/src/Page/VaPage.vue","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/babel-loader/lib/index.js","mtime":1526583314000},{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/itsd/ITSD/Projects/wilfried/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport events from '../utils/events'\n\nexport default {\n  name: 'VaPage',\n  mixins: [events],\n  props: {\n    size: {\n      type: String,\n      default: 'lg',\n      validator (v) {\n        return [\n          'lg',\n          'md',\n          'sm'\n        ].includes(v)\n      },\n      note: 'The size of the page.'\n    },\n    article: {\n      type: Boolean,\n      default: false,\n      note: 'When true, applies some additional CSS to header elements for more comfortable spacing.'\n    },\n    bgColor: {\n      type: String,\n      default: '#fff',\n      required: false\n    },\n    prefixCls: {\n      type: String,\n      default: 'va'\n    }\n  },\n  data () {\n    let bgColor = this.bgColor\n    let s = this.size\n    return {\n      currentDesktopMinimumWidth: 0,\n      currentSidebarWidth: 240,\n      currentMinibarWidth: 64,\n      currentDesktopMargin: 0,\n      currentTopbarHeight: 0,\n      currentContentWidth: 0,\n      currentWindowWidth: 0,\n      isReverse: false,\n      isMobile: false,\n      isSplit: false,\n      isRTL: false,\n      bg: bgColor,\n      sz: s\n    }\n  },\n  mounted () {\n    setTimeout(() => {\n      this.dispatch('VaLayoutManager', 'Va@configPageSizeChange', this.sz)\n    }, 10)\n  },\n  created () {\n    this.$on('Va@pagePresenceCheck', (val) => { this.dispatch('VaLayoutManager', 'Va@pagePresenceReply', true) })\n    this.$on('Va@desktopMinimumWidthChange', (val) => { this.currentDesktopMinimumWidth = val })\n    this.$on('Va@desktopMarginChange', (val) => { this.currentDesktopMargin = val })\n    this.$on('Va@sidebarWidthChange', (val) => { this.currentSidebarWidth = val })\n    this.$on('Va@topbarHeightChange', (val) => { this.currentTopbarHeight = val })\n    this.$on('Va@contentWidthChange', (val) => { this.currentContentWidth = val })\n    this.$on('Va@minibarWidthChange', (val) => { this.currentMinibarWidth = val })\n    this.$on('Va@windowWidthChange', (val) => { this.currentWindowWidth = val })\n    this.$on('Va@reverseChange', (val) => { this.isReverse = val })\n    this.$on('Va@pageIsMobile', (val) => { this.isMobile = val })\n    this.$on('Va@pageBgColorChange', (val) => { this.bg = val })\n    this.$on('Va@splitChange', (val) => { this.isSplit = val })\n    this.$on('Va@pageSizeChange', (val) => { this.sz = val })\n    this.$on('Va@rtlChange', (val) => { this.isRTL = val })\n  },\n  beforeDestroy () {\n    this.dispatch('VaLayoutManager', 'Va@pageDisconnect', true)\n  },\n  computed: {\n    pageClassObj () {\n      let {prefixCls, sz, article, isMobile} = this\n      let klass = {}\n\n      isMobile ? klass[prefixCls + '-page-container-lg'] = true : klass[prefixCls + '-page-container-' + sz] = true\n      klass[prefixCls + '-page-container-article'] = article\n\n      return klass\n    },\n    styleObj () {\n      // let {prefixCls, sidebarWidth} = this\n      let split = this.isSplit\n      let rtl = this.isRTL\n      let reverse = this.isReverse\n      let bg = this.bg\n      let stl = {}\n\n      let sw = parseInt(this.currentSidebarWidth)\n      let mw = parseInt(this.currentMinibarWidth)\n      let th = parseInt(this.currentTopbarHeight)\n      let dm = parseInt(this.currentDesktopMargin)\n      let dmw = parseInt(this.currentDesktopMinimumWidth)\n      let cw = parseInt(this.currentContentWidth)\n      let mobile = this.isMobile\n\n      // let possibleWidth = mw + sw + (dm * 2)\n\n      stl['background'] = bg\n      stl['position'] = 'fixed'\n      stl['top'] = th + 'px'\n      stl['height'] = 'calc(100% - ' + th + 'px)'\n      stl['overflow'] = 'scroll'\n      // stl['width'] = 'calc(100% - ' + sw + mw + 'px)'\n\n      /**\n       * Adjust the margins if content width is smaller than\n       * desktop minimum width.\n       */\n      if (!mobile) {\n        if (cw < dmw) {\n          let x = dmw - cw\n          dm = dm - (x / 2)\n        }\n      } else {\n        dm = 0\n        dmw = 0\n      }\n\n      /**\n       * If a minimum desktop width is set\n       */\n      if (dmw !== 0) {\n        stl['min-width'] = (dmw - mw - sw) + 'px'\n      } else {\n        stl['min-width'] = '0px'\n      }\n\n      // The layout isn't split, so Page is only\n      // concerned with total width of bars\n      if (!split) {\n        if (rtl) {\n          stl['left'] = dm + 'px'\n          stl['right'] = (sw + mw + dm) + 'px'\n        } else {\n          stl['left'] = (sw + mw + dm) + 'px'\n          stl['right'] = dm + 'px'\n        }\n      } else {\n        // So it's a split layout\n        // If reverse is also true, that means that the\n        // sidebar will be moved to the left,\n        // and the minibar is moved to the right\n        // SO.. our 'left' distance should be equal to the width of the minibar\n        if (reverse) {\n          stl['left'] = (dm + sw) + 'px'\n          stl['right'] = (dm + mw) + 'px'\n        } else {\n          stl['left'] = (dm + mw) + 'px'\n          stl['right'] = (dm + sw) + 'px'\n        }\n      }\n\n      return stl\n    }\n  }\n}\n",{"version":3,"sources":["VaPage.vue"],"names":[],"mappings":";;;;;;;;;;;AAWA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"VaPage.vue","sourceRoot":"node_modules/vue-atlas/src/Page","sourcesContent":["<template>\n  <div :style=\"styleObj\" :class=\"`${prefixCls}-page-wrapper`\">\n    <div :class=\"`${prefixCls}-page-container`\">\n      <div :class=\"pageClassObj\">\n        <slot/>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport events from '../utils/events'\n\nexport default {\n  name: 'VaPage',\n  mixins: [events],\n  props: {\n    size: {\n      type: String,\n      default: 'lg',\n      validator (v) {\n        return [\n          'lg',\n          'md',\n          'sm'\n        ].includes(v)\n      },\n      note: 'The size of the page.'\n    },\n    article: {\n      type: Boolean,\n      default: false,\n      note: 'When true, applies some additional CSS to header elements for more comfortable spacing.'\n    },\n    bgColor: {\n      type: String,\n      default: '#fff',\n      required: false\n    },\n    prefixCls: {\n      type: String,\n      default: 'va'\n    }\n  },\n  data () {\n    let bgColor = this.bgColor\n    let s = this.size\n    return {\n      currentDesktopMinimumWidth: 0,\n      currentSidebarWidth: 240,\n      currentMinibarWidth: 64,\n      currentDesktopMargin: 0,\n      currentTopbarHeight: 0,\n      currentContentWidth: 0,\n      currentWindowWidth: 0,\n      isReverse: false,\n      isMobile: false,\n      isSplit: false,\n      isRTL: false,\n      bg: bgColor,\n      sz: s\n    }\n  },\n  mounted () {\n    setTimeout(() => {\n      this.dispatch('VaLayoutManager', 'Va@configPageSizeChange', this.sz)\n    }, 10)\n  },\n  created () {\n    this.$on('Va@pagePresenceCheck', (val) => { this.dispatch('VaLayoutManager', 'Va@pagePresenceReply', true) })\n    this.$on('Va@desktopMinimumWidthChange', (val) => { this.currentDesktopMinimumWidth = val })\n    this.$on('Va@desktopMarginChange', (val) => { this.currentDesktopMargin = val })\n    this.$on('Va@sidebarWidthChange', (val) => { this.currentSidebarWidth = val })\n    this.$on('Va@topbarHeightChange', (val) => { this.currentTopbarHeight = val })\n    this.$on('Va@contentWidthChange', (val) => { this.currentContentWidth = val })\n    this.$on('Va@minibarWidthChange', (val) => { this.currentMinibarWidth = val })\n    this.$on('Va@windowWidthChange', (val) => { this.currentWindowWidth = val })\n    this.$on('Va@reverseChange', (val) => { this.isReverse = val })\n    this.$on('Va@pageIsMobile', (val) => { this.isMobile = val })\n    this.$on('Va@pageBgColorChange', (val) => { this.bg = val })\n    this.$on('Va@splitChange', (val) => { this.isSplit = val })\n    this.$on('Va@pageSizeChange', (val) => { this.sz = val })\n    this.$on('Va@rtlChange', (val) => { this.isRTL = val })\n  },\n  beforeDestroy () {\n    this.dispatch('VaLayoutManager', 'Va@pageDisconnect', true)\n  },\n  computed: {\n    pageClassObj () {\n      let {prefixCls, sz, article, isMobile} = this\n      let klass = {}\n\n      isMobile ? klass[prefixCls + '-page-container-lg'] = true : klass[prefixCls + '-page-container-' + sz] = true\n      klass[prefixCls + '-page-container-article'] = article\n\n      return klass\n    },\n    styleObj () {\n      // let {prefixCls, sidebarWidth} = this\n      let split = this.isSplit\n      let rtl = this.isRTL\n      let reverse = this.isReverse\n      let bg = this.bg\n      let stl = {}\n\n      let sw = parseInt(this.currentSidebarWidth)\n      let mw = parseInt(this.currentMinibarWidth)\n      let th = parseInt(this.currentTopbarHeight)\n      let dm = parseInt(this.currentDesktopMargin)\n      let dmw = parseInt(this.currentDesktopMinimumWidth)\n      let cw = parseInt(this.currentContentWidth)\n      let mobile = this.isMobile\n\n      // let possibleWidth = mw + sw + (dm * 2)\n\n      stl['background'] = bg\n      stl['position'] = 'fixed'\n      stl['top'] = th + 'px'\n      stl['height'] = 'calc(100% - ' + th + 'px)'\n      stl['overflow'] = 'scroll'\n      // stl['width'] = 'calc(100% - ' + sw + mw + 'px)'\n\n      /**\n       * Adjust the margins if content width is smaller than\n       * desktop minimum width.\n       */\n      if (!mobile) {\n        if (cw < dmw) {\n          let x = dmw - cw\n          dm = dm - (x / 2)\n        }\n      } else {\n        dm = 0\n        dmw = 0\n      }\n\n      /**\n       * If a minimum desktop width is set\n       */\n      if (dmw !== 0) {\n        stl['min-width'] = (dmw - mw - sw) + 'px'\n      } else {\n        stl['min-width'] = '0px'\n      }\n\n      // The layout isn't split, so Page is only\n      // concerned with total width of bars\n      if (!split) {\n        if (rtl) {\n          stl['left'] = dm + 'px'\n          stl['right'] = (sw + mw + dm) + 'px'\n        } else {\n          stl['left'] = (sw + mw + dm) + 'px'\n          stl['right'] = dm + 'px'\n        }\n      } else {\n        // So it's a split layout\n        // If reverse is also true, that means that the\n        // sidebar will be moved to the left,\n        // and the minibar is moved to the right\n        // SO.. our 'left' distance should be equal to the width of the minibar\n        if (reverse) {\n          stl['left'] = (dm + sw) + 'px'\n          stl['right'] = (dm + mw) + 'px'\n        } else {\n          stl['left'] = (dm + mw) + 'px'\n          stl['right'] = (dm + sw) + 'px'\n        }\n      }\n\n      return stl\n    }\n  }\n}\n</script>\n"]}]}